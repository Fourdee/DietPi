#!/bin/bash
{
	#////////////////////////////////////
	# DietPi Services Script
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	# Info:
	# - Allows service control for all listed programs used in dietpi-software
	# - Disable removes the autostart from init.d and systemd. This allows DietPi to control program services below.
	#
	# Usage:
	# - /DietPi/dietpi/dietpi-services $AVAILABLE_OPTIONS
	#////////////////////////////////////
	AVAILABLE_OPTIONS='
 - start/stop/restart/status		(all services, known to DietPi)
 - start/stop/restart <servicename>	(single service, systemd)
 - systemd_controlled/dietpi_controlled	(all services, known to DietPi)
 - enable/disable all			(all services, known to DietPi)
 - enable/disable <servicename>		(single service, systemd)
 - mask/unmask all			(all services, known to DietPi)
 - mask/unmask <servicename>		(single service, systemd)

 - You can include/exclude custom services by editing the following file: /DietPi/dietpi/.dietpi-services_include_exclude'

	# - Optional input, prevent starting of services, useful for unmask during dietpi-software installs
	DISABLE_SERVICES_START=${DISABLE_SERVICES_START:-0}

	#Grab Inputs
	INPUT_MODE=$1
	INPUT_S2="$2"

	#Import DietPi-Globals ---------------------------------------------------------------
	. /DietPi/dietpi/func/dietpi-globals
	(( $G_DIETPI_SERVICES_DISABLE )) && exit 0
	G_PROGRAM_NAME='DietPi-Services'
	G_CHECK_ROOT_USER
	G_INIT
	#Import DietPi-Globals ---------------------------------------------------------------


	aSERVICE_AVAILABLE=()
	aSERVICE_NAME=(

		#Core ------------------------------------------------------------------
		# - Network
		'fail2ban'
		'avahi-daemon'
		'isc-dhcp-server'
		'haproxy'

		# - File servers
		'proftpd'
		'vsftpd'
		'nmbd'
			'smbd'
		'nfs-kernel-server'
		#Core ------------------------------------------------------------------

		#Backends --------------------------------------------------------------
		# - MySQL/Databases
		'redis-server'
		'mariadb' # 'mysql' applied on Jessie systems during availablility check: https://github.com/Fourdee/DietPi/issues/1000#issuecomment-30776051

		# - PHP
		'php5-fpm'
		'php7.0-fpm'
		'php7.2-fpm'

		# - Webservers
		'apache2'
		'nginx'
		'lighttpd'
		'tomcat8'

		# - Media
		'alsa-init'
		'coturn'
		'mpd'
		'minidlna'
		'shairport-sync'
		'squeezelite'
		'gmrender'
		'mumble-server'
		'networkaudiod'
		'roonbridge'
		'roonserver'
		'roon-extension-manager'
		'icecast2'
			'darkice'
		'voice-recognizer'

		# - Download/BitTorrent
		'transmission-daemon'
		'qbittorrent'
		'rtorrent'
		'nzbget'
		'deluged'
		#Backends --------------------------------------------------------------

		#Frontends / Misc ------------------------------------------------------
		# - Media
		'ympd'
		'mympd'
		'squeezeboxserver'
		'subsonic'
		'airsonic'
		'mopidy'
		'koel'
		'raspotify'
		'plexpy'
		'plexmediaserver'
		'emby-server'
		'spotify-connect-web'
		'ubooquity'
		#'moode-worker'

		# - Download/BitTorrent
		'sickrage' # pre-v6.20 compatibility
		'medusa'
		'aria2'
		'sabnzbd'
		'couchpotato'
		'jackett'
		'sonarr'
		'radarr'
		'lidarr'
		'htpc-manager'
		'deluge-web'

		# - Cloud/Backups
		'bdd'
		'minio'
		'syncthing'
			'syncthing-inotify'
		'urbackupsrv'
		'tonido'
		'gogs'
		'gitea'

		# - Emulation/Gaming
		'supervisor'
		'nukkit'
		'cuberite'

		# - Camera/Surveillance
		'motioneye'
		'raspimjpeg'

		# - Printing
		'cups'
			'cloudprintd'
		'octoprint'

		# - Social/Search
		'yacy'
		'openbazaar'

		# - Hardware Projects
		'pi-spc'
		'pijuice'
		'mosquitto'
		'node-red'
		'blynkserver'
		'webiopi'
		'emonhub'
		'influxdb'
		'grafana-server'

		# - Home Automation
		'home-assistant'

		# - Network
		'noip2'
		'virtualhere'
		#'pihole-FTL' #: https://github.com/Fourdee/DietPi/issues/1696
		'hostapd'

		# - System stats / Management
		'netdata'
		'rpimonitor'
		'webmin'

		# - Misc
		#'openmediavault-engined'
		'docker'
		'cron'
		'fahclient'
		#Frontends / Misc ------------------------------------------------------

	)

	#Additional services: https://github.com/Fourdee/DietPi/issues/1869#issuecomment-401017251
	[[ -f '/etc/rsyncd.conf' ]] && aSERVICE_NAME+=('rsync')

	#Hidden/not-controlled services
	# - Status mode, enable service status
	if [[ $INPUT_MODE == 'status' ]]; then

		# - SSH
		aSERVICE_NAME+=('dropbear')
		aSERVICE_NAME+=('ssh') 						#: OpenSSH-server

		# - Misc
		#aSERVICE_NAME+=('systemd-timesyncd') 		#: Timesync. DietPi stops this by default after success, may confuse user/prompt questions.
		aSERVICE_NAME+=('dnsmasq') 					#: https://github.com/Fourdee/DietPi/issues/1501
		aSERVICE_NAME+=('pihole-FTL')					#: https://github.com/Fourdee/DietPi/issues/1696
		aSERVICE_NAME+=('openvpn') 					#: https://github.com/Fourdee/DietPi/issues/1501
		aSERVICE_NAME+=('vncserver') 				#: DietPi vnc server service/script
		aSERVICE_NAME+=('nxserver') 				#: Nomachine
		aSERVICE_NAME+=('xrdp') 					#: XRDP server
		aSERVICE_NAME+=('amiberry') 				#: DietPi AmiBerry run service

		# - DietPi
		aSERVICE_NAME+=('dietpi-ramdisk')
		aSERVICE_NAME+=('dietpi-ramlog')
		aSERVICE_NAME+=('dietpi-preboot')
		aSERVICE_NAME+=('dietpi-boot')
		aSERVICE_NAME+=('dietpi-postboot')
		aSERVICE_NAME+=('dietpi-wifi-monitor') 		#: https://github.com/Fourdee/DietPi/issues/1288#issuecomment-350653480

	fi

	# - User: read custom services file
	FP_INCLUDE_CUSTOM_SERVICES='/DietPi/dietpi/.dietpi-services_include_exclude'
	Process_Includes_Excludes(){

		if [[ -f $FP_INCLUDE_CUSTOM_SERVICES ]]; then

			while read line
			do

				if [[ $line != '#'* ]]; then

					local scrape="${line: +2}"

					# - Include
					if [[ $line == '+ '* ]]; then

						local index=${#aSERVICE_NAME[@]}

						local service_known_already_to_dietpi=0
						for ((i=0; i<${#aSERVICE_NAME[@]}; i++))
						do

							if [[ $scrape == ${aSERVICE_NAME[$i]} ]]; then

								service_known_already_to_dietpi=1
								break

							fi

						done

						if (( ! $service_known_already_to_dietpi )); then

							aSERVICE_NAME[$index]="$scrape"
							G_DIETPI-NOTIFY 2 "Including custom service: $scrape"

						fi

					# - Exclude
					elif [[ $line == '- '* ]]; then

						for ((i=0; i<${#aSERVICE_NAME[@]}; i++))
						do

							if [[ $scrape == ${aSERVICE_NAME[$i]} ]]; then

								G_DIETPI-NOTIFY 2 "Excluding service: $scrape"
								aSERVICE_NAME[$i]=''
								break

							fi

						done

					fi

				fi

			done < $FP_INCLUDE_CUSTOM_SERVICES

		fi

	}

	#Check if service name is available on system.
	Populate_Available_Array()
	{

		Process_Includes_Excludes

		#Find dpkg program names
		dpkg --get-selections | awk '{print $1}' > $FP_TEMP

		aSERVICE_AVAILABLE=()
		for ((i=0; i<${#aSERVICE_NAME[@]}; i++))
		do

			aSERVICE_AVAILABLE[$i]=0

			if [[ ${aSERVICE_NAME[$i]} ]]; then

				# Below Stretch, "mariadb" systemd service does not exist, thus "mysql" init.d service will be used.
				(( $G_DISTRO < 4 )) && [[ ${aSERVICE_NAME[$i]} == 'mariadb' ]] && aSERVICE_NAME[$i]='mysql'

				if [[ -f /etc/systemd/system/${aSERVICE_NAME[$i]}.service ||
					-f /lib/systemd/system/${aSERVICE_NAME[$i]}.service ||
					-f /usr/lib/systemd/system/${aSERVICE_NAME[$i]}.service ||
					-f /etc/init.d/${aSERVICE_NAME[$i]} ]] ||
					grep -qi "^${aSERVICE_NAME[$i]}$" $FP_TEMP; then

					aSERVICE_AVAILABLE[$i]=1

				fi

			fi

		done

	}

	Print_Status()
	{

		#$1 = Method
		#$2 = name
		#$3 = exit code

		#	NB: systemd exit code 5 = not loaded/active, so don't trigger a failed result.

		#ok
		if (( $3 == 0 || $3 == 5 )); then

			G_DIETPI-NOTIFY 0 "$1 : $2"

		#failed
		else

			G_DIETPI-NOTIFY 1 "$1 : $2"

		fi

	}

	#$1 = mode (eg: start/stop/restart)
	Set_Running_State(){

		local target_state=$1

		#### ALLO Special ####
		# - Although this is no longer used (dietpi-update for updates), until existing installations catch up with the latest GUI which removes the web update option, we must leave it in.
		# - Applies to v6.11 and lower
		if (( $G_DIETPI_VERSION_SUB < 12 )); then

			if [[ -d '/var/www/allo' && $target_state == 'stop' ]]; then

				local aallo_excluded_services_during_stop=(

					'apache2'
					'nginx'
					'lighttpd'
					'php5-fpm'
					'php7.0-fpm'
					'php7.1-fpm'
					'php7.2-fpm'
					'php7.3-fpm'
					'mysql'
					'avahi-daemon'

				)

				for ((i=0; i<${#aSERVICE_NAME[@]}; i++))
				do

					for ((j=0; j<${#aallo_excluded_services_during_stop[@]}; j++))
					do

						if [[ ${aSERVICE_NAME[$i]} == ${aallo_excluded_services_during_stop[$j]} ]]; then

							aSERVICE_AVAILABLE[$i]=0
							break

						fi

					done

				done

				unset aallo_excluded_services_during_stop

			fi

		fi
		#### ALLO Special ####

		# Control ownCloud and Nextcloud maintenance mode:
		if [[ $target_state == 'stop' || $target_state == 'restart' ]]; then

			grep -q "'maintenance' => false," /var/www/owncloud/config/config.php &> /dev/null && G_USER_INPUTS=0 G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD occ maintenance:mode --on
			grep -q "'maintenance' => false," /var/www/nextcloud/config/config.php &> /dev/null && G_USER_INPUTS=0 G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD ncc maintenance:mode --on

		fi

		#Linux: installed services
		# - STOP: Reverse service order
		if [[ $target_state == 'stop' ]]; then

			for ((i=$(( ${#aSERVICE_NAME[@]} - 1 )); i>=0; i--))
			do

				if (( ${aSERVICE_AVAILABLE[$i]} )); then

					G_DIETPI-NOTIFY -2 "${aSERVICE_NAME[$i]}"

					systemctl $target_state ${aSERVICE_NAME[$i]} &> /dev/null

					Print_Status $target_state ${aSERVICE_NAME[$i]} $?

				fi

			done

		# - EG: START/RESTART: Standard service order
		elif (( ! $DISABLE_SERVICES_START )); then

			for ((i=0; i<${#aSERVICE_NAME[@]}; i++))
			do

				if (( ${aSERVICE_AVAILABLE[$i]} )); then

					G_DIETPI-NOTIFY -2 "${aSERVICE_NAME[$i]}"

					systemctl $target_state ${aSERVICE_NAME[$i]} &> /dev/null

					Print_Status $target_state ${aSERVICE_NAME[$i]} $?

				fi

			done

			#	Apply process tool settings
			/DietPi/dietpi/dietpi-process_tool 1

			#	Control ownCloud and Nextcloud maintenance mode:
			if [[ $target_state == 'restart' || $target_state == 'start' ]]; then

				grep -q "'maintenance' => true," /var/www/owncloud/config/config.php &> /dev/null && G_USER_INPUTS=0 G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD occ maintenance:mode --off
				grep -q "'maintenance' => true," /var/www/nextcloud/config/config.php &> /dev/null && G_USER_INPUTS=0 G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD ncc maintenance:mode --off

			fi

		fi

	}

	FP_TEMP='dietpi-services_installed'

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main
	#/////////////////////////////////////////////////////////////////////////////////////
	#Info
	G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" "$INPUT_MODE"

	if [[ ! -f $FP_INCLUDE_CUSTOM_SERVICES ]]; then

		cat << _EOF_ > $FP_INCLUDE_CUSTOM_SERVICES
#DietPi-Services Include/Exclude configuration

#Include custom service (Use '+ servicename' without the comments to enable DietPi control of that service)
#	Once completed, for DietPi to control the service, please run the following command, without quotes (')
#	'dietpi-services dietpi_controlled'
#+ myservice1
#+ myservice2

#Exclude DietPi from controlling known services (Use '- servicename' without the comments to disable DietPi control for that service)
#	The service will be in disabled form, and, you can start and stop it manually
#- cron
#- transmission-daemon

_EOF_

	fi

	#Obtain an array of available services installed on system.
	Populate_Available_Array

	#-----------------------------------------------------------------------------------
	#dietpi_controlled/systemd_controlled
	if [[ $INPUT_MODE == 'dietpi_controlled' || $INPUT_MODE == 'systemd_controlled' ]]; then

		SYSTEMD_CMD='disable'

		if [[ $INPUT_MODE == 'systemd_controlled' ]]; then

			SYSTEMD_CMD='enable'

		fi

		for ((i=0; i<${#aSERVICE_NAME[@]}; i++))
		do

			#Apply
			if (( ${aSERVICE_AVAILABLE[$i]} )); then

				G_DIETPI-NOTIFY -2 "${aSERVICE_NAME[$i]}"

				systemctl $SYSTEMD_CMD ${aSERVICE_NAME[$i]} &> /dev/null

				Print_Status $INPUT_MODE ${aSERVICE_NAME[$i]} $?

			fi

		done

		systemctl daemon-reload &> /dev/null

	#-----------------------------------------------------------------------------------
	#mask/unmask/enable/disable
	elif [[ $INPUT_MODE == 'enable' || $INPUT_MODE == 'disable' || $INPUT_MODE == 'unmask' || $INPUT_MODE == 'mask' ]]; then

		#Switch to mask, as DietPi_Controlled uses disable to take over from systemd
		SYSTEMD_CMD='mask'
		if [[ $INPUT_MODE == 'enable' || $INPUT_MODE == 'unmask' ]]; then

			SYSTEMD_CMD='unmask'

		fi

		# - Process ALL known services
		if [[ $INPUT_S2 == 'all' ]]; then

			[[ $INPUT_MODE == 'disable' || $INPUT_MODE == 'mask' ]] && Set_Running_State stop

			for ((i=0; i<${#aSERVICE_NAME[@]}; i++))
			do

				if (( ${aSERVICE_AVAILABLE[$i]} )); then


					G_DIETPI-NOTIFY 0 "$INPUT_MODE $INPUT_S2: ${aSERVICE_NAME[$i]}"
					systemctl $SYSTEMD_CMD ${aSERVICE_NAME[$i]}

				fi

			done


		# - Process user defined single entry via cmd input
		else

			[[ $INPUT_MODE == 'disable' || $INPUT_MODE == 'mask' ]] && systemctl stop $INPUT_S2

			systemctl $SYSTEMD_CMD $INPUT_S2
			if (( $? == 0 )); then

				G_DIETPI-NOTIFY 0 "$INPUT_MODE $INPUT_S2"

			else

				G_DIETPI-NOTIFY 1 "$INPUT_MODE $INPUT_S2"

			fi

		fi

		systemctl daemon-reload &> /dev/null

		if [[ $INPUT_MODE == 'unmask' || $INPUT_MODE == 'enable' ]]; then

			Set_Running_State start

		fi

	#-----------------------------------------------------------------------------------
	#status
	elif [[ $INPUT_MODE == 'status' ]]; then

		for ((i=0; i<${#aSERVICE_NAME[@]}; i++))
		do

			#Apply
			if (( ${aSERVICE_AVAILABLE[$i]} )); then

				STATUS="${aSERVICE_NAME[$i]}\t$(systemctl status ${aSERVICE_NAME[$i]} | grep -m1 'Active' | cut -c12-)"

				if [[ $STATUS =~ .*'failed'.* ]]; then

					G_DIETPI-NOTIFY 1 "$STATUS"
					systemctl status ${aSERVICE_NAME[$i]} -l --no-pager

				elif [[ $STATUS =~ .*'inactive'.* ]]; then

					G_DIETPI-NOTIFY 2 "$STATUS"

				else

					G_DIETPI-NOTIFY 0 "$STATUS"

				fi

			fi

		done

	#-----------------------------------------------------------------------------------
	#start/stop/restart
	elif [[ $INPUT_MODE == 'start' || $INPUT_MODE == 'stop' || $INPUT_MODE == 'restart' ]]; then

			#Single use case, basically a alias for systemd
			if [[ $INPUT_S2 ]]; then

				systemctl $INPUT_MODE $INPUT_S2 &> /dev/null
				if (( ! $? )); then

					G_DIETPI-NOTIFY 0 "$INPUT_MODE $INPUT_S2"

				else

					G_DIETPI-NOTIFY 1 "$INPUT_MODE $INPUT_S2"

				fi

			#All services controlled
			else

				Set_Running_State $INPUT_MODE

			fi

	#-----------------------------------------------------------------------------------
	#Invalid command
	else

		G_DIETPI-NOTIFY 2 "Invalid command\e[0m\nAvailable options:\n$AVAILABLE_OPTIONS\n"

	fi
	#-----------------------------------------------------------------------------------
	unset aSERVICE_NAME
	unset aSERVICE_AVAILABLE
	#-----------------------------------------------------------------------------------
	exit
	#-----------------------------------------------------------------------------------
}
