#!/bin/bash
{
	#////////////////////////////////////
	# DietPi Services Script
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	# Info:
	# - Allows service control for all listed programs used in dietpi-software
	# - Disable removes the autostart from init.d and systemd. This allows DietPi to control program services below.
	#
	# Usage:
	# - /DietPi/dietpi/dietpi-services $AVAILABLE_OPTIONS
	AVAILABLE_OPTIONS='
 - [No Input]				(Run Menu)
 - start/stop/restart/status		(all services, known to DietPi)
 - start/stop/restart <servicename>	(single service, systemd)
 - systemd_controlled/dietpi_controlled	(all services, known to DietPi)
 - enable/disable all			(all services, known to DietPi)
 - enable/disable <servicename>		(single service, systemd)
 - mask/unmask all			(all services, known to DietPi)
 - mask/unmask <servicename>		(single service, systemd)

 - You can include/exclude custom services by editing the following file: /DietPi/dietpi/.dietpi-services_include_exclude'
	#////////////////////////////////////

	# Grab Inputs
	INPUT_MODE=$1
	INPUT_SERVICE=$2

	# - Optional input variables to prevent service handling
	[[ $G_DIETPI_SERVICES_DISABLE == 1 ]] && exit 0
	[[ $DISABLE_SERVICES_START == 1 ]] && [[ $INPUT_MODE == 'start' || $INPUT_MODE == 'restart' ]] && exit 0

	# Import DietPi-Globals --------------------------------------------------------------
	. /DietPi/dietpi/func/dietpi-globals
	G_PROGRAM_NAME='DietPi-Services'
	G_CHECK_ROOT_USER
	G_INIT
	# Import DietPi-Globals --------------------------------------------------------------

	FP_TEMP='dietpi-services_installed'

	# INIT_ALL_ARRAYS=1 | init all arrays (loading)
	# INIT_ALL_ARRAYS=0 | init/reset non-static arrays
	INIT_ALL_ARRAYS=1
	Init_Arrays(){

		aCPU_NICE=()
		aCPU_AFFINITY=()
		aCPU_SCHEDULE_POLICY=()
		aCPU_SCHEDULE_PRIORITY=()
		aIO_SCHEDULE_POLICY=()
		aIO_PRIORITY=()

		aFP_SERVICE=()
		aSERVICE_MODE=() 		# Enabled/disabled/masked/unmasked
		aSERVICE_AVAILABLE=()
		aSERVICE_RESTART_REQUIRED=() 	# eg, made changes, prompt to restart this service.
		if (( $INIT_ALL_ARRAYS )); then

			aCPU_SCHEDULE_POLICY_TYPE=( 'other' 'fifo' 'rr' 'batch' 'idle' )
			aCPU_SCHEDULE_POLICY_DESC=( 'Normal (Default)' 'First In, First Out (Real-time, time-critical)' 'Round Robin (Real-time, time-critical)' 'Batch style execution' 'Background Jobs (Very low priority)' )

			aIO_SCHEDULE_POLICY_TYPE=('best-effort' 'realtime' 'idle')
			aIO_SCHEDULE_POLICY_DESC=('Normal (Default)' 'Time-critical (Highest priority)' 'Background Jobs (Very low priority)')

			aSERVICE_NAME=(

				# Core -----------------------------------------------------------------
				# - Network
				'fail2ban'
				'avahi-daemon'
				'isc-dhcp-server'
				'haproxy'

				# - File servers
				'proftpd'
				'vsftpd'
				'nmbd'
					'smbd'
				'nfs-kernel-server'
				# Core -----------------------------------------------------------------

				# Backends -------------------------------------------------------------
				# - Databases
				'redis-server'
				'mariadb' # 'mysql' applied on Jessie systems during availablility check: https://github.com/MichaIng/DietPi/issues/1000#issuecomment-30776051

				# - PHP
				'php5-fpm'
				'php7.0-fpm'
				'php7.1-fpm'
				'php7.2-fpm'
				'php7.3-fpm'

				# - Webservers
				'apache2'
				'nginx'
				'lighttpd'
				'tomcat8'

				# - Media
				'alsa-init'
				'coturn'
				'mpd'
				'minidlna'
				'shairport-sync'
				'squeezelite'
				'gmrender'
				'mumble-server'
				'networkaudiod'
				'roonbridge'
				'roonserver'
				'roon-extension-manager'
				'icecast2'
					'darkice'
				'voice-recognizer'

				# - Download/BitTorrent
				'transmission-daemon'
				'qbittorrent'
				'rtorrent'
				'nzbget'
				'deluged'
				# Backends -------------------------------------------------------------

				# Frontends / Misc -----------------------------------------------------
				# - Media
				'ympd'
				'mympd'
				'logitechmediaserver'
				'subsonic'
				'airsonic'
				'mopidy'
				'koel'
				'raspotify'
				'plexpy'
				'plexmediaserver'
				'emby-server'
				'spotify-connect-web'
				'ubooquity'
				#'moode-worker'

				# - Download/BitTorrent
				'sickrage' # pre-v6.20 compatibility
				'medusa'
				'aria2'
				'sabnzbd'
				'couchpotato'
				'jackett'
				'sonarr'
				'radarr'
				'lidarr'
				'htpc-manager'
				'deluge-web'

				# - Cloud/Backups
				'bdd'
				'minio'
				'syncthing'
					'syncthing-inotify'
				'urbackupsrv'
				'tonido'
				'gogs'
				'gitea'

				# - Emulation/Gaming
				'supervisor'
				'nukkit'
				'cuberite'

				# - Camera/Surveillance
				'motioneye'
				'raspimjpeg'

				# - Printing
				'cups'
					'cloudprintd'
				'octoprint'

				# - Social/Search
				'yacy'
				'openbazaar'

				# - Hardware Projects
				'pi-spc'
				'pijuice'
				'mosquitto'
				'node-red'
				'blynkserver'
				'webiopi'
				'emonhub'
				'influxdb'
				'grafana-server'

				# - Home Automation
				'home-assistant'

				# - Network
				'noip2'
				'virtualhere'
				#'pihole-FTL' # https://github.com/MichaIng/DietPi/issues/1696
				'hostapd'

				# - System stats / Management
				'netdata'
				'rpimonitor'
				'webmin'

				# - Misc
				#'openmediavault-engined'
				'docker'
				'cron'
				'fahclient'
				# Frontends / Misc -----------------------------------------------------

			)

			# Additional services: https://github.com/MichaIng/DietPi/issues/1869#issuecomment-401017251
			[[ -f '/etc/rsyncd.conf' ]] && aSERVICE_NAME+=('rsync')

			# Hidden/not-controlled services
			# - Status mode, enable service status
			if [[ ! $INPUT_MODE || $INPUT_MODE == 'status' ]]; then

				# - SSH
				aSERVICE_NAME+=('dropbear')
				aSERVICE_NAME+=('ssh') 				# OpenSSH Server

				# - Misc
				#aSERVICE_NAME+=('systemd-timesyncd') 		# Timesync. DietPi stops this by default after success, may confuse user/prompt questions.
				aSERVICE_NAME+=('dnsmasq') 			# https://github.com/MichaIng/DietPi/issues/1501
				aSERVICE_NAME+=('pihole-FTL')			# https://github.com/MichaIng/DietPi/issues/1696
				aSERVICE_NAME+=('openvpn') 			# https://github.com/MichaIng/DietPi/issues/1501
				aSERVICE_NAME+=('vncserver') 			# DietPi vnc server service/script
				aSERVICE_NAME+=('nxserver') 			# NoMachine
				aSERVICE_NAME+=('xrdp') 			# XRDP Server
				aSERVICE_NAME+=('amiberry') 			# DietPi AmiBerry run service

				# - DietPi
				aSERVICE_NAME+=('dietpi-nordvpn') 		# NordVPN install + client
				if [[ $INPUT_MODE == 'status' ]]; then

					aSERVICE_NAME+=('dietpi-ramdisk')
					aSERVICE_NAME+=('dietpi-ramlog')
					aSERVICE_NAME+=('dietpi-preboot')
					aSERVICE_NAME+=('dietpi-boot')
					aSERVICE_NAME+=('dietpi-postboot')
					aSERVICE_NAME+=('dietpi-wifi-monitor') 	# https://github.com/MichaIng/DietPi/issues/1288#issuecomment-350653480
					aSERVICE_NAME+=('dietpi-arr_to_RAM')	# Sonarr/Radarr/Lidarr database to RAM link service

				fi
				#aSERVICE_NAME+=('wg-quick@wg0') 		# WireGuard

			fi

			INIT_ALL_ARRAYS=0

		fi

	}


	# - User: read custom services file
	FP_INCLUDE_CUSTOM_SERVICES='/DietPi/dietpi/.dietpi-services_include_exclude'
	Process_Includes_Excludes(){

		if [[ -f $FP_INCLUDE_CUSTOM_SERVICES ]]; then

			while read line
			do

				[[ $line == '#'* ]] && continue

				local scrape=${line: +2}
				local i=''

				# - Include
				if [[ $line == '+ '* ]]; then

					local service_known_already_to_dietpi=0
					for i in "${aSERVICE_NAME[@]}"
					do

						if [[ $scrape == "$i" ]]; then

							service_known_already_to_dietpi=1
							break

						fi

					done

					if (( ! $service_known_already_to_dietpi )); then

						aSERVICE_NAME+=("$scrape")
						G_DIETPI-NOTIFY 2 "Including custom service: $scrape"

					fi

				# - Exclude
				elif [[ $line == '- '* ]]; then

					for i in ${!aSERVICE_NAME[@]}
					do

						if [[ $scrape == "${aSERVICE_NAME[$i]}" ]]; then

							G_DIETPI-NOTIFY 2 "Excluding service: $scrape"
							aSERVICE_NAME[$i]=''
							break

						fi

					done

				fi

			done < $FP_INCLUDE_CUSTOM_SERVICES

		fi

	}

	# $1=index
	FP_DIETPI_PROCESS_TOOL_SYSTEMD_CONF='dietpi-process_tool.conf'
	Save_Process_Tool(){

		local index=$1

		# Backwards cap for init.d, create systemd wrapper
		echo ${aFP_SERVICE[$index]}
		sleep 1
		if [[ ${aFP_SERVICE[$index]} == '/etc/init.d/'* ]]; then

			aFP_SERVICE[$index]="/lib/systemd/system/${aSERVICE_NAME[$index]}.service"
			cat << _EOF_ > "${aFP_SERVICE[$index]}"
[Unit]
Description=${aSERVICE_NAME[$index]} sysvinit wrapper (DietPi)

[Service]
Type=forking
ExecStart=/etc/init.d/${aSERVICE_NAME[$index]} start
ExecStop=/etc/init.d/${aSERVICE_NAME[$index]} stop

[Install]
WantedBy=multi-user.target
_EOF_
			G_WHIP_MSG "[ INFO ] DietPi has created a systemd service wrapper for /etc/init.d/${aSERVICE_NAME[$index]}. This is required to allow support for applying process tool options.\n
If you experience any issues with the wrapper, simply remove the file:\n - rm /lib/systemd/system/${aSERVICE_NAME[$index]}.service\n - Then restart the service."

		fi

		mkdir -p "${aFP_SERVICE[$index]}.d"
		cat << _EOF_ > "${aFP_SERVICE[$index]}.d/$FP_DIETPI_PROCESS_TOOL_SYSTEMD_CONF"
[Service]
Nice=${aCPU_NICE[$index]}
CPUAffinity=${aCPU_AFFINITY[$index]}
CPUSchedulingPolicy=${aCPU_SCHEDULE_POLICY[$index]}
CPUSchedulingPriority=${aCPU_SCHEDULE_PRIORITY[$index]}
IOSchedulingClass=${aIO_SCHEDULE_POLICY[$index]}
IOSchedulingPriority=${aIO_PRIORITY[$index]}
_EOF_
		G_RUN_CMD systemctl daemon-reload
		aSERVICE_RESTART_REQUIRED[$index]=1

	}

	# $1=index
	Load_Process_Tool(){

		local index=$1

		aCPU_NICE[$index]=$(grep -m1 '^[[:blank:]]*Nice=' ${aFP_SERVICE[$index]}.d/$FP_DIETPI_PROCESS_TOOL_SYSTEMD_CONF | sed 's/^[^=]*=//g')
		aCPU_AFFINITY[$index]=$(grep -m1 '^[[:blank:]]*CPUAffinity=' ${aFP_SERVICE[$index]}.d/$FP_DIETPI_PROCESS_TOOL_SYSTEMD_CONF | sed 's/^[^=]*=//g')
		aCPU_SCHEDULE_POLICY[$index]=$(grep -m1 '^[[:blank:]]*CPUSchedulingPolicy=' ${aFP_SERVICE[$index]}.d/$FP_DIETPI_PROCESS_TOOL_SYSTEMD_CONF | sed 's/^[^=]*=//g')
		aCPU_SCHEDULE_PRIORITY[$index]=$(grep -m1 '^[[:blank:]]*CPUSchedulingPriority=' ${aFP_SERVICE[$index]}.d/$FP_DIETPI_PROCESS_TOOL_SYSTEMD_CONF | sed 's/^[^=]*=//g')
		aIO_SCHEDULE_POLICY[$index]=$(grep -m1 '^[[:blank:]]*IOSchedulingClass=' ${aFP_SERVICE[$index]}.d/$FP_DIETPI_PROCESS_TOOL_SYSTEMD_CONF | sed 's/^[^=]*=//g')
		aIO_PRIORITY[$index]=$(grep -m1 '^[[:blank:]]*IOSchedulingPriority=' ${aFP_SERVICE[$index]}.d/$FP_DIETPI_PROCESS_TOOL_SYSTEMD_CONF | sed 's/^[^=]*=//g')

	}

	# $1=index
	Reset_Service_Defaults(){

		local index=$1

		local fp="${aFP_SERVICE[$index]}.d/$FP_DIETPI_PROCESS_TOOL_SYSTEMD_CONF"
		if [[ -f $fp ]]; then

			G_RUN_CMD rm "$fp"
			G_RUN_CMD rmdir --ignore-fail-on-non-empty "${aFP_SERVICE[$index]}.d"
			G_RUN_CMD systemctl unmask "${aSERVICE_NAME[$index]}"
			G_RUN_CMD systemctl daemon-reload
			aSERVICE_RESTART_REQUIRED[$index]=1

		fi

	}

	# Check if service name is available on system.
	Populate_Available_Array(){

		G_DIETPI-NOTIFY 2 'Generating service and process tool list, please wait...'

		Init_Arrays

		Process_Includes_Excludes

		local default_cpu_affinity="0-$(( $G_HW_CPU_CORES - 1 ))"
		for i in ${!aSERVICE_NAME[@]}
		do

			[[ ${aSERVICE_NAME[$i]} ]] || continue # Skip excluded services

			aSERVICE_AVAILABLE[$i]=0
			aFP_SERVICE[$i]=''
			[[ ${aSERVICE_RESTART_REQUIRED[$i]} == [01] ]] || aSERVICE_RESTART_REQUIRED[$i]=0 # Static init for menu use

			local fp_service=( "/etc/systemd/system/${aSERVICE_NAME[$i]}.service" "/lib/systemd/system/${aSERVICE_NAME[$i]}.service" "/usr/lib/systemd/system/${aSERVICE_NAME[$i]}.service" "/etc/init.d/${aSERVICE_NAME[$i]}" )
			for j in "${fp_service[@]}"
			do

				if [[ -f $j ]]; then

					aSERVICE_AVAILABLE[$i]=1
					aFP_SERVICE[$i]=$j

					aSERVICE_MODE[$i]=$(systemctl is-enabled "${aSERVICE_NAME[$i]}" 2> /dev/null)

					aCPU_NICE[$i]=0
					aCPU_AFFINITY[$i]=$default_cpu_affinity

					aCPU_SCHEDULE_POLICY[$i]='other'
					aCPU_SCHEDULE_PRIORITY[$i]=0
					aIO_SCHEDULE_POLICY[$i]='best-effort'
					aIO_PRIORITY[$i]='3'
					[[ -f $j.d/$FP_DIETPI_PROCESS_TOOL_SYSTEMD_CONF ]] && Load_Process_Tool $i

					break

				fi

			done
			unset fp_service

		done

	}

	Print_Status(){

		# $1 = Method
		# $2 = name
		# $3 = exit code

		# - NB: systemd exit code 5 = not loaded/active, so don't trigger a failed result.

		# Ok
		if [[ $3 == [05] ]]; then

			G_DIETPI-NOTIFY 0 "$1 : $2"

		# Failed
		else

			G_DIETPI-NOTIFY 1 "$1 : $2"

		fi

	}

	# $1 = mode (start/stop/restart)
	Set_Running_State(){

		local target_state=$1

		# Enable ownCloud and Nextcloud maintenance mode
		if [[ $target_state == 'stop' || $target_state == 'restart' ]]; then

			[[ -f '/var/www/owncloud/config/config.php' ]] && grep -q "'maintenance' => false," /var/www/owncloud/config/config.php && G_USER_INPUTS=0 G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD occ maintenance:mode --on
			[[ -f '/var/www/nextcloud/config/config.php' ]] && grep -q "'maintenance' => false," /var/www/nextcloud/config/config.php && G_USER_INPUTS=0 G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD ncc maintenance:mode --on

		fi

		# STOP: Reverse service order
		if [[ $target_state == 'stop' ]]; then

			for ((i=$(( ${#aSERVICE_NAME[@]} - 1 )); i>=0; i--))
			do

				if (( ${aSERVICE_AVAILABLE[$i]} )); then

					G_DIETPI-NOTIFY -2 ${aSERVICE_NAME[$i]}
					systemctl $target_state ${aSERVICE_NAME[$i]} &> /dev/null
					Print_Status $target_state ${aSERVICE_NAME[$i]} $?

					aSERVICE_RESTART_REQUIRED[$i]=0

				fi

			done

		# EG: START/RESTART: Standard service order
		else

			for i in ${!aSERVICE_NAME[@]}
			do

				if (( ${aSERVICE_AVAILABLE[$i]} )); then

					G_DIETPI-NOTIFY -2 ${aSERVICE_NAME[$i]}
					systemctl $target_state ${aSERVICE_NAME[$i]} &> /dev/null
					Print_Status $target_state ${aSERVICE_NAME[$i]} $?

					aSERVICE_RESTART_REQUIRED[$i]=0

				fi

			done

			# - Disable ownCloud and Nextcloud maintenance mode
			[[ -f '/var/www/owncloud/config/config.php' ]] && grep -q "'maintenance' => true," /var/www/owncloud/config/config.php && G_USER_INPUTS=0 G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD occ maintenance:mode --off
			[[ -f '/var/www/nextcloud/config/config.php' ]] && grep -q "'maintenance' => true," /var/www/nextcloud/config/config.php && G_USER_INPUTS=0 G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD ncc maintenance:mode --off

		fi

	}

	# $1=mode
	Apply_Service_States(){

		local mode=$1
		local service=$2
		local systemd_cmd='disable'

		# dietpi_controlled/systemd_controlled
		if [[ $mode == 'dietpi_controlled' || $mode == 'systemd_controlled' ]]; then

			[[ $mode == 'systemd_controlled' ]] && systemd_cmd='enable'

			for i in ${!aSERVICE_NAME[@]}
			do

				# Apply
				if (( ${aSERVICE_AVAILABLE[$i]} )); then

					G_DIETPI-NOTIFY -2 ${aSERVICE_NAME[$i]}
					systemctl $systemd_cmd ${aSERVICE_NAME[$i]} &> /dev/null
					Print_Status $mode ${aSERVICE_NAME[$i]} $?

				fi

			done

			systemctl daemon-reload &> /dev/null

		# mask/unmask/enable/disable
		elif [[ $mode == 'enable' || $mode == 'disable' || $mode == 'unmask' || $mode == 'mask' ]]; then

			# - Switch to mask, as DietPi_Controlled uses disable to take over from systemd
			[[ $mode == 'enable' || $mode == 'unmask' ]] && systemd_cmd='unmask' || systemd_cmd='mask'

			# - Process ALL known services
			if [[ $service == 'all' ]]; then

				[[ $mode == 'disable' || $mode == 'mask' ]] && Set_Running_State stop

				for i in ${!aSERVICE_NAME[@]}
				do

					if (( ${aSERVICE_AVAILABLE[$i]} )); then

						G_DIETPI-NOTIFY 0 "$mode $service: ${aSERVICE_NAME[$i]}"
						systemctl $systemd_cmd ${aSERVICE_NAME[$i]}

					fi

				done


			# - Process user defined single entry via cmd input
			else

				[[ $mode == 'disable' || $mode == 'mask' ]] && systemctl stop $service

				local notify_index=0
				systemctl $systemd_cmd $service || notify_index=1
				G_DIETPI-NOTIFY $notify_index "$mode $service"

			fi

		# status
		elif [[ $mode == 'status' ]]; then

			for i in ${!aSERVICE_NAME[@]}
			do

				# Apply
				if (( ${aSERVICE_AVAILABLE[$i]} )); then

					local status="${aSERVICE_NAME[$i]}\t$(systemctl status ${aSERVICE_NAME[$i]} | grep -m1 'Active' | cut -c12-)"
					if [[ $status =~ 'failed' ]]; then

						G_DIETPI-NOTIFY 1 "$status"
						systemctl -l --no-pager status ${aSERVICE_NAME[$i]}

					elif [[ $status =~ 'inactive' ]]; then

						G_DIETPI-NOTIFY 2 "$status"

					else

						G_DIETPI-NOTIFY 0 "$status"

					fi

				fi

			done

		# start/stop/restart
		elif [[ $mode == 'start' || $mode == 'stop' || $mode == 'restart' ]]; then

			# Single use case, basically a alias for systemd
			if [[ $service ]]; then

				if systemctl $mode $service &> /dev/null; then

					G_DIETPI-NOTIFY 0 "$mode $service"

				else

					G_DIETPI-NOTIFY 1 "$mode $service"

				fi

			# All services controlled
			else

				Set_Running_State $mode

			fi

		else

			G_DIETPI-NOTIFY 2 "Invalid command\e[0m\nAvailable options:\n$AVAILABLE_OPTIONS\n"

		fi

	}


	#/////////////////////////////////////////////////////////////////////////////////////
	# Menu System
	#/////////////////////////////////////////////////////////////////////////////////////
	MENU_TARGETID=0
	MENU_SELECTED_SERVICE_INDEX=0
	MENU_LAST_SELECTED_MAIN=0 # Main menu
	MENU_LAST_SELECTED_SUB_0=0 # Sub menus, level 0

	Menu_Exit(){

		G_WHIP_SIZE_X_MAX=50
		if G_WHIP_YESNO "Exit $G_PROGRAM_NAME?"; then

			# - Prompt to restart changed services.
			local service_restart_list_menu=''
			local service_restart_list_systemd=''
			for i in ${!aSERVICE_NAME[@]}
			do

				if (( ${aSERVICE_RESTART_REQUIRED[$i]} )); then

					service_restart_list_menu+="\n - ${aSERVICE_NAME[$i]}: Nice=${aCPU_NICE[$i]} | Affinity=${aCPU_AFFINITY[$i]} | CPU Scheduling Policy=${aCPU_SCHEDULE_POLICY[$i]} | CPU Scheduling Priority=${aCPU_SCHEDULE_PRIORITY[$i]} | IO Scheduling Policy=${aIO_SCHEDULE_POLICY[$i]} | IO Scheduling Priority=${aIO_PRIORITY[$i]}"
					service_restart_list_systemd+="${aSERVICE_NAME[$i]} "

				fi

			done

			if [[ $service_restart_list_systemd ]]; then

				if G_WHIP_YESNO "[INFO] The following services require a restart, in order to apply your recently modified settings: $service_restart_list_menu\n\nDo you wish to continue, and, restart the above services now?"; then

					G_RUN_CMD systemctl restart $service_restart_list_systemd

				fi

			fi

			MENU_TARGETID=-1 # Exit

		else

			MENU_TARGETID=0 # Return to Main Menu

		fi

	}

	# MENU_TARGETID=0
	Menu_Main(){

		MENU_TARGETID=0

		G_WHIP_MENU_ARRAY=('' '●─ Single Service Options ')
		for i in ${!aSERVICE_NAME[@]}
		do

			if (( ${aSERVICE_AVAILABLE[$i]} )); then

				G_WHIP_MENU_ARRAY+=("${aSERVICE_NAME[$i]}" ": $(systemctl is-active ${aSERVICE_NAME[$i]}) | Nice ${aCPU_NICE[$i]} | Affinity ${aCPU_AFFINITY[$i]}")

			fi

		done

		G_WHIP_MENU_ARRAY+=('' '●─ Global Service Options ')
		G_WHIP_MENU_ARRAY+=('Stop' ': Stop ALL services')
		G_WHIP_MENU_ARRAY+=('Restart' ': Start/restart ALL services')

		G_WHIP_DEFAULT_ITEM=$MENU_LAST_SELECTED_MAIN
		G_WHIP_BUTTON_CANCEL_TEXT='Exit'
		if G_WHIP_MENU 'Please select an option or program:'; then

			MENU_LAST_SELECTED_MAIN=$G_WHIP_RETURNED_VALUE

			if [[ ${G_WHIP_RETURNED_VALUE,,} == 'restart' || ${G_WHIP_RETURNED_VALUE,,} == 'stop' ]]; then

				Apply_Service_States ${G_WHIP_RETURNED_VALUE,,}
				sleep 0.5

			else

				# Find selected program index
				MENU_SELECTED_SERVICE_INDEX=-1
				for i in ${!aSERVICE_NAME[@]}
				do

					if [[ ${aSERVICE_NAME[$i]} == "$G_WHIP_RETURNED_VALUE" ]]; then

						MENU_SELECTED_SERVICE_INDEX=$i
						break

					fi

				done
				(( $MENU_SELECTED_SERVICE_INDEX >= 0 )) && MENU_TARGETID=1

			fi

		else

			Menu_Exit

		fi

	}

	Menu_Service(){

		MENU_TARGETID=1

		local service_state=$(systemctl is-active ${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]})
		local service_mode_print=${aSERVICE_MODE[$MENU_SELECTED_SERVICE_INDEX]}
		if [[ $service_mode_print == 'disabled' ]]; then

			service_mode_print='DietPi controlled'

		elif [[ $service_mode_print == 'enabled' ]]; then

			service_mode_print='Systemd controlled'

		fi

		G_WHIP_DEFAULT_ITEM=$MENU_LAST_SELECTED_SUB_0
		G_WHIP_BUTTON_CANCEL_TEXT='Back'
		G_WHIP_MENU_ARRAY=(

			'' '●─ Service Control '
			'State' ": [$service_state]"
			'Status' ': Display Systemd status log'
			'Edit' ": [${aFP_SERVICE[$MENU_SELECTED_SERVICE_INDEX]}]"
			'Mode' ": [$service_mode_print]"
			'' '●─ Process Tool '
			'CPU Nice' ": [${aCPU_NICE[$MENU_SELECTED_SERVICE_INDEX]}]"
			'CPU Affinity' ": [${aCPU_AFFINITY[$MENU_SELECTED_SERVICE_INDEX]}]"
			'CPU Schedule Policy' ": [${aCPU_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]}]"
			'CPU Schedule Priority' ": [${aCPU_SCHEDULE_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]}]"
			'IO Scheduling Policy' ": [${aIO_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]}]"

		)
		[[ ${aIO_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]} != 'idle' ]] && G_WHIP_MENU_ARRAY+=('IO Scheduling Priority' ": [${aIO_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]}]")
		G_WHIP_MENU_ARRAY+=(

			'' '●─ Presets '
			'Reset' ': Resets all service and CPU/IO options to default'
			'Lowest Priority' ': Lowest priority background CPU/IO preset'
			'Low Priority' ': Low priority CPU/IO preset'
			'High Priority' ': High priority CPU/IO preset'
			'Highest Priority' ': Highest priority for critical CPU/IO preset'

		)

		if G_WHIP_MENU "Please select an option for ${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]}:"; then

			MENU_LAST_SELECTED_SUB_0=$G_WHIP_RETURNED_VALUE

			case "$G_WHIP_RETURNED_VALUE" in

				'Status')

					systemctl status ${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]} -l > /tmp/.dietpi-services_systemctl.log

					log=0 G_WHIP_VIEWFILE /tmp/.dietpi-services_systemctl.log
					rm /tmp/.dietpi-services_systemctl.log

				;;

				'Low Priority')

					aCPU_NICE[$MENU_SELECTED_SERVICE_INDEX]=10
					#aCPU_AFFINITY[$MENU_SELECTED_SERVICE_INDEX]=
					aCPU_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]='other'
					aCPU_SCHEDULE_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]=0
					aIO_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]='best-effort'
					aIO_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]=7
					Save_Process_Tool $MENU_SELECTED_SERVICE_INDEX

				;;

				'Lowest Priority')

					aCPU_NICE[$MENU_SELECTED_SERVICE_INDEX]=19
					#aCPU_AFFINITY[$MENU_SELECTED_SERVICE_INDEX]=
					aCPU_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]='idle'
					aCPU_SCHEDULE_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]=0
					aIO_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]='idle'
					aIO_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]=3 #Has no effect in idle
					Save_Process_Tool $MENU_SELECTED_SERVICE_INDEX

				;;

				'High Priority')

					aCPU_NICE[$MENU_SELECTED_SERVICE_INDEX]=-10
					#aCPU_AFFINITY[$MENU_SELECTED_SERVICE_INDEX]=
					aCPU_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]='other'
					aCPU_SCHEDULE_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]=10
					aIO_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]='best-effort'
					aIO_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]=0
					Save_Process_Tool $MENU_SELECTED_SERVICE_INDEX

				;;

				'Highest Priority')

					aCPU_NICE[$MENU_SELECTED_SERVICE_INDEX]=-20
					#aCPU_AFFINITY[$MENU_SELECTED_SERVICE_INDEX]=
					aCPU_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]='fifo'
					aCPU_SCHEDULE_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]=50
					aIO_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]='realtime'
					aIO_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]=0
					Save_Process_Tool $MENU_SELECTED_SERVICE_INDEX

				;;

				'Reset')

					Reset_Service_Defaults $MENU_SELECTED_SERVICE_INDEX
					Populate_Available_Array

				;;

				'Mode')

					G_WHIP_MENU_ARRAY=(

						'DietPi controlled' ': Recommended (DietPi controls service order)'
						'Systemd controlled' ': Systemd controls service order'
						'mask'	': Hide service from system and prevent use'
						'unmask' ': Un-hide service from system and allow use'

					)
					G_WHIP_DEFAULT_ITEM='DietPi Controlled'
					if G_WHIP_MENU "Please select the desired Service Mode for :\n${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]}"; then

						local cmd_out="$G_WHIP_RETURNED_VALUE"
						unmask_required=0
						if [[ ${cmd_out,,} == 'dietpi controlled' ]]; then

							cmd_out='disable'
							unmask_required=1

						elif [[ ${cmd_out,,} == 'systemd controlled' ]]; then

							cmd_out='enable'
							unmask_required=1

						fi

						(( $unmask_required )) && systemctl unmask ${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]} &> /dev/null
						G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD systemctl $cmd_out ${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]}
						Populate_Available_Array

					fi

				;;

				'IO Scheduling Policy')

					G_WHIP_MENU_ARRAY=()
					for i in ${!aIO_SCHEDULE_POLICY_TYPE[@]}
					do

						G_WHIP_MENU_ARRAY+=("${aIO_SCHEDULE_POLICY_TYPE[$i]}" ": ${aIO_SCHEDULE_POLICY_DESC[$i]}" )

					done

					G_WHIP_DEFAULT_ITEM=${aIO_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]}
					if G_WHIP_MENU "Please select the desired IO Scheduling Class for :\n${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]}"; then

						aIO_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]=$G_WHIP_RETURNED_VALUE

						Save_Process_Tool $MENU_SELECTED_SERVICE_INDEX

					fi

				;;

				'IO Scheduling Priority')

					G_WHIP_MENU_ARRAY=()
					for i in {7..0}
					do
						local desc=''
						if (( $i == 0 )); then

							desc='(Highest priority)'

						elif (( $i == 7 )); then

							desc='(Lowest priority)'

						fi

						G_WHIP_MENU_ARRAY+=("IO Priority : $i" " $desc")

					done

					G_WHIP_DEFAULT_ITEM=${aIO_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]}
					G_WHIP_MENU "Please select the desired IO Scheduling Priority level for:\n${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]}."
					if (( ! $? )); then

						# Convert back to int
						aIO_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]=${G_WHIP_RETURNED_VALUE##*: }
						Save_Process_Tool $MENU_SELECTED_SERVICE_INDEX

					fi

				;;

				'Edit')

					nano ${aFP_SERVICE[$MENU_SELECTED_SERVICE_INDEX]}
					G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD systemctl daemon-reload

				;;

				'State')

					local target_mode='restart'
					[[ ${service_state,,} == 'active' ]] && target_mode='stop'

					Apply_Service_States $target_mode ${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]}
					sleep 0.5

				;;

				'CPU Nice')

					# Get existing nice level
					# - note: Whiptail will not work with negative numbers. The string cannot start with "-" as it throws subscript error.
					local nice_current="Nice : ${aCPU_NICE[$MENU_SELECTED_SERVICE_INDEX]}"

					G_WHIP_MENU_ARRAY=()

					for i in {-20..19}
					do
						local desc=''
						if (( $i == -20 )); then

							desc='(Highest priority)'

						elif (( $i == -10 )); then

							desc='(Higher priority)'

						elif (( $i == -5 )); then

							desc='(High priority)'

						elif (( $i == 0 )); then

							desc='(Default priority)'

						elif (( $i == 5 )); then

							desc='(Low priority)'

						elif (( $i == 10 )); then

							desc='(Lower priority)'

						elif (( $i == 19 )); then

							desc='(Lowest priority)'

						fi

						G_WHIP_MENU_ARRAY+=("Nice : $i" " $desc")

					done

					G_WHIP_DEFAULT_ITEM=$nice_current
					if G_WHIP_MENU "Please select the desired Nice level for:\n${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]}\n
Info:\n - Negative values have a higher priority (eg: -10).\n - Positive values have a lower priority (eg: 15).\n - The default value is 0."; then

						# Convert back to int
						aCPU_NICE[$MENU_SELECTED_SERVICE_INDEX]=${G_WHIP_RETURNED_VALUE##*: }
						Save_Process_Tool $MENU_SELECTED_SERVICE_INDEX

					fi

				;;

				'CPU Affinity')

					# Get existing affinity
					# NB: currently enables all
					G_WHIP_CHECKLIST_ARRAY=()

					for ((i=0; i<$G_HW_CPU_CORES; i++))
					do

						G_WHIP_CHECKLIST_ARRAY+=($i 'CPU                           ' 'on')

					done

					if G_WHIP_CHECKLIST "Please select the desired CPU Affinity for:\n${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]}\n
- Use the spacebar to enable/disable access to specific cores, for this program.\n- The default value is to enable all items."; then

						local new_affinity=''
						local loop_count=0

						for i in ${G_WHIP_RETURNED_VALUE[@]}
						do

							# taskset requires , (comma) seperated cpu index indexs after 1st entry.
							if (( $loop_count == 0 )); then

								new_affinity+=$i

							# Add comma for future entries
							else

								new_affinity+=",$i"

							fi

							((loop_count++))

						done

						#Update affinity array with new value, if at least 1 item was selected.
						[[ $new_affinity ]] && aCPU_AFFINITY[$MENU_SELECTED_SERVICE_INDEX]=$new_affinity

						Save_Process_Tool $MENU_SELECTED_SERVICE_INDEX

					fi

				;;

				'CPU Schedule Policy')

					G_WHIP_MENU_ARRAY=()
					for i in ${!aCPU_SCHEDULE_POLICY_TYPE[@]}
					do

						G_WHIP_MENU_ARRAY+=("${aCPU_SCHEDULE_POLICY_TYPE[$i]}" ": ${aCPU_SCHEDULE_POLICY_DESC[$i]}" )

					done

					G_WHIP_DEFAULT_ITEM=${aCPU_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]}
					if G_WHIP_MENU "Please select the desired CPU Scheduling Policy for :\n${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]}"; then

						aCPU_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]=$G_WHIP_RETURNED_VALUE

						Save_Process_Tool $MENU_SELECTED_SERVICE_INDEX

					fi

				;;

				'CPU Schedule Priority')

					G_WHIP_MENU_ARRAY=()

					# - 7 step description scale
					local scale_value_lowest=0
					local scale_value_highest=99
					local scale_value_lower=$(( $scale_value_highest / 6 ))
					local scale_value_low=$(( $scale_value_highest / 6 * 2 ))
					local scale_value_medium=$(( $scale_value_highest / 6 * 3 ))
					local scale_value_high=$(( $scale_value_highest / 6 * 4 ))
					local scale_value_higher=$(( $scale_value_highest / 6 * 5 ))
					for ((i=0; i<$(( $scale_value_highest + 1 )); i++))
					do

						local description=''
						if (( $i == $scale_value_lowest )); then

							description='(Lowest priority)'

						elif (( $i == $scale_value_lower )); then

							description='(Lower priority)'

						elif (( $i == $scale_value_low )); then

							description='(Low priority)'

						elif (( $i == $scale_value_medium )); then

							description='(Medium priority)'

						elif (( $i == $scale_value_high )); then

							description='(High priority)'

						elif (( $i == $scale_value_higher )); then

							description='(Higher priority)'

						elif (( $i == $scale_value_highest )); then

							description='(Highest priority)'

						fi

						G_WHIP_MENU_ARRAY+=($i ": $description")

					done

					G_WHIP_DEFAULT_ITEM=${aCPU_SCHEDULE_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]}
					if G_WHIP_MENU "Please select the desired CPU Scheduling Priority level for :\n${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]}\n
- Lower values are low priority\n - Higher values are high priority"; then

						aCPU_SCHEDULE_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]=$G_WHIP_RETURNED_VALUE

						Save_Process_Tool $MENU_SELECTED_SERVICE_INDEX

					fi

				;;

			esac

		else

			MENU_TARGETID=0 # Return to main menu

		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main
	#/////////////////////////////////////////////////////////////////////////////////////
	# Info
	G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" "$INPUT_MODE"

	[[ -f $FP_INCLUDE_CUSTOM_SERVICES ]] || cat << _EOF_ > $FP_INCLUDE_CUSTOM_SERVICES
# DietPi-Services Include/Exclude configuration

# Include custom service (Use '+ servicename' without the comments to enable DietPi control of that service)
#	Once completed, for DietPi to control the service, please run the following command, without quotes (')
#	'dietpi-services dietpi_controlled'
#+ myservice1
#+ myservice2

# Exclude DietPi from controlling known services (Use '- servicename' without the comments to disable DietPi control for that service)
#	The service will be in disabled form, and, you can start and stop it manually
#- cron
#- transmission-daemon

_EOF_

	#-----------------------------------------------------------------------------------
	# Direct service control mode
	if [[ $INPUT_MODE ]]; then

		Populate_Available_Array
		Apply_Service_States $INPUT_MODE $INPUT_SERVICE

	#-----------------------------------------------------------------------------------
	# Men You!
	else

		while (( $MENU_TARGETID > -1 ))
		do

			if (( $MENU_TARGETID == 0 )); then

				Populate_Available_Array
				Menu_Main

			elif (( $MENU_TARGETID == 1 )); then

				Menu_Service

			fi

		done

	fi
	#-----------------------------------------------------------------------------------
	exit 0
	#-----------------------------------------------------------------------------------
}
