#!/bin/bash
{
	#////////////////////////////////////
	# DietPi Services Script
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	# Info:
	# - Allows service control for all listed programs available through dietpi-software
	# - By default known services are "disabled", thus not started by systemd, but
	#   started by this script at later boot stage from: /DietPi/dietpi/postboot
	#
	USAGE='
Usage: dietpi-services <command> [<service>]
Available commands:
  <empty>		Interactive menu to apply service modes and settings
  status		Print service status info
  start			Start service
  stop			Stop service
  restart		Restart service
  dietpi_controlled	Let service be started by DietPi on boot
  systemd_controlled	Let service be started by systemd on boot
  enable/unmask		Enable service to allow its startup
  disable/mask		Disable service to prevent its startup
Available services:
  <service_name>	Add any systemd or sysvinit service available on your system.
  <empty>		Apply command to all services known to DietPi
  			NB: Services required for network or shell session will be skipped.
			NB: You can include/exclude services by editing the following file:
			    - /DietPi/dietpi/.dietpi-services_include_exclude
'	#////////////////////////////////////

	# Grab Inputs
	INPUT_CMD=$1
	INPUT_SERVICE=$2
	# - pre-v6.25 compatibility
	[[ $INPUT_SERVICE == 'all' ]] && unset INPUT_SERVICE

	# - Optional env vars to prevent service handling
	[[ $G_DIETPI_SERVICES_DISABLE == 1 ]] && exit 0
	[[ $DISABLE_SERVICES_START == 1 ]] && [[ $INPUT_CMD == 'start' || $INPUT_CMD == 'restart' ]] && exit 0

	# Import DietPi-Globals --------------------------------------------------------------
	. /DietPi/dietpi/func/dietpi-globals
	G_PROGRAM_NAME='DietPi-Services'
	G_CHECK_ROOT_USER
	G_INIT
	# Import DietPi-Globals --------------------------------------------------------------


	#/////////////////////////////////////////////////////////////////////////////////////
	# Service Control
	#/////////////////////////////////////////////////////////////////////////////////////
	Load_All_Services_Array(){

		aSERVICE_NAME=(

			# Core -----------------------------------------------------------------
			# - Network
			'fail2ban'
			'avahi-daemon'
			'isc-dhcp-server'
			'haproxy'

			# - File servers
			'proftpd'
			'vsftpd'
			'nmbd' 'smbd'
			'nfs-kernel-server'
			# Core -----------------------------------------------------------------

			# Backends -------------------------------------------------------------
			# - Databases
			'redis-server'
			'mariadb'
			#'mysql' # Applied on Jessie systems during availablility check: https://github.com/MichaIng/DietPi/issues/1000#issuecomment-30776051

			# - PHP
			'php5-fpm'
			'php7.0-fpm'
			'php7.1-fpm'
			'php7.2-fpm'
			'php7.3-fpm'

			# - Webservers
			'apache2'
			'nginx'
			'lighttpd'
			'tomcat8'

			# - Media
			'alsa-init'
			'coturn'
			'mpd'
			'minidlna'
			'shairport-sync'
			'squeezelite'
			'gmrender'
			'mumble-server'
			'networkaudiod'
			'roonbridge'
			'roonserver'
			'roon-extension-manager'
			'icecast2' 'darkice'
			'voice-recognizer'

			# - Download/BitTorrent
			'transmission-daemon'
			'qbittorrent'
			'rtorrent'
			'nzbget'
			'deluged'
			# Backends -------------------------------------------------------------

			# Frontends / Misc -----------------------------------------------------
			# - Media
			'ympd'
			'mympd'
			'logitechmediaserver'
			'subsonic'
			'airsonic'
			'mopidy'
			'koel'
			'raspotify'
			'plexpy'
			'plexmediaserver'
			'emby-server'
			'spotify-connect-web'
			'ubooquity'

			# - Download/BitTorrent
			'medusa'
			'aria2'
			'sabnzbd'
			'couchpotato'
			'jackett'
			'sonarr'
			'radarr'
			'lidarr'
			'htpc-manager'
			'deluge-web'

			# - Cloud/Backups
			'bdd'
			'minio'
			'syncthing' 'syncthing-inotify'
			'urbackupsrv'
			'tonido'
			'gogs'
			'gitea'

			# - Emulation/Gaming
			'supervisor'
			'nukkit'
			'cuberite'

			# - Camera/Surveillance
			'motioneye'
			'raspimjpeg'

			# - Printing
			'cups' 'cloudprintd'
			'octoprint'

			# - Social/Search
			'yacy'
			'openbazaar'

			# - Hardware Projects
			'pi-spc'
			'pijuice'
			'mosquitto'
			'node-red'
			'blynkserver'
			'webiopi'
			'emonhub'
			'influxdb'
			'grafana-server'

			# - Home Automation
			'home-assistant'

			# - Network
			'noip2'
			'virtualhere'
			'hostapd'

			# - System stats / Management
			'netdata'
			'rpimonitor'
			'webmin'

			# - Misc
			'docker'
			'cron'
			'fahclient'
			# Frontends / Misc -----------------------------------------------------

		)

		# Additional services: https://github.com/MichaIng/DietPi/issues/1869#issuecomment-401017251
		[[ -f '/etc/rsyncd.conf' ]] && aSERVICE_NAME+=('rsync')

		# Non-controlled services: Only show in menu and/or status mode!
		if [[ ! $INPUT_CMD || $INPUT_CMD == 'status' ]]; then

			# - SSH
			aSERVICE_NAME+=('dropbear')
			aSERVICE_NAME+=('ssh') 				# OpenSSH Server

			# - Misc
			#aSERVICE_NAME+=('systemd-timesyncd') 		# Timesync. DietPi stops this by default after success, may confuse user/prompt questions.
			aSERVICE_NAME+=('dnsmasq') 			# https://github.com/MichaIng/DietPi/issues/1501
			aSERVICE_NAME+=('pihole-FTL')			# https://github.com/MichaIng/DietPi/issues/1696
			aSERVICE_NAME+=('openvpn') 			# https://github.com/MichaIng/DietPi/issues/1501
			aSERVICE_NAME+=('vncserver') 			# DietPi vnc server service/script
			aSERVICE_NAME+=('nxserver') 			# NoMachine
			aSERVICE_NAME+=('xrdp') 			# XRDP Server
			aSERVICE_NAME+=('amiberry') 			# DietPi Amiberry run service
			#aSERVICE_NAME+=('wg-quick@wg0') 		# WireGuard: Currently instantiated services are not supported 

			# - DietPi
			aSERVICE_NAME+=('dietpi-nordvpn') 		# NordVPN install + client
			if [[ $INPUT_CMD == 'status' ]]; then

				aSERVICE_NAME+=('dietpi-ramdisk')
				aSERVICE_NAME+=('dietpi-ramlog')
				aSERVICE_NAME+=('dietpi-preboot')
				aSERVICE_NAME+=('dietpi-boot')
				aSERVICE_NAME+=('dietpi-postboot')
				aSERVICE_NAME+=('dietpi-wifi-monitor') 	# https://github.com/MichaIng/DietPi/issues/1288#issuecomment-350653480
				aSERVICE_NAME+=('dietpi-arr_to_RAM')	# Sonarr/Radarr/Lidarr database to RAM link service

			fi

		fi

		Process_Includes_Excludes

	}


	# Apply custom include/exclude choices
	FP_INCLUDE_EXCLUDE='/DietPi/dietpi/.dietpi-services_include_exclude'
	Process_Includes_Excludes(){

		[[ -f $FP_INCLUDE_EXCLUDE ]] || cat << _EOF_ > $FP_INCLUDE_EXCLUDE
# DietPi-Services Include/Exclude configuration

# Include custom service (Use '+ servicename' without the comments to enable DietPi control of that service)
#	Once completed, for DietPi to control the service, please run the following command, without quotes (')
#	'dietpi-services dietpi_controlled'
#+ myservice1
#+ myservice2

# Exclude DietPi from controlling known services (Use '- servicename' without the comments to disable DietPi control for that service)
#	The service will be in disabled form, and, you can start and stop it manually
#- cron
#- transmission-daemon

_EOF_
		local scrape i

		while read line
		do

			# - Skip empty and comment lines
			[[ ! $line || $line == '#'* ]] && continue

			scrape=${line: +2}

			# - Include
			if [[ $line == '+ '* ]]; then

				local service_known_already_to_dietpi=0
				for i in "${aSERVICE_NAME[@]}"
				do

					if [[ $scrape == "$i" ]]; then

						service_known_already_to_dietpi=1
						break

					fi

				done

				if (( ! $service_known_already_to_dietpi )); then

					[[ $G_DEBUG == 1 ]] && G_DIETPI-NOTIFY 2 "Including custom service: $scrape"
					aSERVICE_NAME+=("$scrape")

				fi

			# - Exclude
			elif [[ $line == '- '* ]]; then

				for i in ${!aSERVICE_NAME[@]}
				do

					if [[ $scrape == "${aSERVICE_NAME[$i]}" ]]; then

						[[ $G_DEBUG == 1 ]] && G_DIETPI-NOTIFY 2 "Excluding service: $scrape"
						unset aSERVICE_NAME[$i]
						break

					fi

				done

			fi

		done < $FP_INCLUDE_EXCLUDE

	}

	# Load array of available/chosen services
	Load_Service_Array(){

		[[ $G_DEBUG == 1 ]] && G_DIETPI-NOTIFY 2 'Generating service list, please wait...'

		# Load all services array, skip in case of single service input
		[[ $INPUT_SERVICE ]] && aSERVICE_NAME=("$INPUT_SERVICE") || Load_All_Services_Array

		# Check service availability
		aFP_SERVICE=()
		local i j
		for i in ${!aSERVICE_NAME[@]}
		do

			[[ ${aSERVICE_NAME[$i]} ]] || { unset aSERVICE_NAME[$i]; continue; } # Failsafe

			for j in /{etc,lib}/systemd/system/"${aSERVICE_NAME[$i]}.service" /etc/init.d/"${aSERVICE_NAME[$i]}"
			do

				if [[ -f $j ]]; then

					aFP_SERVICE[$i]=$j
					break

				fi

			done

			# - Remove non-available services from array
			[[ ${aFP_SERVICE[$i]} ]] || unset aSERVICE_NAME[$i]

		done

	}

	# $1 = command
	# $2 = service
	# $3 = exit code
	Print_Status(){ G_DIETPI-NOTIFY ${3/[^0]*/1} "$1 : $2"; }

	# $1 = command (start/stop/restart)
	# $2 = index (optional)
	Set_Running_State(){

		local command=$1
		local index=$2
		local services i

		# Add and order services to be handled
		# - Single service input
		if [[ $index ]]; then

			services=$index

		# - stop: Reverse service order
		elif [[ $command == 'stop' ]]; then

			for i in ${!aSERVICE_NAME[@]}
			do

				services="$i $services"

			done

		# - start/restart: Standard service order
		else

			services=${!aSERVICE_NAME[@]}

		fi

		# Enable ownCloud and Nextcloud maintenance mode before all services being stopped or restarted
		if [[ $command == 'stop' || $command == 'restart' && ! $index ]]; then

			[[ -f '/var/www/owncloud/config/config.php' ]] && grep -q "'maintenance' => false," /var/www/owncloud/config/config.php && G_USER_INPUTS=0 G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD occ maintenance:mode --on
			[[ -f '/var/www/nextcloud/config/config.php' ]] && grep -q "'maintenance' => false," /var/www/nextcloud/config/config.php && G_USER_INPUTS=0 G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD ncc maintenance:mode --on

		fi

		# Apply command
		for i in $services
		do

			G_DIETPI-NOTIFY -2 "${aSERVICE_NAME[$i]}"
			systemctl $command "${aSERVICE_NAME[$i]}" &> /dev/null
			Print_Status $command "${aSERVICE_NAME[$i]}" $?

		done

		# Disable ownCloud and Nextcloud maintenance mode after all services being started or restarted
		if [[ $command == 'start' || $command == 'restart' && ! $index ]]; then

			[[ -f '/var/www/owncloud/config/config.php' ]] && grep -q "'maintenance' => true," /var/www/owncloud/config/config.php && G_USER_INPUTS=0 G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD occ maintenance:mode --off
			[[ -f '/var/www/nextcloud/config/config.php' ]] && grep -q "'maintenance' => true," /var/www/nextcloud/config/config.php && G_USER_INPUTS=0 G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD ncc maintenance:mode --off

		fi

	}

	# $1 = command
	# $2 = index (optional)
	Apply_Service_State(){

		local command=$1
		local index=$2
		local services i

		[[ $index ]] && services=$index || services=${!aSERVICE_NAME[@]}

		# start/stop/restart
		if [[ $command == 'start' || $command == 'stop' || $command == 'restart' ]]; then

			Set_Running_State $command $index

		# status
		elif [[ $command == 'status' ]]; then

			local status_full space status
			for i in $services
			do

				status_full=$(systemctl -l --no-pager status "${aSERVICE_NAME[$i]}")
				# - Align status output
				space='\t'
				(( ${#aSERVICE_NAME[$i]} < 13 )) && space+='\t'; (( ${#aSERVICE_NAME[$i]} < 5 )) && space+='\t'
				status="${aSERVICE_NAME[$i]}${space}$(mawk '/Active/ {print substr($0,12);exit}' <<< "$status_full")"
				if [[ $status =~ 'failed' ]]; then

					G_DIETPI-NOTIFY 1 "$status_full"

				elif [[ $status =~ 'inactive' ]]; then

					G_DIETPI-NOTIFY 2 "$status"

				else

					G_DIETPI-NOTIFY 0 "$status"

				fi

			done

		# dietpi_controlled/systemd_controlled/mask/unmask/enable/disable
		else

			local systemctl_cmd
			if [[ $command == 'dietpi_controlled' ]]; then

				systemctl_cmd='disable'

			elif [[ $command == 'systemd_controlled' ]]; then

				systemctl_cmd='enable'

			elif [[ $command == 'enable' || $command == 'unmask' ]]; then

				systemctl_cmd='unmask'

			elif [[ $command == 'disable' || $command == 'mask' ]]; then

				systemctl_cmd='mask'
				# - Stop services before masking them
				Set_Running_State stop $index

			else

				G_DIETPI-NOTIFY 1 "Invalid input command ($command). Aborting...\n$USAGE"
				exit 1

			fi

			# Apply command
			for i in $services
			do

				systemctl $systemctl_cmd "${aSERVICE_NAME[$i]}" &> /dev/null
				Print_Status $command "${aSERVICE_NAME[$i]}" $?

			done

		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Process Tool
	#/////////////////////////////////////////////////////////////////////////////////////
	# $1=index
	FP_PROCESS_TOOL_CONF='dietpi-process_tool.conf'
	Save_Process_Tool(){

		local index=$1

		# Backwards cap for init.d, create systemd wrapper
		if [[ ${aFP_SERVICE[$index]} == '/etc/init.d/'* ]]; then

			aFP_SERVICE[$index]="/etc/systemd/system/${aSERVICE_NAME[$index]}.service"
			cat << _EOF_ > "${aFP_SERVICE[$index]}"
[Unit]
Description=${aSERVICE_NAME[$index]} sysvinit wrapper (DietPi)

[Service]
Type=forking
ExecStart=/etc/init.d/${aSERVICE_NAME[$index]} start
ExecStop=/etc/init.d/${aSERVICE_NAME[$index]} stop

[Install]
WantedBy=multi-user.target
_EOF_
			G_WHIP_MSG "[ INFO ] DietPi has created a systemd service wrapper for /etc/init.d/${aSERVICE_NAME[$index]}. This is required to allow support for applying process tool options.\n
If you experience any issues with the wrapper, simply remove the file:\n - rm /etc/systemd/system/${aSERVICE_NAME[$index]}.service\n - Then restart the service."

		fi

		# Always create drop-in configs in: /etc/systemd/system/
		mkdir -p "/etc/systemd/system/${aSERVICE_NAME[$index]}.service.d"
		cat << _EOF_ > "/etc/systemd/system/${aSERVICE_NAME[$index]}.service.d/$FP_PROCESS_TOOL_CONF"
# WARNING: Do not manually edit this file, use "dietpi-services" to adjust values!
[Service]
Nice=${aCPU_NICE[$index]}
CPUAffinity=${aCPU_AFFINITY[$index]}
CPUSchedulingPolicy=${aCPU_SCHEDULE_POLICY[$index]}
CPUSchedulingPriority=${aCPU_SCHEDULE_PRIORITY[$index]}
IOSchedulingClass=${aIO_SCHEDULE_POLICY[$index]}
IOSchedulingPriority=${aIO_PRIORITY[$index]}
_EOF_
		G_RUN_CMD systemctl daemon-reload
		aSERVICE_RESTART_REQUIRED[$index]=1

	}

	# $1=index
	Load_Process_Tool(){

		local index=$1

		# Defaults
		aCPU_NICE[$index]=0
		aCPU_AFFINITY[$index]="0-$(( $G_HW_CPU_CORES - 1 ))"
		aCPU_SCHEDULE_POLICY[$index]='other'
		aCPU_SCHEDULE_PRIORITY[$index]=0
		aIO_SCHEDULE_POLICY[$index]='best-effort'
		aIO_PRIORITY[$index]='4' # best-effort default == (cpu_nice + 20) / 5: https://manpages.debian.org/stretch/util-linux/ionice.1.en.html

		local fp="/etc/systemd/system/${aSERVICE_NAME[$index]}.service.d/$FP_PROCESS_TOOL_CONF"
		[[ -f $fp ]] || return

		# Source values from config file
		# - [Service] line throws an effectless error that we can simply hide.
		# - All values are single word strings, so bash assigns them correctly.
		local Nice CPUAffinity CPUSchedulingPolicy CPUSchedulingPriority IOSchedulingClass IOSchedulingPriority
		. $fp &> /dev/null

		[[ $Nice ]] && aCPU_NICE[$index]=$Nice
		[[ $CPUAffinity ]] && aCPU_AFFINITY[$index]=$CPUAffinity
		[[ $CPUSchedulingPolicy ]] && aCPU_SCHEDULE_POLICY[$index]=$CPUSchedulingPolicy
		[[ $CPUSchedulingPriority ]] && aCPU_SCHEDULE_PRIORITY[$index]=$CPUSchedulingPriority
		[[ $IOSchedulingClass ]] && aIO_SCHEDULE_POLICY[$index]=$IOSchedulingClass
		[[ $IOSchedulingPriority ]] && aIO_PRIORITY[$index]=$IOSchedulingPriority

	}

	# $1=index
	Reset_Process_Tool(){

		local index=$1

		local fp="/etc/systemd/system/${aSERVICE_NAME[$index]}.service.d/$FP_PROCESS_TOOL_CONF"
		[[ -f $fp ]] || return

		G_RUN_CMD rm "$fp"
		G_RUN_CMD rmdir --ignore-fail-on-non-empty "/etc/systemd/system/${aSERVICE_NAME[$index]}.service.d"
		G_RUN_CMD systemctl unmask "${aSERVICE_NAME[$index]}"
		G_RUN_CMD systemctl daemon-reload
		Load_Process_Tool $index
		aSERVICE_RESTART_REQUIRED[$index]=1

	}

	Load_Process_Tool_Arrays(){

		aSERVICE_MODE=() 		# Enabled/disabled/masked/unmasked
		aSERVICE_RESTART_REQUIRED=() 	# eg, made changes, prompt to restart this service.

		aCPU_NICE=()
		aCPU_AFFINITY=()
		aCPU_SCHEDULE_POLICY=()
		aCPU_SCHEDULE_PRIORITY=()
		aIO_SCHEDULE_POLICY=()
		aIO_PRIORITY=()

		# https://manpages.debian.org/stretch/manpages/sched.7.en.html
		aCPU_SCHEDULE_POLICY_TYPE=('other' 'fifo' 'rr' 'batch' 'idle')
		aCPU_SCHEDULE_POLICY_DESC=('Normal (Default)' 'First In, First Out (Real-time, time-critical)' 'Round Robin (Real-time, time-critical)' 'Batch style execution' 'Background Jobs (Very low priority)')

		# https://manpages.debian.org/stretch/util-linux/ionice.1.en.html
		aIO_SCHEDULE_POLICY_TYPE=('best-effort' 'realtime' 'idle')
		aIO_SCHEDULE_POLICY_DESC=('Normal (Default)' 'Time-critical (Highest priority)' 'Background Jobs (Very low priority)')

		for i in ${!aSERVICE_NAME[@]}
		do

			aSERVICE_MODE[$i]=$(systemctl is-enabled "${aSERVICE_NAME[$i]}" 2> /dev/null)
			Load_Process_Tool $i	

		done

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Menu System
	#/////////////////////////////////////////////////////////////////////////////////////
	MENU_TARGETID=0
	MENU_SELECTED_SERVICE_INDEX=-1
	MENU_LAST_SELECTED_MAIN='' # Main menu
	MENU_LAST_SELECTED_SUB_0='' # Sub menus, level 0

	Menu_Exit(){

		G_WHIP_SIZE_X_MAX=50
		if G_WHIP_YESNO "Exit $G_PROGRAM_NAME?"; then

			# Prompt to restart changed services
			local service_restart_list_menu service_restart_list_systemd i
			for i in ${!aSERVICE_RESTART_REQUIRED[@]}
			do

				service_restart_list_menu+="\n - ${aSERVICE_NAME[$i]}: Nice=${aCPU_NICE[$i]} | Affinity=${aCPU_AFFINITY[$i]} | CPU Scheduling Policy=${aCPU_SCHEDULE_POLICY[$i]} | CPU Scheduling Priority=${aCPU_SCHEDULE_PRIORITY[$i]} | IO Scheduling Policy=${aIO_SCHEDULE_POLICY[$i]} | IO Scheduling Priority=${aIO_PRIORITY[$i]}"
				service_restart_list_systemd+="${aSERVICE_NAME[$i]} "

			done

			if [[ $service_restart_list_systemd ]]; then

				if G_WHIP_YESNO "[INFO] The following services require a restart, in order to apply your recently modified settings: $service_restart_list_menu\n\nDo you wish to continue, and, restart the above services now?"; then

					G_RUN_CMD systemctl restart $service_restart_list_systemd

				fi

			fi

			MENU_TARGETID=-1 # Exit

		else

			MENU_TARGETID=0 # Return to main menu

		fi

	}

	# MENU_TARGETID=0
	Menu_Main(){

		G_WHIP_MENU_ARRAY=('' '●─ Single Service Options ')
		for i in ${!aSERVICE_NAME[@]}
		do

			G_WHIP_MENU_ARRAY+=("${aSERVICE_NAME[$i]}" ": $(systemctl is-active "${aSERVICE_NAME[$i]}") | Nice ${aCPU_NICE[$i]} | Affinity ${aCPU_AFFINITY[$i]}")

		done

		G_WHIP_MENU_ARRAY+=('' '●─ Global Service Options ')
		G_WHIP_MENU_ARRAY+=('Stop' ': Stop ALL services')
		G_WHIP_MENU_ARRAY+=('Restart' ': Start/restart ALL services')

		G_WHIP_DEFAULT_ITEM=$MENU_LAST_SELECTED_MAIN
		G_WHIP_BUTTON_CANCEL_TEXT='Exit'
		if G_WHIP_MENU 'Please select an option or program:'; then

			MENU_LAST_SELECTED_MAIN=$G_WHIP_RETURNED_VALUE

			if [[ $G_WHIP_RETURNED_VALUE == 'Restart' || $G_WHIP_RETURNED_VALUE == 'Stop' ]]; then

				Set_Running_State ${G_WHIP_RETURNED_VALUE,,}
				aSERVICE_RESTART_REQUIRED=()
				sleep 0.5

			elif [[ $G_WHIP_RETURNED_VALUE ]]; then

				# Find selected program index
				MENU_SELECTED_SERVICE_INDEX=-1
				for i in ${!aSERVICE_NAME[@]}
				do

					if [[ ${aSERVICE_NAME[$i]} == "$G_WHIP_RETURNED_VALUE" ]]; then

						MENU_SELECTED_SERVICE_INDEX=$i
						break

					fi

				done
				(( $MENU_SELECTED_SERVICE_INDEX >= 0 )) && MENU_TARGETID=1

			fi

		else

			Menu_Exit

		fi

	}

	# MENU_TARGETID=1
	Menu_Service(){

		local service_state=$(systemctl is-active "${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]}" 2> /dev/null)
		local service_mode_print=${aSERVICE_MODE[$MENU_SELECTED_SERVICE_INDEX]}
		if [[ $service_mode_print == 'disabled' ]]; then

			service_mode_print='DietPi controlled'

		elif [[ $service_mode_print == 'enabled' ]]; then

			service_mode_print='Systemd controlled'

		fi

		G_WHIP_DEFAULT_ITEM=$MENU_LAST_SELECTED_SUB_0
		G_WHIP_BUTTON_CANCEL_TEXT='Back'
		G_WHIP_MENU_ARRAY=(

			'' '●─ Service Control '
			'State' ": [$service_state]"
			'Status' ': Display systemd status log'
			'Edit' ": [${aFP_SERVICE[$MENU_SELECTED_SERVICE_INDEX]}]"
			'Mode' ": [$service_mode_print]"
			'' '●─ Process Tool '
			'CPU Nice' ": [${aCPU_NICE[$MENU_SELECTED_SERVICE_INDEX]}]"
			'CPU Affinity' ": [${aCPU_AFFINITY[$MENU_SELECTED_SERVICE_INDEX]}]"
			'CPU Schedule Policy' ": [${aCPU_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]}]"
			'CPU Schedule Priority' ": [${aCPU_SCHEDULE_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]}]"
			'IO Scheduling Policy' ": [${aIO_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]}]"

		)
		[[ ${aIO_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]} != 'idle' ]] && G_WHIP_MENU_ARRAY+=('IO Scheduling Priority' ": [${aIO_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]}]")
		G_WHIP_MENU_ARRAY+=(

			'' '●─ Presets '
			'Reset' ': Resets all service and CPU/IO options to default'
			'Lowest Priority' ': Lowest priority background CPU/IO preset'
			'Low Priority' ': Low priority CPU/IO preset'
			'High Priority' ': High priority CPU/IO preset'
			'Highest Priority' ': Highest priority for critical CPU/IO preset'

		)

		if G_WHIP_MENU "Please select an option for ${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]}:"; then

			MENU_LAST_SELECTED_SUB_0=$G_WHIP_RETURNED_VALUE

			case "$G_WHIP_RETURNED_VALUE" in

				'Status')

					systemctl -l --no-pager status "${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]}" &> systemctl.log

					log=0 G_WHIP_VIEWFILE systemctl.log
					rm systemctl.log

				;;

				'Low Priority')

					aCPU_NICE[$MENU_SELECTED_SERVICE_INDEX]=10
					#aCPU_AFFINITY[$MENU_SELECTED_SERVICE_INDEX]=
					aCPU_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]='other'
					aCPU_SCHEDULE_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]=0
					aIO_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]='best-effort'
					aIO_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]=7
					Save_Process_Tool $MENU_SELECTED_SERVICE_INDEX

				;;

				'Lowest Priority')

					aCPU_NICE[$MENU_SELECTED_SERVICE_INDEX]=19
					#aCPU_AFFINITY[$MENU_SELECTED_SERVICE_INDEX]=
					aCPU_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]='idle'
					aCPU_SCHEDULE_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]=0
					aIO_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]='idle'
					aIO_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]=3 # Has no effect in idle
					Save_Process_Tool $MENU_SELECTED_SERVICE_INDEX

				;;

				'High Priority')

					aCPU_NICE[$MENU_SELECTED_SERVICE_INDEX]=-10
					#aCPU_AFFINITY[$MENU_SELECTED_SERVICE_INDEX]=
					aCPU_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]='other'
					aCPU_SCHEDULE_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]=10
					aIO_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]='best-effort'
					aIO_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]=0
					Save_Process_Tool $MENU_SELECTED_SERVICE_INDEX

				;;

				'Highest Priority')

					aCPU_NICE[$MENU_SELECTED_SERVICE_INDEX]=-20
					#aCPU_AFFINITY[$MENU_SELECTED_SERVICE_INDEX]=
					aCPU_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]='fifo'
					aCPU_SCHEDULE_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]=50
					aIO_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]='realtime'
					aIO_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]=0
					Save_Process_Tool $MENU_SELECTED_SERVICE_INDEX

				;;

				'Reset')

					Reset_Process_Tool $MENU_SELECTED_SERVICE_INDEX

				;;

				'Mode')

					G_WHIP_MENU_ARRAY=(

						'DietPi controlled' ': Recommended (DietPi controls service order)'
						'Systemd controlled' ': Systemd controls service order'
						'mask'	': Hide service from system and prevent use'
						'unmask' ': Un-hide service from system and allow use'

					)
					G_WHIP_DEFAULT_ITEM='DietPi controlled'
					if G_WHIP_MENU "Please select the desired Service Mode for :\n${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]}"; then

						local cmd_out=$G_WHIP_RETURNED_VALUE
						local unmask_required=0
						if [[ $cmd_out == 'DietPi controlled' ]]; then

							cmd_out='disable'
							unmask_required=1

						elif [[ $cmd_out == 'Systemd controlled' ]]; then

							cmd_out='enable'
							unmask_required=1

						fi

						(( $unmask_required )) && systemctl unmask ${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]} &> /dev/null
						G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD systemctl $cmd_out ${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]}
						aSERVICE_MODE[$MENU_SELECTED_SERVICE_INDEX]=$(systemctl is-enabled "${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]}" 2> /dev/null)

					fi

				;;

				'IO Scheduling Policy')

					G_WHIP_MENU_ARRAY=()
					for i in ${!aIO_SCHEDULE_POLICY_TYPE[@]}
					do

						G_WHIP_MENU_ARRAY+=("${aIO_SCHEDULE_POLICY_TYPE[$i]}" ": ${aIO_SCHEDULE_POLICY_DESC[$i]}" )

					done

					G_WHIP_DEFAULT_ITEM=${aIO_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]}
					if G_WHIP_MENU "Please select the desired IO Scheduling Class for:\n${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]}"; then

						aIO_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]=$G_WHIP_RETURNED_VALUE
						Save_Process_Tool $MENU_SELECTED_SERVICE_INDEX

					fi

				;;

				'IO Scheduling Priority')

					local desc
					G_WHIP_MENU_ARRAY=()

					for i in {7..0}
					do
						desc=''
						if (( $i == 0 )); then

							desc='(Highest priority)'

						elif (( $i == 7 )); then

							desc='(Lowest priority)'

						fi

						G_WHIP_MENU_ARRAY+=("IO Priority : $i" " $desc")

					done

					G_WHIP_DEFAULT_ITEM=${aIO_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]}
					if G_WHIP_MENU "Please select the desired IO Scheduling Priority level for:\n${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]}."; then

						# Convert back to int
						aIO_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]=${G_WHIP_RETURNED_VALUE##*: }
						Save_Process_Tool $MENU_SELECTED_SERVICE_INDEX

					fi

				;;

				'Edit')

					nano ${aFP_SERVICE[$MENU_SELECTED_SERVICE_INDEX]}
					G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD systemctl daemon-reload

				;;

				'State')

					local command='restart'
					[[ ${service_state,,} == 'active' ]] && command='stop'

					Set_Running_State $command $MENU_SELECTED_SERVICE_INDEX
					unset aSERVICE_RESTART_REQUIRED[$MENU_SELECTED_SERVICE_INDEX]
					sleep 0.5

				;;

				'CPU Nice')

					# Get existing nice level
					# - Note: Whiptail will not work with negative numbers. The string cannot start with "-" as it throws subscript error.
					local nice_current="Nice : ${aCPU_NICE[$MENU_SELECTED_SERVICE_INDEX]}"
					local desc
					G_WHIP_MENU_ARRAY=()

					for i in {-20..19}
					do
						desc=''
						if (( $i == -20 )); then

							desc='(Highest priority)'

						elif (( $i == -10 )); then

							desc='(Higher priority)'

						elif (( $i == -5 )); then

							desc='(High priority)'

						elif (( $i == 0 )); then

							desc='(Default priority)'

						elif (( $i == 5 )); then

							desc='(Low priority)'

						elif (( $i == 10 )); then

							desc='(Lower priority)'

						elif (( $i == 19 )); then

							desc='(Lowest priority)'

						fi

						G_WHIP_MENU_ARRAY+=("Nice : $i" " $desc")

					done

					G_WHIP_DEFAULT_ITEM=$nice_current
					if G_WHIP_MENU "Please select the desired Nice level for:\n${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]}\n
Info:\n - Negative values have a higher priority (eg: -10).\n - Positive values have a lower priority (eg: 15).\n - The default value is 0."; then

						# Convert back to int
						aCPU_NICE[$MENU_SELECTED_SERVICE_INDEX]=${G_WHIP_RETURNED_VALUE##*: }
						Save_Process_Tool $MENU_SELECTED_SERVICE_INDEX

					fi

				;;

				'CPU Affinity')

					# Get existing affinity
					# NB: currently enables all
					G_WHIP_CHECKLIST_ARRAY=()

					for ((i=0; i<$G_HW_CPU_CORES; i++))
					do

						G_WHIP_CHECKLIST_ARRAY+=($i 'CPU                           ' 'on')

					done

					if G_WHIP_CHECKLIST "Please select the desired CPU Affinity for:\n${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]}\n
 - Use the spacebar to enable/disable access to specific cores, for this program.\n - The default value is to enable all items."; then

						local new_affinity=''
						local loop_count=0
						for i in ${G_WHIP_RETURNED_VALUE[@]}
						do

							# taskset requires , (comma) seperated cpu index indexs after 1st entry.
							if (( $loop_count == 0 )); then

								new_affinity+=$i

							# Add comma for future entries
							else

								new_affinity+=",$i"

							fi

							((loop_count++))

						done

						# Update affinity array with new value, if at least 1 item was selected.
						[[ $new_affinity ]] && aCPU_AFFINITY[$MENU_SELECTED_SERVICE_INDEX]=$new_affinity
						Save_Process_Tool $MENU_SELECTED_SERVICE_INDEX

					fi

				;;

				'CPU Schedule Policy')

					G_WHIP_MENU_ARRAY=()
					for i in ${!aCPU_SCHEDULE_POLICY_TYPE[@]}
					do

						G_WHIP_MENU_ARRAY+=("${aCPU_SCHEDULE_POLICY_TYPE[$i]}" ": ${aCPU_SCHEDULE_POLICY_DESC[$i]}" )

					done

					G_WHIP_DEFAULT_ITEM=${aCPU_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]}
					if G_WHIP_MENU "Please select the desired CPU Scheduling Policy for:\n${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]}"; then

						aCPU_SCHEDULE_POLICY[$MENU_SELECTED_SERVICE_INDEX]=$G_WHIP_RETURNED_VALUE
						Save_Process_Tool $MENU_SELECTED_SERVICE_INDEX

					fi

				;;

				'CPU Schedule Priority')

					G_WHIP_MENU_ARRAY=()

					# - 7 step description scale
					local scale_value_lowest=0
					local scale_value_highest=99
					local scale_value_lower=$(( $scale_value_highest / 6 ))
					local scale_value_low=$(( $scale_value_highest / 6 * 2 ))
					local scale_value_medium=$(( $scale_value_highest / 6 * 3 ))
					local scale_value_high=$(( $scale_value_highest / 6 * 4 ))
					local scale_value_higher=$(( $scale_value_highest / 6 * 5 ))
					local desc
					for ((i=0; i<=$scale_value_highest; i++))
					do

						desc=''
						if (( $i == $scale_value_lowest )); then

							desc='(Lowest priority)'

						elif (( $i == $scale_value_lower )); then

							desc='(Lower priority)'

						elif (( $i == $scale_value_low )); then

							desc='(Low priority)'

						elif (( $i == $scale_value_medium )); then

							desc='(Medium priority)'

						elif (( $i == $scale_value_high )); then

							desc='(High priority)'

						elif (( $i == $scale_value_higher )); then

							desc='(Higher priority)'

						elif (( $i == $scale_value_highest )); then

							desc='(Highest priority)'

						fi

						G_WHIP_MENU_ARRAY+=($i ": $desc")

					done

					G_WHIP_DEFAULT_ITEM=${aCPU_SCHEDULE_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]}
					if G_WHIP_MENU "Please select the desired CPU Scheduling Priority level for:\n${aSERVICE_NAME[$MENU_SELECTED_SERVICE_INDEX]}\n
 - Lower values are low priority\n - Higher values are high priority"; then

						aCPU_SCHEDULE_PRIORITY[$MENU_SELECTED_SERVICE_INDEX]=$G_WHIP_RETURNED_VALUE
						Save_Process_Tool $MENU_SELECTED_SERVICE_INDEX

					fi

				;;

			esac

		else

			MENU_TARGETID=0 # Return to main menu

		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main
	#/////////////////////////////////////////////////////////////////////////////////////
	# Load array of available/chosen services
	Load_Service_Array
	#-----------------------------------------------------------------------------------
	# Direct service control
	if [[ $INPUT_CMD ]]; then

		# - Exit if input service could not be found
		[[ $INPUT_SERVICE && ! ${aSERVICE_NAME[@]} ]] && { G_DIETPI-NOTIFY 1 "Service ($INPUT_SERVICE) could not be found."; exit 1; }

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" "$INPUT_CMD $INPUT_SERVICE"
		Apply_Service_State $INPUT_CMD $INPUT_SERVICE

	#-----------------------------------------------------------------------------------
	# Men You!
	else

		Load_Process_Tool_Arrays

		while (( $MENU_TARGETID > -1 ))
		do

			if (( $MENU_TARGETID == 0 )); then

				Menu_Main

			elif (( $MENU_TARGETID == 1 )); then

				Menu_Service

			fi

		done

	fi
	#-----------------------------------------------------------------------------------
	exit 0
	#-----------------------------------------------------------------------------------
}
