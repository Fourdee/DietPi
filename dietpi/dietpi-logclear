#!/bin/bash
{
	#////////////////////////////////////
	# DietPi-logclear Script
	#
	#////////////////////////////////////
	# Created by Dan Knight / daniel_haze@hotmail.com / fuzon.co.uk
	#
	#////////////////////////////////////
	# Info:
	# Clears logs in $FILEPATH_LOGFOLDER, with backup option.
	#
	# usage:
	# - dietpi-logclear 0		| Update current log files data to "$FILEPATH_BACKUPFOLDER/*. Then clear contents.
	# - dietpi-logclear 1		| Clear contents of all logs in $FILEPATH_LOGFOLDER.
	# - dietpi-logclear 2		| Delete all logs in $FILEPATH_LOGFOLDER and backups.
	#////////////////////////////////////

	INPUT=-1
	if [[ $1 =~ ^-?[0-9]+$ ]]; then
		INPUT=$1
	fi
	
	#////////////////////////////////////////////////////////////////
	# Global
	#////////////////////////////////////////////////////////////////
	TEMP_FILE="/tmp/dietpi-logclear"

	FILEPATH_LOGFOLDER="/var/log"
	FILEPATH_BACKUPFOLDER="$HOME/logfile_storage"
	
	FILE_NAME=""
	#0=text log, 1=compressed
	FILE_TYPE=0
	FILESIZE_BYTES=0
	PROCESS_FILE=0

	#////////////////////////////////////////////////////////////////
	# Info Printouts
	#////////////////////////////////////////////////////////////////
	INFO_SIZE_CLEARED=0
	INFO_FILES_PROCESSED=0
	INFO_LOGS_DELETED=0
	INFO_LOGS_CLEARED=0
	INFO_LOGS_NOTSUPPORTED=0
	INFO_BACKUPS_MADE=0

	#////////////////////////////////////////////////////////////////
	# Process log files.
	#////////////////////////////////////////////////////////////////
	
	Process_Logfiles(){

		#Find existing logs and read their filepath into an array
		find "$FILEPATH_LOGFOLDER" -type f > "$TEMP_FILE"
		readarray -t ARRAY_LOG_FILEPATH < "$TEMP_FILE"
		
		#Process Logfiles
		for ((i=0; i<${#ARRAY_LOG_FILEPATH[@]}; i++))
		do
			#File details
			FILE_NAME=$(echo -e ${ARRAY_LOG_FILEPATH[$i]} | sed 's/\/var\/log\///g')
			FILESIZE_BYTES=$(stat -c%s "${ARRAY_LOG_FILEPATH[$i]}")
			PROCESS_FILE=1
			FILE_TYPE=0
			
			#Special Filetypes
			#PiHole log (contains dns stats) | FILE_TYPE 2
			if [ "${ARRAY_LOG_FILEPATH[$i]}" = "/var/log/pihole.log" ]; then

				FILE_TYPE=2

			#Compessed files (zip etc) | FILE_TYPE 1
			elif [[ ${FILE_NAME: -4} == ".zip" ]] || 
				[[ ${FILE_NAME: -3} == ".gz" ]]; then

				FILE_TYPE=1

			#Normal Log Files. Do we have any data to clear? Check size of file.
			elif (( $FILESIZE_BYTES <= 10 )); then

				PROCESS_FILE=0

			fi
			
			#Process File
			if (( $PROCESS_FILE == 1 )); then

				#PiHole
				if (( $FILE_TYPE == 2 )); then
				
					#Remove all entries from yesterday
					local yesterday_month=$(date -d "yesterday" | awk {'print $2'})
					local yesterday_day=$(date -d "yesterday" | awk {'print $3'})
					sed -i "/$yesterday_month  $yesterday_day/d" /var/log/pihole.log

					#recheck size again
					FILESIZE_BYTES=$(stat -c%s "${ARRAY_LOG_FILEPATH[$i]}")

					#Clear all entries if over 2MB
					if (( $FILESIZE_BYTES >= 2097152 )); then

						#Clear file contents
						echo -e "" > "${ARRAY_LOG_FILEPATH[$i]}"
						((INFO_LOGS_CLEARED++))

					#Prevent size effecting results
					else
						FILESIZE_BYTES=0
					fi

				#Delete all compressed filetypes.
				elif (( $FILE_TYPE == 1 )); then

					rm "${ARRAY_LOG_FILEPATH[$i]}"
					((INFO_LOGS_DELETED++))
					((INFO_LOGS_NOTSUPPORTED++))

				#Update current log files data to $FILEPATH_BACKUPFOLDER/*. Then clear.
				elif (( $INPUT == 0 )); then

					#Generate filepaths
					if [ ! -f "$FILEPATH_BACKUPFOLDER/$FILE_NAME" ]; then
						#This is a little "hack" to automatically generate the required subdirectories.
						# EG: /this/is/my/logfile.txt | will create the folders /this/is/my
						mkdir -p "$FILEPATH_BACKUPFOLDER/$FILE_NAME"
						rm -R "$FILEPATH_BACKUPFOLDER/$FILE_NAME"
					fi

					#Write current logfile contents to existing.
					cat "${ARRAY_LOG_FILEPATH[$i]}" >> "$FILEPATH_BACKUPFOLDER"/"$FILE_NAME"
					((INFO_BACKUPS_MADE++))
					
					#Clear logfile contents
					echo -e "" > "${ARRAY_LOG_FILEPATH[$i]}"
					((INFO_LOGS_CLEARED++))

				#Clear logfile contents
				elif (( $INPUT == 1 )); then

					echo -e "" > "${ARRAY_LOG_FILEPATH[$i]}"
					((INFO_LOGS_CLEARED++))

				#Hard delete log files
				elif (( $INPUT == 2 )); then

					rm "${ARRAY_LOG_FILEPATH[$i]}"
					((INFO_LOGS_DELETED++))

				fi

				#Update Size cleared.
				INFO_SIZE_CLEARED=$(($INFO_SIZE_CLEARED + $FILESIZE_BYTES))

			fi

			((INFO_FILES_PROCESSED++))

		done
		
		#Remove temp files
		rm "$TEMP_FILE" &> /dev/null

		#delete[] array
		unset ARRAY_LOG_FILEPATH
	
	}
	
	#////////////////////////////////////////////////////////////////
	# Main Loop
	#////////////////////////////////////////////////////////////////
	
	#----------------------------------------------------------------
	/DietPi/dietpi/dietpi-banner 0
	#----------------------------------------------------------------
	#How to use print.
	if (( $INPUT == -1 )); then
		echo -e ""
		echo -e "\e[90m Available commands:\e[0m"
		echo -e ""
		echo -e "\e[1m dietpi-logclear 0\e[0m"
		echo -e "\e[38;5;244m Backup contents of all log files from $FILEPATH_LOGFOLDER to $FILEPATH_BACKUPFOLDER/*.\n Also clears the contents of all logs files in $FILEPATH_LOGFOLDER.\e[0m"
		echo -e ""
		echo -e "\e[1m dietpi-logclear 1\e[0m"
		echo -e "\e[38;5;244m Clear contents of all logs files in $FILEPATH_LOGFOLDER.\e[0m"
		echo -e ""
		echo -e "\e[1m dietpi-logclear 2\e[0m"
		echo -e "\e[38;5;244m Physically delete all files in $FILEPATH_LOGFOLDER and backups in $FILEPATH_BACKUPFOLDER/*.\n May prevent log files from being updated, restart services or reboot. \e[0m"
		echo -e ""

	#----------------------------------------------------------------
	#Process log files
	elif (( $INPUT >= 0 )); then

		Process_Logfiles
		
		#Reset permissions for log files/dir
		chmod -R 775 /var/log

		#Delete logfile backups
		if (( $INPUT == 2 )); then
			rm -R "$FILEPATH_BACKUPFOLDER" &> /dev/null
		fi

		#Print Info
		echo -e " \e[38;5;244mInfo:\e[0m"
		echo -e " - Log file directory      \e[90m|\e[0m $FILEPATH_LOGFOLDER"
		echo -e " - Processed files         \e[90m|\e[0m $INFO_FILES_PROCESSED"
		#Cleared
		echo -e " - Cleared log files       \e[90m|\e[0m $INFO_LOGS_CLEARED"
		#Deleted
		echo -e " - Unsupported files       \e[90m|\e[0m $INFO_LOGS_NOTSUPPORTED"
		echo -e " - Deleted files           \e[90m|\e[0m $INFO_LOGS_DELETED"
		#convert size to kb
		#/= (i miss it)
		INFO_SIZE_CLEARED=$(($INFO_SIZE_CLEARED / 1024))
		echo -e " - Space cleared           \e[90m|\e[0m $INFO_SIZE_CLEARED KB"
		#Backups
		if (( $INPUT == 0 )); then
			echo -e ""
			echo -e " \e[38;5;244mBackup Info:\e[0m"
			echo -e " - Backup directory        \e[90m|\e[0m $FILEPATH_BACKUPFOLDER"
			echo -e " - Updated log files       \e[90m|\e[0m $INFO_BACKUPS_MADE"
		fi
		echo -e ""
	fi

	#-----------------------------------------------------------------------------------
	exit
	#-----------------------------------------------------------------------------------
}