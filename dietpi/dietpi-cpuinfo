#!/bin/bash
{
	#////////////////////////////////////
	# DietPi CPU Info Script
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	#////////////////////////////////////
	#
	# Info:
	# - Prints CPU information

	# Usage:
	# - /DietPi/dietpi/dietpi-cpuinfo 		Obtain stats and print
	# - /DietPi/dietpi/dietpi-cpuinfo 1 	Returns current CPU temp
	#////////////////////////////////////

	#Force en_GB Locale for whole script. Prevents incorrect parsing with non-english locales.
	LANG=en_GB.UTF-8

	#Exit path for VM
	HW_MODEL=$(sed -n 1p /DietPi/dietpi/.hw_model)
	if (( $HW_MODEL == 20 )); then

		echo -e "\nNotice: CPU information is not available for VM.\n"
		exit

	fi

	#Grab Input
	INPUT=0
	if [[ $1 =~ ^-?[0-9]+$ ]]; then

		INPUT=$1

	fi

	#Funcs
	aCPU_CURRENT_FREQ=0
	Obtain_Cpu_Freq(){

		aCPU_CURRENT_FREQ=()
		for ((i=0; i<$(nproc --all); i++))
		do

			aCPU_CURRENT_FREQ+=($(cat /sys/devices/system/cpu/cpu$i/cpufreq/scaling_cur_freq))

		done

	}

	CPU_TEMP_CURRENT='Unknown'
	CPU_TEMP_PRINT='Unknown'

	#Array to store possible locations for temp read.
	aFP_TEMPERATURE=(

		'/sys/class/thermal/thermal_zone0/temp'
		'/sys/devices/platform/sunxi-i2c.0/i2c-0/0-0034/temp1_input'

	)

	Obtain_Cpu_Temp(){

		for ((i=0; i<${#aFP_TEMPERATURE[@]}; i++))
		do

			if [ -f "${aFP_TEMPERATURE[$i]}" ]; then

				CPU_TEMP_CURRENT=$(cat "${aFP_TEMPERATURE[$i]}")

				# - Some devices (pine) provide 2 digit output, some provide a 5 digit ouput.
				# 	So, If the value is over 1000, we can assume it needs converting to 1'c
				if (( $CPU_TEMP_CURRENT >= 1000 )); then

					CPU_TEMP_CURRENT=$( echo -e "$CPU_TEMP_CURRENT" | awk '{print $1/1000}' | xargs printf "%0.0f" )

				fi

				if (( $CPU_TEMP_CURRENT >= 70 )); then

					CPU_TEMP_PRINT="\e[91mWarning: $CPU_TEMP_CURRENT'c | Reducing the life of your device.\e[0m"

				elif (( $CPU_TEMP_CURRENT >= 60 )); then

					CPU_TEMP_PRINT="\e[38;5;202m$CPU_TEMP_CURRENT'c \e[90m| Running hot, not recommended.\e[0m"

				elif (( $CPU_TEMP_CURRENT >= 50 )); then

					CPU_TEMP_PRINT="\e[93m$CPU_TEMP_CURRENT'c\e[0m \e[90m| Running warm, but safe.\e[0m"

				elif (( $CPU_TEMP_CURRENT >= 40 )); then

					CPU_TEMP_PRINT="\e[92m$CPU_TEMP_CURRENT'c\e[0m \e[90m| Optimal temperature.\e[0m"

				elif (( $CPU_TEMP_CURRENT >= 30 )); then

					CPU_TEMP_PRINT="\e[96m$CPU_TEMP_CURRENT'c\e[0m \e[90m| Cool runnings.\e[0m"

				else

					CPU_TEMP_PRINT="\e[96m$CPU_TEMP_CURRENT'c\e[0m \e[90m| Who put me in the freezer!\e[0m"

				fi

				break

			fi

		done

	}

	Obtain_Cpu_Gov(){

		CPU_GOV_CURRENT=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)

	}

	Print_Stats(){

		echo -e ""
		echo -e " \e[38;5;93m─────────────────────────────────────────────────────\e[0m\n \e[1mDietPi CPU Info\e[0m\n\e[90m Use dietpi-config to change CPU / performance options\e[0m\n \e[38;5;93m─────────────────────────────────────────────────────\e[0m"

		#Processor Type
		echo -e " Architecture \e[90m|\e[0m     $(uname -m)"

		#Current Temp
		echo -e " Temp         \e[90m|\e[0m     $CPU_TEMP_PRINT"

		#Current Gov
		echo -e " Governor     \e[90m|\e[0m     $CPU_GOV_CURRENT"
		if [ "$CPU_GOV_CURRENT" = "ondemand" ] ||
			[ "$CPU_GOV_CURRENT" = "conservative" ]; then
			echo -e " Throttle up  \e[90m|\e[0m     $(cat /DietPi/dietpi.txt | grep -m1 '^cpu_usage_throttle_up' | sed 's/.*=//')% CPU usage"
		fi

		#Current Frequency
		echo -e ""
		echo -e " \e[90m                Current Freq    Min Freq   Max Freq\e[0m"
		for ((i=0; i<${#aCPU_CURRENT_FREQ[@]}; i++))
		do
			echo -e " \e[90mCPU$i\e[0m         \e[90m|\e[0m      $(( ${aCPU_CURRENT_FREQ[$i]} / 1000 )) Mhz      \e[90m$(( $(cat /sys/devices/system/cpu/cpu$i/cpufreq/scaling_min_freq) / 1000 )) Mhz    $(( $(cat /sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq) / 1000 )) Mhz\e[0m"
		done

		echo -e ""

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////
	#-----------------------------------------------------------------------------------

	#Return mode
	if (( $INPUT == 1 )); then

		Obtain_Cpu_Temp
		echo "$CPU_TEMP_CURRENT"

	#Print all stats
	else

		Obtain_Cpu_Freq
		Obtain_Cpu_Temp
		Obtain_Cpu_Gov

		Print_Stats

	fi

	#-----------------------------------------------------------------------------------
	#Delete[] array
	unset aCPU_CURRENT_FREQ
	unset aFP_TEMPERATURE
	#-----------------------------------------------------------------------------------
	exit
	#-----------------------------------------------------------------------------------
}