#!/bin/bash
{
	#////////////////////////////////////
	# DietPi Backup
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	#////////////////////////////////////
	#
	# Info:
	# - filename /DietPi/dietpi/dietpi-backup
	# - Allows for a complete system back and restore of the linux filesystem (/)
	#
	# Usage:
	# - /DietPi/dietpi/dietpi-backup -1 = Restore
	# - /DietPi/dietpi/dietpi-backup    = Menu
	# - /DietPi/dietpi/dietpi-backup  1 = Backup
	#
	# $2 = optional directory location to use with backup/restore input:
	# - /DietPi/dietpi/dietpi-backup -1 /mnt/MyDirectoryTarget = Restore
	# - /DietPi/dietpi/dietpi-backup  1 /mnt/MyDirectoryTarget = Backup
	#////////////////////////////////////

	#Force en_GB Locale for whole script. Prevents incorrect parsing with non-english locales.
	LANG=en_GB.UTF-8

	#Grab Input (valid interger)
	INPUT=0
	if [[ $1 =~ ^-?[0-9]+$ ]]; then
		INPUT=$1
	fi

	#/////////////////////////////////////////////////////////////////////////////////////
	# MENUS
	#/////////////////////////////////////////////////////////////////////////////////////
	WHIP_BACKTITLE='DietPi-Backup'
	WHIP_TITLE=''
	CHOICE=0
	OPTION=0
	TARGETMENUID=0

	USB_DRIVE_AVAILABLE=0
	USB_DRIVE_TEXT="Not available"

	#TARGETMENUID=0
	Menu_Main(){

		local backup_last_completed='No previous backup found. Create one.'
		if [ -f "$FP_TARGET/$BACKUP_STATS_FILENAME" ]; then
			backup_last_completed=$(grep '^Backup Completed' "$FP_TARGET/$BACKUP_STATS_FILENAME" | tail -1 | awk '{print $3}')
		fi

		WHIP_TITLE='- DietPi-Backup -'
		OPTION=$(whiptail --title "$WHIP_TITLE" --menu "Current backup and restore location:\n  $FP_TARGET\n\nMost recent successful backup date:\n  $backup_last_completed" --cancel-button "Exit" --backtitle "$WHIP_BACKTITLE" 16 73 4 \
		"Help" "What does DietPi-Backup do?" \
		"Location" "Change where your backup will be saved and restored from." \
		"Backup" "Create (or update) a backup of this system." \
		"Restore" "Restore this system from a previous backup." 3>&1 1>&2 2>&3)

		CHOICE=$?
		if (( $CHOICE == 0 )); then

			case "$OPTION" in
				Location)
					TARGETMENUID=1
				;;
				Help)
					whiptail --title "DietPi-Backup Help" --msgbox "DietPi-Backup is a program that allows you to Backup and Restore your DietPi system.\n\nIf you have broken your system, or want to reset your system to an eariler date, this can all be done with DietPi-Backup.\n\nSimply choose a location where you want to save and restore your backups from, then, select Backup or Restore.\n\nNotice for dedicated USB HDD installations:\n - DietPi-Backup does not backup any USB HDD data.\n\nMore information:\n - http://dietpi.com/phpbb/viewtopic.php?f=8&t=5&p=256#p255" --backtitle "$WHIP_BACKTITLE" 20 75
				;;
				Backup)
					WHIP_TITLE=' Start system backup? '
					whiptail --title "$WHIP_TITLE" --yesno "Your system will be backed up to:\n$FP_TARGET\n\nDo you wish to continue?" --yes-button "Ok" --no-button "Back" --defaultno --backtitle "$WHIP_BACKTITLE" 11 65
					CHOICE=$?
					if (( $CHOICE == 0 )); then
						Run_Backup
					fi
				;;
				Restore)
					WHIP_TITLE=' Start system restore? '
					whiptail --title "$WHIP_TITLE" --yesno "Your system will be restored from:\n$FP_TARGET\n\nDo you wish to continue?" --yes-button "Ok" --no-button "Back" --defaultno --backtitle "$WHIP_BACKTITLE" 11 65
					CHOICE=$?
					if (( $CHOICE == 0 )); then
						Run_Restore
					fi
				;;
			esac

		else
			Menu_Exit
		fi

	}

	Menu_Exit(){

		WHIP_TITLE=' Exit DietPi-Backup? '
		whiptail --title "$WHIP_TITLE" --yesno "$WHIP_TITLE" --yes-button "Ok" --no-button "Back" --defaultno --backtitle "$WHIP_BACKTITLE" 10 50
		CHOICE=$?

		#Exit
		if (( $CHOICE == 0 )); then
			TARGETMENUID=-1
		fi

	}

	#TARGETMENUID=1
	Menu_Set_Directory(){

		local current_directory="$FP_TARGET"

		Check_Available_DietPi_Mounts

		WHIP_TITLE='Select your backup and restore location'
		OPTION=$(whiptail --title "$WHIP_TITLE" --menu "Please select the location where your system backup will be saved, and, where it can be restored from.\n\nYour current location:\n$FP_TARGET" --cancel-button "Back" --backtitle "$WHIP_BACKTITLE" 16 75 4 \
		"Search" "Find previous backups in /mnt/*" \
		"Manual" "Manually type a directory to use." \
		"USB HDD" "$USB_DRIVE_TEXT" 3>&1 1>&2 2>&3)
		CHOICE=$?

		if (( $CHOICE == 0 )); then

			case "$OPTION" in
				Search)
					local fp_search_results="/tmp/.dietpi-backup_search_results"
					echo -e "\n\nSearching /mnt/* for previous backups, please wait... \n \n"
					find /mnt -type f -name "$BACKUP_STATS_FILENAME" > "$fp_search_results"

					#Do we have any results?
					if (( $(cat "$fp_search_results" | wc -l) > 0 )); then
						readarray search_results_list < "$fp_search_results"
						#Create List for Whiptail
						local search_results_whiptail=()
						for ((i=0; i<${#search_results_list[@]}; i++))
						do
							local last_backup_date=$( grep '^Backup Completed' ${search_results_list[$i]} | tail -1 | awk '{print $3}' ) # Date of last backup for this backup
							local backup_directory=$( echo -e ${search_results_list[$i]} | sed 's/\/'"$BACKUP_STATS_FILENAME"'//g' ) # Backup directory (minus the backup file), that we can use for target backup directory.
							search_results_whiptail+=("$backup_directory" ": $last_backup_date")
						done

						OPTION=$(whiptail --title "Backups found." --menu "Please select a previous backup to use:" --cancel-button "Back" --backtitle "$WHIP_BACKTITLE" 12 70 3 "${search_results_whiptail[@]}" 3>&1 1>&2 2>&3)
						CHOICE=$?
						if (( $CHOICE == 0 )); then
							FP_TARGET="$OPTION"
						fi

						#delete[] array
						unset search_results_list
						unset search_results_whiptail
						rm "$fp_search_results" &> /dev/null
					else
						whiptail --title "No results" --msgbox "No previous backups were found in /mnt/*" --backtitle "$WHIP_BACKTITLE" 10 60
					fi
				;;
				Manual)
					Input_User_Directory
				;;
				"USB HDD")
					if (( $USB_DRIVE_AVAILABLE )); then
						FP_TARGET="$FP_USB_HDD"
					else
						whiptail --title "No USB HDD Found. Setup Now?" --yesno "$USB_DRIVE_TEXT\n\nWould you like DietPi to setup an external USB drive now?" --yes-button "Ok" --no-button "Back" --defaultno --backtitle "$WHIP_BACKTITLE" 11 65
						CHOICE=$?
						if (( $CHOICE == 0 )); then
							/DietPi/dietpi/dietpi-drive_manager 2
						fi

					fi
				;;
			esac

		else
			#Return to main menu
			TARGETMENUID=0
		fi

		Check_Supported_Directory_Location
		# - Not supported, reset directory target to previous
		if (( $TARGET_DIRECTORY_SUPPORTED == 0 )); then
			FP_TARGET="$current_directory"
		fi

	}

	Input_User_Directory(){

		OPTION=$(whiptail --inputbox "Please enter the filepath to your directory. \neg: /mnt/dietpi-backup\n - Must be located inside /mnt/* \n - Must be symlink compatible filesystem (ext2/3/4)" 10 70 "$FP_TARGET" --title "Manual backup directory" --backtitle "$WHIP_BACKTITLE" 3>&1 1>&2 2>&3)
		CHOICE=$?
		if (( $CHOICE == 0 )); then
			FP_TARGET="$OPTION"
		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Errors
	#/////////////////////////////////////////////////////////////////////////////////////
	Error_Filesystem_Not_Supported(){

		/DietPi/dietpi/func/dietpi-notify 1 "Filesystem not supported in $FP_TARGET"

		if (( $INPUT == 0 )); then
			whiptail --title "Error" --msgbox "$FP_TARGET Has a filesystem of: $TARGET_FILESYSTEM_TYPE, and is not supported.\n\nThe filesystem must be EXT2/3/4 for symlink compatibility." --backtitle "$WHIP_BACKTITLE" 11 70
		fi

	}

	Error_Not_Mnt_Directory(){

		/DietPi/dietpi/func/dietpi-notify 1 "Target directory is not inside /mnt ($FP_TARGET)"

		if (( $INPUT == 0 )); then
			whiptail --title "Directory not supported" --msgbox "$FP_TARGET\n\nYour current location is not supported.\nThe location must be inside the /mnt/* directory.\n - eg: /mnt/dietpi-backup" --backtitle "$WHIP_BACKTITLE" 11 70
		fi

	}

	Error_Rsync_Already_Running(){

		/DietPi/dietpi/func/dietpi-notify 1 "Another Rsync process is already running."

		echo -e "$RSYNC_MODE_TEXT failed: $(date +"%d-%m-%Y_%H%M"). Rsync is already running." >> "$FP_TARGET/$BACKUP_STATS_FILENAME"
		#Menu
		if (( $INPUT == 0 )); then
			whiptail --title "$RSYNC_MODE_TEXT Error" --msgbox "A $RSYNC_MODE_TEXT could not be started as rsync is already running." --backtitle "$WHIP_BACKTITLE" 13 60
		fi

	}

	Error_Rsync_Failed(){

		/DietPi/dietpi/func/dietpi-notify 1 "$RSYNC_MODE_TEXT failed."

		echo -e "$RSYNC_MODE_TEXT Failed: $(date +"%d-%m-%Y_%H%M")" >> "$FP_TARGET/$BACKUP_STATS_FILENAME"
		#Menu
		if (( $INPUT == 0 )); then
			whiptail --title "$RSYNC_MODE_TEXT failed" --msgbox "Your $RSYNC_MODE_TEXT has failed. Please see the Log file for more information:\n\n$LOGFILE" --backtitle "$WHIP_BACKTITLE" 12 60
		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Backup System
	#/////////////////////////////////////////////////////////////////////////////////////
	RSYNC_MODE_TEXT=0

	#LOGFILE
	LOGFILE="/var/log/dietpi-backup.log"

	#Backup Filepaths
	FP_SOURCE="/"
	FP_TARGET="/mnt/dietpi-backup"
	FP_USB_HDD="/mnt/usb_1/dietpi-backup"

	#file applied to successful backups (stored in "$FP_TARGET/$BACKUP_STATS_FILENAME"
	BACKUP_STATS_FILENAME=".dietpi-backup_stats"

	#Exclude/include file
	FP_EXCLUDE_GLOBAL="/tmp/.dietpi-backup_exclude"
	FP_INCLUDE_GLOBAL="/tmp/.dietpi-backup_include"
	FP_EXCLUDE_USER="/DietPi/dietpi/.dietpi-backup_exclude"
	FP_INCLUDE_USER="/DietPi/dietpi/.dietpi-backup_include"

	#Supported filesystems
	TARGET_FILESYSTEM_TYPE=0
	TARGET_DIRECTORY_SUPPORTED=0
	aSUPPORTED_FILESYSTEMS=(
		"ext4"
		"ext3"
		"ext2"
		"nfs"
		"nfs4"
	)

	#rsync options
	RSYNC_RUN_OPTIONS="-alHpvP --delete --log-file=$LOGFILE --exclude-from=$FP_EXCLUDE_GLOBAL --include-from=$FP_INCLUDE_GLOBAL"

	Create_Exclude_File(){

		#Generate new
		rm "$FP_EXCLUDE_GLOBAL" &> /dev/null

		#Global - Folders
		echo -e "$FP_TARGET" >> "$FP_EXCLUDE_GLOBAL"
		echo -e "/mnt/*" >> "$FP_EXCLUDE_GLOBAL"
		echo -e "/media/*" >> "$FP_EXCLUDE_GLOBAL"
		echo -e "/dev/*" >> "$FP_EXCLUDE_GLOBAL"
		echo -e "/proc/*" >> "$FP_EXCLUDE_GLOBAL"
		echo -e "/sys/*" >> "$FP_EXCLUDE_GLOBAL"
		echo -e "/tmp/*" >> "$FP_EXCLUDE_GLOBAL"
		echo -e "/run/*" >> "$FP_EXCLUDE_GLOBAL"

		# - Apt package cache (.deb)
		echo -e "/var/cache/apt/archives/*" >> "$FP_EXCLUDE_GLOBAL"

		# - Manpages / Docs
		echo -e "/usr/share/man/*" >> "$FP_EXCLUDE_GLOBAL"
		echo -e "/usr/share/doc/*" >> "$FP_EXCLUDE_GLOBAL"


		#Global - Files
		echo -e "$LOGFILE" >> "$FP_EXCLUDE_GLOBAL"
		echo -e "$FP_DIETPIBACKUP_SETTINGS" >> "$FP_EXCLUDE_GLOBAL"
		echo -e "$BACKUP_STATS_FILENAME" >> "$FP_EXCLUDE_GLOBAL"
		echo -e "/var/swap" >> "$FP_EXCLUDE_GLOBAL"
		echo -e "fake-hwclock.data" >> "$FP_EXCLUDE_GLOBAL"
		echo -e "*.tmp" >> "$FP_EXCLUDE_GLOBAL"

		# - MS Windows specific
		echo -e "Thumbs.db" >> "$FP_EXCLUDE_GLOBAL"
		echo -e "desktop.ini" >> "$FP_EXCLUDE_GLOBAL"

		#Add users additional list
		if [ -f "$FP_EXCLUDE_USER" ]; then

			cat "$FP_EXCLUDE_USER" >> "$FP_EXCLUDE_GLOBAL"

		fi

	}

	Create_Include_File(){

		#Generate new
		rm "$FP_INCLUDE_GLOBAL" &> /dev/null

		#Global - Folders
		echo -e "" > "$FP_INCLUDE_GLOBAL"

		#Global - Files

		#Add users additional list
		if [ -f "$FP_INCLUDE_USER" ]; then

			cat "$FP_INCLUDE_USER" >> "$FP_INCLUDE_GLOBAL"

		fi

	}

	Services_Stop(){
		/DietPi/dietpi/dietpi-services stop
	}

	Services_Start(){
		/DietPi/dietpi/dietpi-services start
	}

	Run_Backup(){

		RSYNC_MODE_TEXT="Backup"

		/DietPi/dietpi/func/dietpi-notify 3 DietPi-Backup "$RSYNC_MODE_TEXT"

		#Check valid FS
		Check_Supported_Directory_Location

		#Filesystem supported
		if (( $TARGET_DIRECTORY_SUPPORTED == 1 )); then

			#Generate target dir.
			mkdir -p "$FP_TARGET"

			#Error: Unable to create target folder.
			if [ ! -d "$FP_TARGET" ]; then

				if (( $INPUT == 0 )); then
					whiptail --title "$RSYNC_MODE_TEXT failed." --msgbox "Unable to create $FP_TARGET" --backtitle "$WHIP_BACKTITLE" 10 60
				fi

			#Error: Rsync is already running
			elif (( $(ps aux | grep -ci -m1 "[r]sync") == 1 )); then

				Error_Rsync_Already_Running

			else

				#Start Backup

				echo -e "DietPi-Backup Log File. $(date +"%d-%m-%Y_%H%M")\n\n" > "$LOGFILE"

				#Generate Exclude/Include lists
				Create_Exclude_File
				Create_Include_File

				Services_Stop

				/DietPi/dietpi/func/dietpi-notify 2 "Backing up to: $FP_TARGET"

				rsync $RSYNC_RUN_OPTIONS "$FP_SOURCE" "$FP_TARGET"/

				Services_Start

				#Success
				if (( $? == 0 )); then
					/DietPi/dietpi/func/dietpi-notify 0 "$RSYNC_MODE_TEXT Completed.\n"
					echo -e "$RSYNC_MODE_TEXT Completed: $(date +"%d-%m-%Y_%H:%M")" >> "$FP_TARGET/$BACKUP_STATS_FILENAME"
					#Menu
					if (( $INPUT == 0 )); then
						whiptail --title "$RSYNC_MODE_TEXT completed" --msgbox "Your $RSYNC_MODE_TEXT was saved to:\n$FP_TARGET\n\nLog file: $LOGFILE" --backtitle "$WHIP_BACKTITLE" 11 60
					fi

				#Failed
				else
					Error_Rsync_Failed
				fi

				#return to main menu
				TARGETMENUID=0

			fi
		fi

	}

	Run_Restore(){

		RSYNC_MODE_TEXT="Restore"

		/DietPi/dietpi/func/dietpi-notify 3 DietPi-Backup "$RSYNC_MODE_TEXT"

		#Check valid FS
		Check_Supported_Directory_Location

		#Filesystem supported
		if (( $TARGET_DIRECTORY_SUPPORTED == 1 )); then

			#Error: Backup not found
			if [ ! -f "$FP_TARGET/$BACKUP_STATS_FILENAME" ]; then

				/DietPi/dietpi/func/dietpi-notify 2 "No Backup was found in $FP_TARGET"
				/DietPi/dietpi/func/dietpi-notify 1 "$RSYNC_MODE_TEXT Failed.\n"
				if (( $INPUT == 0 )); then
					whiptail --title "$RSYNC_MODE_TEXT failed." --msgbox "$FP_TARGET/$BACKUP_STATS_FILENAME does not exist\n\nHave you created a backup?" --backtitle "$WHIP_BACKTITLE" 11 70
				fi

			#Error: Rsync is already running
			elif (( $(ps aux | grep -ci -m1 "[r]sync") == 1 )); then

				Error_Rsync_Already_Running

			#Restore
			else

				#Generate Exclude/Include lists
				Create_Exclude_File
				Create_Include_File

				Services_Stop

				/DietPi/dietpi/func/dietpi-notify 2 "Restoring from: $FP_TARGET"

				rsync $RSYNC_RUN_OPTIONS "$FP_TARGET"/ "$FP_SOURCE"

				Services_Start

				#Success
				if (( $? == 0 )); then
					/DietPi/dietpi/func/dietpi-notify 0 "$RSYNC_MODE_TEXT Completed.\n"
					echo -e "$RSYNC_MODE_TEXT Completed: $(date +"%d-%m-%Y_%H:%M")" >> "$FP_TARGET/$BACKUP_STATS_FILENAME"
					#Menu
					if (( $INPUT == 0 )); then
						whiptail --title "$RSYNC_MODE_TEXT completed" --msgbox "Your system has been restored from:\n$FP_TARGET.\n\nA reboot is highly recommended." --backtitle "$WHIP_BACKTITLE" 11 60
					fi

				#Failed
				else
					Error_Rsync_Failed
				fi

				#return to main menu
				TARGETMENUID=0

			fi

		fi

	}

	Check_Install_PreReqs(){

		#Rsync
		if (( $(dpkg -l | grep -ci -m1 ' rsync ') == 0 )); then
			echo -e "\n\nInstalling Rsync, please wait....\n\n"
			sleep 1

			apt-get install rsync -y
		fi

	}

	Check_Available_DietPi_Mounts(){

		local temp_file_mounts="/tmp/.dietpi-backup_dietpi_mounts"
		df -h > "$temp_file_mounts"

		#USB
		USB_DRIVE_AVAILABLE=0
		USB_DRIVE_TEXT="No USB HDD was found or mounted (/mnt/usb_1)."
		if (( $(cat "$temp_file_mounts" | grep -ci -m1 "/mnt/usb_1") )); then
			USB_DRIVE_AVAILABLE=1
			USB_DRIVE_TEXT="Size: $(df -h | grep /mnt/usb_1 | awk '{print $2}')B | Available: $(df -h | grep /mnt/usb_1 | awk '{print $4}')B"
		fi

		rm "$temp_file_mounts"

	}

	Check_Supported_Directory_Location(){

		TARGET_DIRECTORY_SUPPORTED=0

		#Check location contains /mnt/
		if [[ "$FP_TARGET" == "/mnt/"* ]]; then

			#Generate the target directory if it doesnt exist. So we can check what filesystem it will be.
			local directory_generated=0
			if [ ! -d "$FP_TARGET" ]; then
				mkdir -p "$FP_TARGET"
				directory_generated=1
			fi

			TARGET_FILESYSTEM_TYPE="$( df -T $FP_TARGET | sed -n '2p' | awk '{print $2}')"
			for ((i=0; i<${#aSUPPORTED_FILESYSTEMS[@]}; i++))
			do
				if [ "$TARGET_FILESYSTEM_TYPE" = "${aSUPPORTED_FILESYSTEMS[$i]}" ]; then
					TARGET_DIRECTORY_SUPPORTED=1
					break
				fi
			done

			#Delete directory if tested
			if (( $directory_generated == 1 )); then
				rm -R "$FP_TARGET"
			fi

			#Not ext2/3/4
			if (( $TARGET_DIRECTORY_SUPPORTED == 0 )); then
				Error_Filesystem_Not_Supported
			fi

		#Not inside /mnt
		else
			Error_Not_Mnt_Directory
		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Settings File
	#/////////////////////////////////////////////////////////////////////////////////////
	#Settings File
	FP_DIETPIBACKUP_SETTINGS="/DietPi/dietpi/.dietpi-backup_settings"

	Write_Settings_File(){

		rm "$FP_DIETPIBACKUP_SETTINGS" &> /dev/null

		echo -e "$FP_TARGET" >> "$FP_DIETPIBACKUP_SETTINGS"

	}

	Read_Settings_File(){

		if [ -f "$FP_DIETPIBACKUP_SETTINGS" ]; then

			FP_TARGET=$(sed -n 1p "$FP_DIETPIBACKUP_SETTINGS")

		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////

	#pre-reqs, install if required.
	Check_Install_PreReqs

	#Read settings file
	Read_Settings_File

	# $2 Optional directory input.
	if [ "$2" != "" ]; then
		FP_TARGET=$2
	fi

	#-----------------------------------------------------------------------------
	#Run Backup
	if (( $INPUT == 1 )); then

		Run_Backup

	#Run Restore
	elif (( $INPUT == -1 )); then

		Run_Restore

	#-----------------------------------------------------------------------------
	#Run menu
	elif (( $INPUT == 0 )); then

		while (( $TARGETMENUID > -1 )); do

			clear

			if (( $TARGETMENUID == 0 )); then
				Menu_Main
			elif (( $TARGETMENUID == 1 )); then
				Menu_Set_Directory
			fi

		done

		#Save settings
		Write_Settings_File
	fi

	#-----------------------------------------------------------------------------------
	#Cleaup left over tmp files
	rm "$FP_INCLUDE_GLOBAL" &> /dev/null
	rm "$FP_EXCLUDE_GLOBAL" &> /dev/null
	#-----------------------------------------------------------------------------------
	#delete[] array
	unset aSUPPORTED_FILESYSTEMS
	#-----------------------------------------------------------------------------------
	exit
	#-----------------------------------------------------------------------------------
}
