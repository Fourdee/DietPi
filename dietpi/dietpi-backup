#!/bin/bash
{
	#////////////////////////////////////
	# DietPi Backup
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	#////////////////////////////////////
	#
	# Info:
	# - Location: /boot/dietpi/dietpi-backup
	# - Allows for a complete system back and restore of the linux filesystem (/)
	#
	# Usage:
	# - dietpi-backup -1 = Restore
	# - dietpi-backup    = Menu
	# - dietpi-backup  1 = Backup
	#
	# $2 = optional directory location to use with backup/restore input:
	# - dietpi-backup -1 /mnt/MyDirectoryTarget = Restore
	# - dietpi-backup  1 /mnt/MyDirectoryTarget = Backup
	#////////////////////////////////////

	# Import DietPi-Globals --------------------------------------------------------------
	. /boot/dietpi/func/dietpi-globals
	G_PROGRAM_NAME='DietPi-Backup'
	G_CHECK_ROOT_USER
	G_CHECK_ROOTFS_RW
	G_INIT
	# Import DietPi-Globals --------------------------------------------------------------

	# Grab Input
	disable_error=1 G_CHECK_VALIDINT "$1" && INPUT=$1 || INPUT=0

	#/////////////////////////////////////////////////////////////////////////////////////
	# Backup System
	#/////////////////////////////////////////////////////////////////////////////////////
	RSYNC_MODE_TEXT=0

	FP_LOG='/var/log/dietpi-backup.log'

	# Backup Filepaths
	FP_SOURCE='/'
	FP_TARGET='/mnt/dietpi-backup'
	G_FP_DIETPI_USERDATA_ACTUAL=$(readlink -f $G_FP_DIETPI_USERDATA)

	# File applied to successful backups (stored in "$FP_TARGET/$BACKUP_STATS_FILENAME"
	BACKUP_STATS_FILENAME='.dietpi-backup_stats'

	# Exclude/include file
	FP_FILTER='.dietpi-backup_filter_inc_exc'
	FP_FILTER_CUSTOM='/boot/dietpi/.dietpi-backup_inc_exc'

	# Supported filesystems
	TARGET_FILESYSTEM_TYPE=0
	TARGET_DIRECTORY_SUPPORTED=0
	aSUPPORTED_FILESYSTEMS=('ext4' 'ext3' 'ext2' 'nfs' 'nfs4' 'btrfs')

	# rsync options
	# - Backup: Delete files in target which are not present in source, or excluded
	RSYNC_RUN_OPTIONS_BACKUP="-aH --info=name0 --info=progress2 --delete-excluded --exclude-from=$FP_FILTER"
	# - Restore: Delete files in target which are not present in source, but after the transfer has finished, and leave excluded files untouched
	RSYNC_RUN_OPTIONS_RESTORE="-aH --info=name0 --info=progress2 --delete-after --exclude-from=$FP_FILTER"
	RSYNC_LOGGING_OPTIONS="-v --log-file=$FP_LOG"

	# Date format for logs
	Print_Date(){ date +"%d-%m-%Y %H:%M"; }

	Create_Filter_Include_Exclude(){

		# Default - Include/Exclude
		cat << _EOF_ > $FP_FILTER
# Dirs
- $FP_TARGET/
+ $G_FP_DIETPI_USERDATA_ACTUAL/
+ $G_FP_DIETPI_USERDATA/
- /mnt/*
- /media/
- /dev/
- /lost+found/
- /proc/
- /sys/
- /tmp/
- /run/
- /var/cache/apt/*

# Files
- /var/swap
- .swap*
- $FP_LOG
- $FP_SETTINGS
- fake-hwclock.data
_EOF_

		# Add users filter list
		[[ -f $FP_FILTER_CUSTOM ]] && cat $FP_FILTER_CUSTOM >> $FP_FILTER

	}

	Services_Stop(){

		/boot/dietpi/dietpi-services stop
		killall -w rsync &> /dev/null # https://github.com/MichaIng/DietPi/issues/1869#issuecomment-400036370

	}

	Services_Start(){ /boot/dietpi/dietpi-services start; }

	Run_Backup(){

		RSYNC_MODE_TEXT='Backup'

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" "$RSYNC_MODE_TEXT"

		# Check valid FS
		Check_Supported_Directory_Location

		# Filesystem supported
		if (( $TARGET_DIRECTORY_SUPPORTED )); then

			Services_Stop

			# Generate target dir.
			mkdir -p "$FP_TARGET"

			# Error: Unable to create target folder.
			if [[ ! -d $FP_TARGET ]]; then

				G_WHIP_MSG "$RSYNC_MODE_TEXT Failed:\n\nUnable to create $FP_TARGET"

			# Error: Rsync is already running
			elif pgrep 'rsync' &> /dev/null; then

				Error_Rsync_Already_Running

			else

				# Start Backup
				echo -e "DietPi-Backup Log File. $(date +"%d-%m-%Y_%H%M")\n\n" > $FP_LOG

				# Generate Exclude/Include lists
				Create_Filter_Include_Exclude

				while :
				do

					# - system
					RSYNC_MODE_TEXT='Backup'
					mkdir -p "$FP_TARGET"/data

					# - - Check for sufficient free space
					#	NB: working in KiB until end MiB conversion, as, don't like using long long int, and, KiB should offer a good end result.
					local old_backup_size=$(du -ks "$FP_TARGET"/data | mawk '{print $1}') # Actual disk space usage

					rsync --dry-run --stats $RSYNC_RUN_OPTIONS_BACKUP "$FP_SOURCE" "$FP_TARGET"/data/ > /tmp/dietpi-backup_result
					local new_backup_size=$(( $(grep -m1 '^Total file size:' /tmp/dietpi-backup_result | sed 's/[^0-9]*//g') / 1024 +1 ))  # Theoretical, data size only
					local total_file_count=$(mawk '/^Number of files:/{print $6;exit}' /tmp/dietpi-backup_result | sed 's/[^0-9]*//g')
					local total_folder_count=$(mawk '/^Number of files:/{print $8;exit}' /tmp/dietpi-backup_result | sed 's/[^0-9]*//g')
					local target_fs_blocksize=$(stat -fc %s "$FP_TARGET"/data)
					new_backup_size=$(( $new_backup_size + ( $total_file_count + $total_folder_count ) * $target_fs_blocksize / 1024 + 1 )) # Add one block size to each file + dir as worst case result
					local end_result=$(( ( $new_backup_size - $old_backup_size ) / 1024 + 1 ))
					rm /tmp/dietpi-backup_result

					if ! G_CHECK_FREESPACE "$FP_TARGET"/data $end_result; then

						G_WHIP_BUTTON_OK_TEXT='Ignore'
						G_WHIP_BUTTON_CANCEL_TEXT='Exit'
						if ! G_WHIP_YESNO 'The backup target location appears to have insufficient free space to successfully finish the backup.\nHowever, this check is a rough estimation in reasonable time, thus it could be marginally incorrect.
\nWould you like to override this warning and continue with the backup?'; then

							echo -e "$RSYNC_MODE_TEXT cancelled due to insufficient free space    : $(Print_Date)" >> "$FP_TARGET/$BACKUP_STATS_FILENAME"
							break

						fi

					fi

					G_DIETPI-NOTIFY 2 "$RSYNC_MODE_TEXT $FP_TARGET: in progress, please wait..."

					rsync $RSYNC_RUN_OPTIONS_BACKUP $RSYNC_LOGGING_OPTIONS "$FP_SOURCE" "$FP_TARGET"/data/
					EXIT_CODE=$?
					G_DIETPI-NOTIFY -1 $EXIT_CODE "$G_PROGRAM_NAME: $RSYNC_MODE_TEXT"
					if (( $EXIT_CODE == 0 )); then

						echo -e "$RSYNC_MODE_TEXT Completed    : $(Print_Date)" >> "$FP_TARGET/$BACKUP_STATS_FILENAME"
						G_WHIP_MSG "$RSYNC_MODE_TEXT Completed:\n - $FP_TARGET"

					else

						G_WHIP_MSG "$RSYNC_MODE_TEXT Failed:\n - $FP_TARGET\n\nYou will given an option to view the logfile on the next screen. Please check it for information and/or errors."

					fi

					# Done
					break

				done

				log=1 G_WHIP_VIEWFILE $FP_LOG

				# Return to main menu
				TARGETMENUID=0

			fi

			Services_Start

		fi

	}

	Run_Restore(){

		RSYNC_MODE_TEXT='Restore'

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" "$RSYNC_MODE_TEXT"

		# Check valid FS
		Check_Supported_Directory_Location

		# Filesystem supported
		if (( $TARGET_DIRECTORY_SUPPORTED )); then

			Services_Stop

			# Error: Backup not found
			if [[ ! -f $FP_TARGET/$BACKUP_STATS_FILENAME ]]; then

				G_DIETPI-NOTIFY 2 "No Backup was found in $FP_TARGET"
				G_DIETPI-NOTIFY 1 "$RSYNC_MODE_TEXT Failed.\n"

				G_WHIP_MSG "$RSYNC_MODE_TEXT Failed:\n\n$FP_TARGET/$BACKUP_STATS_FILENAME does not exist\n\nHave you created a backup?"

			# Error: Rsync is already running
			elif pgrep 'rsync' &> /dev/null; then

				Error_Rsync_Already_Running

			# Restore
			else

				# Generate Exclude/Include lists
				Create_Filter_Include_Exclude

				G_DIETPI-NOTIFY 2 "$RSYNC_MODE_TEXT $FP_TARGET: in progress, please wait..."

				RSYNC_MODE_TEXT='Restore'
				rsync $RSYNC_RUN_OPTIONS_RESTORE $RSYNC_LOGGING_OPTIONS "$FP_TARGET"/data/ "$FP_SOURCE"
				EXIT_CODE=$?
				G_DIETPI-NOTIFY -1 $EXIT_CODE "$G_PROGRAM_NAME: $RSYNC_MODE_TEXT"
				if (( $EXIT_CODE == 0 )); then

					echo -e "$RSYNC_MODE_TEXT Completed    : $(Print_Date)" >> "$FP_TARGET/$BACKUP_STATS_FILENAME"
					G_WHIP_MSG "$RSYNC_MODE_TEXT Completed:\n - $FP_TARGET\n\nNB: A Reboot is highly recommended."

				else

					G_WHIP_MSG "$RSYNC_MODE_TEXT Failed:\n - $FP_TARGET\n\nYou will given an option to view the logfile on the next screen. Please check it for information and/or errors."

				fi

				log=1 G_WHIP_VIEWFILE $FP_LOG

				# Done
				TARGETMENUID=0

			fi

			Services_Start

		fi

	}

	Check_Supported_Directory_Location(){

		TARGET_DIRECTORY_SUPPORTED=0

		# Userdata location verify
		G_CHECK_USERDATA

		#Disallow dietpi_userdata location, due to includes in that location
		if [[ $FP_TARGET == $G_FP_DIETPI_USERDATA* || $FP_TARGET == $G_FP_DIETPI_USERDATA_ACTUAL* ]] ; then

			Error_DietpiUserdata_Directory

		# Check location contains /mnt/
		elif [[ $FP_TARGET == '/mnt/'* ]]; then

			# Generate the target directory if it doesnt exist. So we can check what filesystem it will be.
			local directory_generated=0
			if [[ ! -d $FP_TARGET ]]; then

				mkdir -p "$FP_TARGET"
				directory_generated=1

			fi

			TARGET_FILESYSTEM_TYPE=$(df -T $FP_TARGET | mawk 'NR == 2 {print $2}')
			for ((i=0; i<${#aSUPPORTED_FILESYSTEMS[@]}; i++))
			do

				if [[ $TARGET_FILESYSTEM_TYPE == ${aSUPPORTED_FILESYSTEMS[$i]} ]]; then

					TARGET_DIRECTORY_SUPPORTED=1
					break

				fi

			done

			# Delete directory if tested
			(( $directory_generated )) && rm -R "$FP_TARGET"

			# Not ext2/3/4
			(( $TARGET_DIRECTORY_SUPPORTED )) || Error_Filesystem_Not_Supported

		# Not inside /mnt
		else

			Error_Not_Mnt_Directory

		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Settings File
	#/////////////////////////////////////////////////////////////////////////////////////
	FP_SETTINGS='/boot/dietpi/.dietpi-backup_settings'

	Write_Settings_File(){ echo "FP_TARGET=$FP_TARGET" > $FP_SETTINGS; }

	Read_Settings_File(){ [[ -f $FP_SETTINGS ]] && . $FP_SETTINGS; }

	#/////////////////////////////////////////////////////////////////////////////////////
	# MENUS
	#/////////////////////////////////////////////////////////////////////////////////////
	MENU_LASTITEM=
	TARGETMENUID=0

	EXIT_CODE=-1 # Used for 1 time automated running only (eg: G_PROMPT_BACKUP)

	# TARGETMENUID=0
	Menu_Main(){

		local backup_last_completed='Backup not found. Please create one.'

		G_WHIP_MENU_ARRAY=()
		G_WHIP_MENU_ARRAY+=('' '●─ Info ')
		G_WHIP_MENU_ARRAY+=('Help' "What does $G_PROGRAM_NAME do?")
		G_WHIP_MENU_ARRAY+=('' '●─ Options ')
		G_WHIP_MENU_ARRAY+=('Location' ': Change where your backup will be saved and restored from.')
		G_WHIP_MENU_ARRAY+=('Custom Filters' ': Modify custom include/exclude filters for backups.')
		if [[ -f $FP_TARGET'/'$BACKUP_STATS_FILENAME ]]; then

			G_WHIP_MENU_ARRAY+=('Delete' ": Remove backup ($FP_TARGET)")
			backup_last_completed=$(grep 'Completed' "$FP_TARGET/$BACKUP_STATS_FILENAME" | tail -1)

		fi
		G_WHIP_MENU_ARRAY+=('' '●─ Run ')
		G_WHIP_MENU_ARRAY+=('Backup' 'Create (or update) a backup of this device.')
		G_WHIP_MENU_ARRAY+=('Restore' 'Restore this device from a previous backup.')

		G_WHIP_DEFAULT_ITEM=$MENU_LASTITEM
		G_WHIP_BUTTON_CANCEL_TEXT='Exit'
		if G_WHIP_MENU "Current backup and restore location:\n - $FP_TARGET\n - $backup_last_completed"; then

			MENU_LASTITEM=$G_WHIP_RETURNED_VALUE

			case "$G_WHIP_RETURNED_VALUE" in

				'Location')

					TARGETMENUID=1

				;;

				'Custom Filters')

					nano $FP_FILTER_CUSTOM

				;;

				'Help')

					G_WHIP_MSG "DietPi-Backup is a program that allows you to Backup and Restore your DietPi system.\n\nIf you have broken your system, or want to reset your system to an earlier date, this can all be done with DietPi-Backup.\n\nSimply choose a location where you want to save and restore your backups from, then, select Backup or Restore.\n\nMore information:\n - https://dietpi.com/phpbb/viewtopic.php?p=255#p255"

				;;

				'Delete')

					G_WHIP_YESNO "Do you wish to DELETE the following backup?\n - $FP_TARGET" && rm -R "$FP_TARGET"

				;;

				'Backup')

					G_WHIP_YESNO "The system will be backed up to:\n - $FP_TARGET\n\nDo you wish to continue and start the backup?" && Run_Backup

				;;

				'Restore')

					G_WHIP_YESNO "The system will be restored from:\n - $FP_TARGET\n\nDo you wish to continue and start the restore?" && Run_Restore

				;;

			esac

		else

			Menu_Exit

		fi

	}

	Menu_Exit(){

		G_WHIP_SIZE_X_MAX=50
		G_WHIP_YESNO "Exit $G_PROGRAM_NAME?" && TARGETMENUID=-1 EXIT_CODE=0

	}

	# TARGETMENUID=1
	Menu_Set_Directory(){

		local current_directory=$FP_TARGET

		G_WHIP_MENU_ARRAY=(

			'Search' ': Find previous backups in /mnt/*'
			'List' ': Select from a list of available mounts/drives'
			'Manual' ': Manually type a directory to use'

		)

		if G_WHIP_MENU "Please select the location where the backup will be saved, and restored from.\n\nYour current location:\n$FP_TARGET"; then

			case "$G_WHIP_RETURNED_VALUE" in

				'Search')

					local fp_search_results='.dietpi-backup_search_results'
					echo -e "\n\nSearching /mnt/* for previous backups, please wait... \n \n"
					find /mnt -type f -name "$BACKUP_STATS_FILENAME" > $fp_search_results

					# Do we have any results?
					if (( $(wc -l < $fp_search_results) )); then

						readarray search_results_list < $fp_search_results
						# Create List for Whiptail
						G_WHIP_MENU_ARRAY=()
						for ((i=0; i<${#search_results_list[@]}; i++))
						do

							local last_backup_date=$(grep 'Completed' ${search_results_list[$i]} | tail -1 | sed 's/.*: //') # Date of last backup for this backup
							local backup_directory=$(echo -e ${search_results_list[$i]} | sed 's/\/'"$BACKUP_STATS_FILENAME"'//g') # Backup directory (minus the backup file), that we can use for target backup directory.
							G_WHIP_MENU_ARRAY+=("$backup_directory" ": $last_backup_date")

						done

						if G_WHIP_MENU 'Please select a previous backup to use:'; then

							FP_TARGET=$G_WHIP_RETURNED_VALUE

						fi

						# delete[] array
						unset search_results_list
						[[ -f $fp_search_results ]] && rm $fp_search_results

					else

						G_WHIP_MSG 'No previous backups were found in /mnt/*'

					fi

				;;

				'Manual')

					Input_User_Directory

				;;

				'List')

					/boot/dietpi/dietpi-drive_manager 1
					FP_TARGET=$(</tmp/dietpi-drive_manager_selmnt)

					[[ $FP_TARGET == '/' ]] && FP_TARGET='/mnt'
					FP_TARGET+='/dietpi-backup'

				;;

			esac

		else

			# Return to main menu
			TARGETMENUID=0

		fi

		Check_Supported_Directory_Location
		# - Not supported, reset directory target to previous
		(( $TARGET_DIRECTORY_SUPPORTED )) || FP_TARGET=$current_directory

	}

	Input_User_Directory(){

		G_WHIP_DEFAULT_ITEM=$FP_TARGET
		G_WHIP_INPUTBOX "Please enter the filepath to your directory. \neg: /mnt/dietpi-backup\n - Must be located inside /mnt/* \n - Must be symlink compatible filesystem (ext2/3/4)" && FP_TARGET=$G_WHIP_RETURNED_VALUE

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Errors
	#/////////////////////////////////////////////////////////////////////////////////////
	Error_Filesystem_Not_Supported(){

		G_DIETPI-NOTIFY 1 "Filesystem not supported in $FP_TARGET"
		G_WHIP_MSG "Error:\n\n$FP_TARGET Has a filesystem of: $TARGET_FILESYSTEM_TYPE, and is not supported.\n\nThe filesystem must be EXT2/3/4 for symlink compatibility."

	}

	Error_Not_Mnt_Directory(){

		G_DIETPI-NOTIFY 1 "Target directory is not inside /mnt ($FP_TARGET)"
		G_WHIP_MSG "Directory not supported:\n- $FP_TARGET\n\nThe location must be inside the /mnt/* directory.\n - eg: /mnt/dietpi-backup"

	}

	Error_DietpiUserdata_Directory(){

		G_DIETPI-NOTIFY 1 "Target directory can not be contained within DietPi user data location ($FP_TARGET)"
		G_WHIP_MSG "Directory not supported:\n- $FP_TARGET\n\nTarget directory can not be contained within DietPi user data location ($G_FP_DIETPI_USERDATA)"

	}

	Error_Rsync_Already_Running(){

		G_DIETPI-NOTIFY 1 'Another Rsync process is already running.'
		echo -e "$RSYNC_MODE_TEXT failed: $(date +"%d-%m-%Y_%H%M"). Rsync is already running." >> "$FP_TARGET/$BACKUP_STATS_FILENAME"
		G_WHIP_MSG "$RSYNC_MODE_TEXT Error:\n\nA $RSYNC_MODE_TEXT could not be started as rsync is already running."

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////
	# pre-reqs, install if required.
	G_AG_CHECK_INSTALL_PREREQ rsync

	# Read settings file
	Read_Settings_File

	# $2 Optional directory input.
	[[ $2 ]] && FP_TARGET=$2

	# Create user inc/exc templates
	# - Add users filter list
	if [[ ! -f $FP_FILTER_CUSTOM ]]; then

		cat << _EOF_ > $FP_FILTER_CUSTOM
# $G_PROGRAM_NAME | Custom include/exclude filters
#
# To INCLUDE (+) a file/directory:
#	NB: dietpi_userdata is included by default, as well, if moved to a custom location.
#+ /path/to/my/file
#+ /path/to/my/directory/
#
# To EXCLUDE (-) a file/directory:
#	NB: To exclude from a custom located dietpi_userdata, you need to add its symlinked path: /mnt/dietpi_userdata/excludeThis
#- /path/to/my/file
#- /path/to/my/directory/

_EOF_

	fi

	#-----------------------------------------------------------------------------
	# Run Backup
	if (( $INPUT == 1 )); then

		Run_Backup

	# Run Restore
	elif (( $INPUT == -1 )); then

		Run_Restore

	#-----------------------------------------------------------------------------
	# Run menu
	else

		while (( $TARGETMENUID > -1 )); do

			G_TERM_CLEAR

			if (( $TARGETMENUID == 1 )); then

				Menu_Set_Directory

			else

				Menu_Main

			fi

		done

		# Save settings
		Write_Settings_File

	fi
	#-----------------------------------------------------------------------------------
	exit $EXIT_CODE
	#-----------------------------------------------------------------------------------
}
