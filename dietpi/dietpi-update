#!/bin/bash
{
	#////////////////////////////////////
	# DietPi Update
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	#////////////////////////////////////
	#
	# Info:
	# - Location: /boot/dietpi/dietpi-update
	# - Updates DietPi from Git or dietpi.com repo
	# - Uses pre-patch_file for patches that need to be done prior to APT calls and DietPi code update
	# - Uses patch_file for incremental patching after APT calls and DietPi code update
	#
	# Usage:
	# - dietpi-update	= Check for update and in case open interactive menu
	# - dietpi-update 1	= Check for update and in case apply noninteractively
	# - dietpi-update 2	= Check for update only and in case store result to /run/dietpi/.update_available to be used by DietPi-Banner
	#			  Else, if CONFIG_CHECK_APT_UPDATES is set, check for APT updates and store results to /run/dietpi/.apt_updates
	#			  If CONFIG_CHECK_APT_UPDATES=2 is set, apply APT upgrades automatically.
	# - dietpi-update -1	= Like "1" but internally reduce subversion by 1 to reapply the last update, e.g. to apply latest dev branch changes
	#////////////////////////////////////

	# Import DietPi-Globals --------------------------------------------------------------
	. /boot/dietpi/func/dietpi-globals
	readonly G_PROGRAM_NAME='DietPi-Update'
	G_CHECK_ROOT_USER
	G_CHECK_ROOTFS_RW
	G_INIT
	# Import DietPi-Globals --------------------------------------------------------------

	# Grab input
	disable_error=1 G_CHECK_VALIDINT "$1" && INPUT=$1 || INPUT=0

	# Prefix G_DIETPI-NOTIFY 3 header text with "Phase" instead of "Mode" when not checking for available updates only
	[[ $INPUT == 2 ]] || G_NOTIFY_3_MODE='Phase'

	#/////////////////////////////////////////////////////////////////////////////////////
	# UPDATE Vars
	#/////////////////////////////////////////////////////////////////////////////////////
	readonly FP_LOG='/var/tmp/dietpi/logs/dietpi-update.log'
	readonly DIETPIUPDATE_VERSION_CORE=6 # Version of dietpi-update / set server_version-6 line one to value++ and obsolete previous dietpi-update scripts

	CHANGELOG_DOWNLOADED=0 # Prevent redownload of changelog if already done in this session

	GITOWNER_TARGET=$(sed -n '/^[[:blank:]]*DEV_GITOWNER=/{s/^[^=]*=//p;q}' /boot/dietpi.txt)
	GITOWNER_TARGET=${GITOWNER_TARGET:-MichaIng}
	GITBRANCH_TARGET=$(sed -n '/^[[:blank:]]*DEV_GITBRANCH=/{s/^[^=]*=//p;q}' /boot/dietpi.txt)
	GITBRANCH_TARGET=${GITBRANCH_TARGET:-master}

	COREVERSION_SERVER=0
	SUBVERSION_SERVER=0
	RCVERSION_SERVER=0

	INFO_CURRENT_VERSION=
	INFO_SERVER_VERSION=
	INFO_VERSIONS_UPDATE(){

		INFO_CURRENT_VERSION="Current version : v$G_DIETPI_VERSION_CORE.$G_DIETPI_VERSION_SUB.$G_DIETPI_VERSION_RC"
		INFO_SERVER_VERSION="Latest version  : v$COREVERSION_SERVER.$SUBVERSION_SERVER.$RCVERSION_SERVER"

		if [[ $G_GITBRANCH != "$GITBRANCH_TARGET" || $G_GITOWNER != "$GITOWNER_TARGET" ]]; then

			INFO_CURRENT_VERSION+=" (branch: $G_GITOWNER/$G_GITBRANCH)"
			INFO_SERVER_VERSION+=" (branch: $GITOWNER_TARGET/$GITBRANCH_TARGET)"

		fi

	}

	URL_MIRROR_INDEX=0
	aURL_MIRROR_SERVERVERSION=(

		"https://raw.githubusercontent.com/$GITOWNER_TARGET/DietPi/$GITBRANCH_TARGET/dietpi/server_version-6"
		"https://dietpi.com/downloads/dietpi-update_mirror/$GITBRANCH_TARGET/server_version-6"

	)

	aURL_MIRROR_PREPATCH=(

		"https://raw.githubusercontent.com/$GITOWNER_TARGET/DietPi/$GITBRANCH_TARGET/dietpi/pre-patch_file"
		"https://dietpi.com/downloads/dietpi-update_mirror/$GITBRANCH_TARGET/pre-patch_file"

	)

	aURL_MIRROR_ARCHIVE=(

		"https://github.com/$GITOWNER_TARGET/DietPi/archive/$GITBRANCH_TARGET.tar.gz"
		"https://dietpi.com/downloads/dietpi-update_mirror/$GITBRANCH_TARGET/DietPi-$GITBRANCH_TARGET.tar.gz"

	)

	aURL_MIRROR_CHANGELOG=(

		"https://raw.githubusercontent.com/$GITOWNER_TARGET/DietPi/$GITBRANCH_TARGET/CHANGELOG.txt"
		"https://dietpi.com/downloads/dietpi-update_mirror/$GITBRANCH_TARGET/CHANGELOG.txt"

	)

	Get_Server_Version(){

		for i in "${!aURL_MIRROR_SERVERVERSION[@]}"
		do

			G_DIETPI-NOTIFY 2 "Checking mirror: ${aURL_MIRROR_SERVERVERSION[$i]}"
			if curl -sSfL "${aURL_MIRROR_SERVERVERSION[$i]}" > server_version; then

				# Get server version
				COREVERSION_SERVER=$(mawk 'NR==1' server_version)
				SUBVERSION_SERVER=$(mawk 'NR==2' server_version)
				RCVERSION_SERVER=$(mawk 'NR==3' server_version)

				# Check if server version contains valid intergers
				if disable_error=1 G_CHECK_VALIDINT "$COREVERSION_SERVER" &&
					disable_error=1 G_CHECK_VALIDINT "$SUBVERSION_SERVER" &&
					disable_error=1 G_CHECK_VALIDINT "$RCVERSION_SERVER"; then

					G_DIETPI-NOTIFY 0 "Using update server: ${aURL_MIRROR_SERVERVERSION[$i]}"
					URL_MIRROR_INDEX=$i
					INFO_VERSIONS_UPDATE
					return 0

				else

					G_DIETPI-NOTIFY 2 "Invalid server version string: ${COREVERSION_SERVER:-NULL}.${SUBVERSION_SERVER:-NULL}.${RCVERSION_SERVER:-NULL}"

				fi

			else

				G_DIETPI-NOTIFY 2 "No or error response from: ${aURL_MIRROR_SERVERVERSION[$i]} ($(<server_version))"

			fi

		done

		# No valid update server response
		G_DIETPI-NOTIFY 1 'Unable to access any update server. Please check your network connection, then rerun dietpi-update.
If this error persists, please report at: https://github.com/MichaIng/DietPi/issues'
		return 1

	}

	Apply_1st_Run_Update_Success(){ [[ $G_DIETPI_INSTALL_STAGE == [12] ]] || echo 1 > /boot/dietpi/.install_stage; }

	Check_DietPi_Update(){

		local result=1

		# Update requires new image
		if (( $DIETPIUPDATE_VERSION_CORE < $COREVERSION_SERVER )); then

			# Write "-1" to flag file for DietPi-Banner to show info about required new image
			echo '-1' > /run/dietpi/.update_available

			G_DIETPI-NOTIFY 1 'The installed version of DietPi is now obsolete and cannot be updated.
Please download the latest DietPi image from: https://dietpi.com/#download'

		# Update available
		elif (( $G_DIETPI_VERSION_SUB < $SUBVERSION_SERVER || ( $G_DIETPI_VERSION_SUB == $SUBVERSION_SERVER && $G_DIETPI_VERSION_RC < $RCVERSION_SERVER ) )); then

			result=0

			# Write available update version to flag file
			echo "$COREVERSION_SERVER.$SUBVERSION_SERVER.$RCVERSION_SERVER" > /run/dietpi/.update_available

			G_DIETPI-NOTIFY 0 'Update available:'

		# No update required
		else

			# Mark 1st run update as completed
			Apply_1st_Run_Update_Success

			# Remove flag file
			[[ -f '/run/dietpi/.update_available' ]] && rm /run/dietpi/.update_available

			G_DIETPI-NOTIFY 0 'No update required, your DietPi installation is already up to date:'

		fi

		G_DIETPI-NOTIFY 2 "$INFO_CURRENT_VERSION"
		G_DIETPI-NOTIFY 2 "$INFO_SERVER_VERSION"

		return $result

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Update DietPi
	#/////////////////////////////////////////////////////////////////////////////////////
	Run_DietPi_Update(){

		# RC-only update: Reapply last subversion patches
		if (( $G_DIETPI_VERSION_SUB == $SUBVERSION_SERVER )); then

			((G_DIETPI_VERSION_SUB--))
			G_DIETPI_VERSION_RC=0
			INFO_VERSIONS_UPDATE
			G_DIETPI-NOTIFY 2 "RC update: Subversion intentionally reduced to \e[33m\"$G_DIETPI_VERSION_SUB\"\e[90m to reapply the last update"

		fi

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Applying pre-patches'
		G_EXEC_DESC='Downloading pre-patch file' G_EXEC curl -sSfL "${aURL_MIRROR_PREPATCH[$URL_MIRROR_INDEX]}" -o pre-patch_file
		G_EXEC_DESC='Applying execute permission' G_EXEC chmod +x pre-patch_file
		if ! ./pre-patch_file $G_DIETPI_VERSION_SUB; then

			G_DIETPI-NOTIFY 1 "An error occured during pre-patch $?. Please check the above log or $FP_LOG for errors, and rerun \"dietpi-update\" after the cause has been solved."
			exit 1

		fi
		G_DIETPI-NOTIFY 0 'Successfully applied pre-patches'

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Upgrading APT packages'
		G_AGUP
		G_AGUG

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Installing new DietPi code'
		G_EXEC_DESC='Downloading update archive' G_EXEC curl -sSfL "${aURL_MIRROR_ARCHIVE[$URL_MIRROR_INDEX]}" -o update.tar.gz

		G_EXEC_DESC='Unpacking update archive' G_EXEC tar xf update.tar.gz
		rm update.tar.gz

		# Remove files from Git archive that are not to be installed on client
		rm DietPi-"$GITBRANCH_TARGET"/dietpi/{pre-patch_file,server_version*}

		# Remove old code before updating, so we dont need to patch for removals
		# - https://github.com/MichaIng/DietPi/issues/905#issuecomment-298241622
		#rm -R /boot/dietpi/{func,misc,dietpi-*}

		G_EXEC_DESC='Installing new DietPi scripts' G_EXEC cp -Rf DietPi-"$GITBRANCH_TARGET"/dietpi /boot/
		G_EXEC_DESC='Installing new DietPi system files' G_EXEC cp -Rf DietPi-"$GITBRANCH_TARGET"/rootfs/. /
		G_EXEC_DESC='Setting execute permissions for DietPi scripts' G_EXEC chmod -R +x /boot/dietpi /var/lib/dietpi/services /etc/cron.*/dietpi

		# Save version + Git info now for sub scripts to pull from correct branch
		G_GITOWNER=$GITOWNER_TARGET
		G_GITBRANCH=$GITBRANCH_TARGET
		G_VERSIONDB_SAVE

		# Verify/update dietpi.txt entries
		if ! /boot/dietpi/func/dietpi-set_software verify_dietpi.txt; then

			G_DIETPI-NOTIFY 1 "An error occured during dietpi.txt updates. Please check the above log or $FP_LOG for errors, and rerun \"dietpi-update\" after the cause has been solved."
			exit 1

		fi

		# Failsafe: Sync changes to disk
		sync
		systemctl daemon-reload

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Applying incremental patches'
		G_DIETPI-NOTIFY 2 "$INFO_CURRENT_VERSION"
		G_DIETPI-NOTIFY 2 "$INFO_SERVER_VERSION"

		if ! /boot/dietpi/patch_file; then

			G_DIETPI-NOTIFY 1 "An error occured during incremental patching. Please check the above log or $FP_LOG for errors, and rerun \"dietpi-update\" after the cause has been solved."
			exit 1

		fi
		G_DIETPI_VERSION_CORE=$COREVERSION_SERVER
		G_DIETPI_VERSION_SUB=$SUBVERSION_SERVER
		G_DIETPI_VERSION_RC=$RCVERSION_SERVER
		G_VERSIONDB_SAVE

		G_DIETPI-NOTIFY 0 "Incremental patching to v$COREVERSION_SERVER.$SUBVERSION_SERVER.$RCVERSION_SERVER completed"

		# Remove patch_file
		rm /boot/dietpi/patch_file

		# Update info strings
		INFO_VERSIONS_UPDATE

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# MENUS
	#/////////////////////////////////////////////////////////////////////////////////////
	Get_View_Changelog(){

		local fp_changelog='CHANGELOG.txt'

		(( $CHANGELOG_DOWNLOADED )) || for i in "${!aURL_MIRROR_CHANGELOG[@]}"
		do

			G_DIETPI-NOTIFY 2 "Checking mirror: ${aURL_MIRROR_CHANGELOG[$i]}"
			if curl -sSfL "${aURL_MIRROR_CHANGELOG[$i]}" > $fp_changelog; then

				CHANGELOG_DOWNLOADED=1
				break

			else

				G_DIETPI-NOTIFY 2 "No response from: ${aURL_MIRROR_CHANGELOG[$i]}"

			fi

		done

		if (( $CHANGELOG_DOWNLOADED )); then

			G_WHIP_VIEWFILE	$fp_changelog

		else

			G_WHIP_MSG 'Failed to download the changelog, please try again.'

		fi

	}

	Menu_Update(){

		while :
		do

			G_WHIP_BUTTON_CANCEL_TEXT='Exit'
			G_WHIP_MENU_ARRAY=(

				'' '●─ Update DietPi '
				'Update' ": Apply update to: v$COREVERSION_SERVER.$SUBVERSION_SERVER.$RCVERSION_SERVER"
				'' '●─ Additional Options '
				'Changelog' ': View recent changelog and patch notes.'
				'Backup' ': Create a system backup before updating.'

			)

			G_WHIP_DEFAULT_ITEM='Update'
			if G_WHIP_MENU "Update available:\n - $INFO_CURRENT_VERSION\n - $INFO_SERVER_VERSION\n
Please select 'Update' option to apply the update."; then

				if [[ $G_WHIP_RETURNED_VALUE == 'Update' ]]; then

					G_WHIP_SIZE_X_MAX=80
					G_WHIP_YESNO ">----------------------------------Notice----------------------------------<
- A benefit of DietPi is: We use standard Linux (Debian) configurations and commands.
- A potential downside is: We can't possibly accommodate or predict all modification to Linux configurations files by the end user, outside of DietPi programs, during updates.\n
Although we test the updates thoroughly, if you have made any custom changes to Linux configuration files outside of the DietPi programs, an update may trigger a potential issue.
>--------------------------------------------------------------------------<\n
Do you wish to continue and update DietPi to v$COREVERSION_SERVER.$SUBVERSION_SERVER.$RCVERSION_SERVER?" && return 0

				elif [[ $G_WHIP_RETURNED_VALUE == 'Changelog' ]]; then

					Get_View_Changelog

				elif [[ $G_WHIP_RETURNED_VALUE == 'Backup' ]]; then

					G_PROMPT_BACKUP

				fi

			else

				return 1 # Exit

			fi

		done

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////
	#----------------------------------------------------------------
	G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Checking for available DietPi update'
	#----------------------------------------------------------------
	# Select mirror and download server version info
	Get_Server_Version || exit 1
	#----------------------------------------------------------------
	# If requested, reduce current subversion by 1 to reapply last update
	if (( $INPUT == -1 )); then

		((G_DIETPI_VERSION_SUB--))
		G_DIETPI_VERSION_RC=0
		INFO_VERSIONS_UPDATE
		G_DIETPI-NOTIFY 2 "Repatch was requested: Subversion reduced to \e[33m\"$G_DIETPI_VERSION_SUB\"\e[90m to reapply the last update"
		INPUT=1

	fi
	#----------------------------------------------------------------
	# Check for DietPi update and in case store result to /run/dietpi/.update_available for use by DietPi-Banner
	# Run update if no check-only input
	if Check_DietPi_Update && (( $INPUT != 2 )); then

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Checking for update pre-requirements'

		# Verify userdata location
		G_CHECK_USERDATA

		# Check for sufficient free space
		G_CHECK_FREESPACE / 100 || exit 1

		#----------------------------------------------------------------
		# Noninteractive update or ask user
		if (( $INPUT == 1 )) || Menu_Update; then

			# Disable powersaving on main screen
			setterm -blank 0 -powersave off 2> /dev/null

			# Stop Services
			/boot/dietpi/dietpi-services stop

			# Run_DietPi_Update: https://github.com/MichaIng/DietPi/issues/1877#issuecomment-403866204
			# - Log to file by redirecting to subshell instead of piping, else G_EXEC cannot exit the script via "kill -INT $$": https://github.com/MichaIng/DietPi/issues/3127
			Run_DietPi_Update &> >(tee $FP_LOG); wait $!

			# Mark 1st run update as completed
			Apply_1st_Run_Update_Success

			# Remove .update_available flag file
			rm /run/dietpi/.update_available

			G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Completed'
			G_DIETPI-NOTIFY 2 "$INFO_CURRENT_VERSION"
			G_DIETPI-NOTIFY 2 "$INFO_SERVER_VERSION"

			# Update DietPi-Survey
			/boot/dietpi/dietpi-survey 1

			# Failsafe: Force sync to disk
			sync

			# Start services only on finished install state, else dietpi-software will follow immediately
			(( $G_DIETPI_INSTALL_STAGE == 2 )) && /boot/dietpi/dietpi-services restart

		fi
		#----------------------------------------------------------------
		# Desktop run, exit key prompt
		pgrep 'lxsession' > /dev/null && read -rp 'Press any key to exit DietPi-Update...'
		exit 0

	fi

	# Check for APT updates and in case store result to /run/dietpi/.apt_updates for use by DietPi-Banner
	mode=$(sed -n '/^[[:blank:]]*CONFIG_CHECK_APT_UPDATES=/{s/^[^=]*=//p;q}' /boot/dietpi.txt)
	[[ -f '/run/dietpi/.apt_updates' ]] && rm /run/dietpi/.apt_updates
	[[ $mode != 0 ]] && G_EXEC_NOHALT=1 G_AGUP && count=$(apt -qq list --upgradeable 2> /dev/null | wc -l) && (( $count )) && echo "$count" > /run/dietpi/.apt_updates
	[[ $mode == 2 ]] && (( $count )) && G_EXEC_NOHALT=1 G_AGUG &> >(tee /var/tmp/dietpi/logs/dietpi-upgrade_apt.log)
	#----------------------------------------------------------------
	exit 0
	#----------------------------------------------------------------
}
