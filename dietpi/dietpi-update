#!/bin/bash
#Load the whole script into memory.
{
	#////////////////////////////////////
	# DietPi Update
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	#////////////////////////////////////
	#
	# Info:
	# - Updates DietPi from Git
	# - Uses patch_file for online patching
	#
	# Usage:
	# - dietpi-update    = Normal
	# - dietpi-update 1  = noninteractive update
	# - dietpi-update 2  = Check for updates. print server_version to /DietPi/dietpi/.update_available (-1=new image required)
	# - dietpi-update -1 = Include reapplying the current subversion patch, e.g. to update testing branch
	#////////////////////////////////////

	#Import DietPi-Globals ---------------------------------------------------------------
	. /DietPi/dietpi/func/dietpi-globals
	export G_PROGRAM_NAME='DietPi-Update'
	G_CHECK_ROOT_USER
	G_CHECK_ROOTFS_RW
	G_INIT
	#Import DietPi-Globals ---------------------------------------------------------------

	INPUT=0
	disable_error=1 G_CHECK_VALIDINT $1 && INPUT=$1

	#/////////////////////////////////////////////////////////////////////////////////////
	#GIT Owner
	#/////////////////////////////////////////////////////////////////////////////////////
	GITFORKOWNER="$(grep -m1 '^[[:blank:]]*DEV_GITOWNER=' /DietPi/dietpi.txt | sed 's/^[^=]*=//')"
	[[ ! $GITFORKOWNER ]] && GITFORKOWNER='Fourdee'

	#/////////////////////////////////////////////////////////////////////////////////////
	#UPDATE Vars
	#/////////////////////////////////////////////////////////////////////////////////////
	FP_LOG='/var/tmp/dietpi/logs/dietpi-update.log'
	FP_TMP_LOG="/tmp/$G_PROGRAM_NAME/dietpi-update.log"
	DIETPIUPDATE_VERSION_CORE=6 # Version of dietpi-update / set server_version-6 line one to value++ and obsolete previous dietpi-update scripts

	CHANGELOG_DOWNLOADED=0 #Prevent redownload of changelog if already done in this session

	SERVER_ONLINE=0
	UPDATE_AVAILABLE=0
	UPDATE_REQUIRESNEWIMAGE=0
	RUN_UPDATE=0

	COREVERSION_SERVER=0
	SUBVERSION_SERVER=0
	RCVERSION_SERVER=0

	INFO_CURRENT_VERSION=''
	INFO_SERVER_VERSION=''
	INFO_VERSIONS_UPDATE(){

		INFO_CURRENT_VERSION="Current Version : v$G_DIETPI_VERSION_CORE.$G_DIETPI_VERSION_SUB.$G_DIETPI_VERSION_RC"
		INFO_SERVER_VERSION="Latest Version  : v$COREVERSION_SERVER.$SUBVERSION_SERVER.$RCVERSION_SERVER"

	}

	URL_MIRROR_INDEX=0
	URL_MIRROR_SERVERVERSION=(

		"https://raw.githubusercontent.com/$GITFORKOWNER/DietPi/$G_GITBRANCH/dietpi/server_version-6"
		"https://dietpi.com/downloads/dietpi-update_mirror/$G_GITBRANCH/server_version-6"

	)

	URL_MIRROR_ZIP=(

		"https://github.com/$GITFORKOWNER/DietPi/archive/$G_GITBRANCH.zip"
		"https://dietpi.com/downloads/dietpi-update_mirror/$G_GITBRANCH/DietPi-$G_GITBRANCH.zip"

	)

	URL_MIRROR_CHANGELOG=(

		"https://raw.githubusercontent.com/$GITFORKOWNER/DietPi/$G_GITBRANCH/CHANGELOG.txt"
		"https://dietpi.com/downloads/dietpi-update_mirror/$G_GITBRANCH/CHANGELOG.txt"

	)

	Get_Server_Version(){

		#Get server version file
		for ((i=0; i<${#URL_MIRROR_SERVERVERSION[@]}; i++))
		do

			URL_MIRROR_INDEX=$i

			G_DIETPI-NOTIFY 2 "Checking Mirror : ${URL_MIRROR_SERVERVERSION[$i]}"
			curl -fk -L "${URL_MIRROR_SERVERVERSION[$i]}" > server_version
			if (( ! $? )); then

				#Get server Version info
				COREVERSION_SERVER=$(sed -n 1p server_version)
				SUBVERSION_SERVER=$(sed -n 2p server_version)
				#Master branch is always X.X.0. RC versions limited to beta/dev branches
				if [[ $G_DEV_GITBRANCH != 'master' ]]; then

					RCVERSION_SERVER=$(sed -n 3p server_version)

				fi

				#Check if server_version is a valid interger.
				if disable_error=1 G_CHECK_VALIDINT $SUBVERSION_SERVER; then

					SERVER_ONLINE=1
					G_DIETPI-NOTIFY 0 "Using update server: ${URL_MIRROR_SERVERVERSION[$i]}"
					INFO_VERSIONS_UPDATE
					break

				else

					G_DIETPI-NOTIFY 2 'Invalid server version and/or update file unavailable'

				fi

			else

				G_DIETPI-NOTIFY 2 "No response from: ${URL_MIRROR_SERVERVERSION[$i]}"

			fi

		done

	}

	Check_Update_Available(){

		#Clear previous .update_available file
		rm /DietPi/dietpi/.update_available &> /dev/null

		#Server online?
		if (( $SERVER_ONLINE )); then

			#Update Requires new image?
			if (( $DIETPIUPDATE_VERSION_CORE < $COREVERSION_SERVER )); then

				UPDATE_REQUIRESNEWIMAGE=1
				echo '-1' > /DietPi/dietpi/.update_available

			#Update available
			elif (( $G_DIETPI_VERSION_SUB < $SUBVERSION_SERVER || $G_DIETPI_VERSION_RC < $RCVERSION_SERVER )); then

				UPDATE_AVAILABLE=1
				echo ''
				G_DIETPI-NOTIFY 0 'Update available'
				G_DIETPI-NOTIFY 2 "$INFO_CURRENT_VERSION"
				G_DIETPI-NOTIFY 2 "$INFO_SERVER_VERSION"

				#Write update available version to file.
				echo "$COREVERSION_SERVER.$SUBVERSION_SERVER.$RCVERSION_SERVER" > /DietPi/dietpi/.update_available

			fi

		else

			G_DIETPI-NOTIFY 1 'Unable to access update servers. Please check your connection, then run dietpi-update again.'
			exit 1

		fi

	}

	Get_View_Changelog(){

		local fp_changelog='CHANGELOG.txt'

		if (( ! $CHANGELOG_DOWNLOADED )); then

			for ((i=0; i<${#URL_MIRROR_CHANGELOG[@]}; i++))
			do

				G_DIETPI-NOTIFY 2 "Checking Mirror : ${URL_MIRROR_CHANGELOG[$i]}"
				wget "${URL_MIRROR_CHANGELOG[$i]}"
				if (( ! $? )); then

					CHANGELOG_DOWNLOADED=1
					break

				else

					G_DIETPI-NOTIFY 2 "No response from: ${URL_MIRROR_CHANGELOG[$i]}"

				fi

			done

		fi

		if (( $CHANGELOG_DOWNLOADED )); then

			G_WHIP_VIEWFILE	$fp_changelog

		else

			G_WHIP_MSG "Failed to download $fp_changelog, please try again."

		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# MENUS
	#/////////////////////////////////////////////////////////////////////////////////////
	Menu_Update(){

		while :
		do

			G_WHIP_BUTTON_CANCEL_TEXT='Exit'
			G_WHIP_MENU_ARRAY=(

				'' '●─ Update DietPi '
				'Update' ": Apply $COREVERSION_SERVER.$SUBVERSION_SERVER.$RCVERSION_SERVER update."
				'' '●─ Additional Options '
				'Changelog' ': View the changelog and patch notes.'
				'Backup' ': Create a system backup, before updating.'

			)

			G_WHIP_DEFAULT_ITEM='Update'
			G_WHIP_MENU "Update available:
 - Installed version : v$G_DIETPI_VERSION_CORE.$G_DIETPI_VERSION_SUB.$G_DIETPI_VERSION_RC
 - Latest version    : v$COREVERSION_SERVER.$SUBVERSION_SERVER.$RCVERSION_SERVER

Please select 'Update' option to apply the update."
			if (( $? == 0 )); then

				if [[ ${G_WHIP_RETURNED_VALUE,,} == 'update' ]]; then

					G_WHIP_YESNO "
------------------------Notice------------------------
The benefit of DietPi is we use standard linux configurations and commands. The downside is we can't possibly accommodate or predict, every modifcation to Linux configurations files by the end user, during the update.
Although we test the updates thoroughly, if you have made custom changes to Linux configuration files, outside of the DietPi programs, an update may trigger a potential issue.
------------------------------------------------------

Do you wish to continue and update DietPi to v$COREVERSION_SERVER.$SUBVERSION_SERVER?"
					if (( $? == 0 )); then

						RUN_UPDATE=1
						break

					fi

				elif [[ ${G_WHIP_RETURNED_VALUE,,} == 'changelog' ]]; then

					Get_View_Changelog

				elif [[ ${G_WHIP_RETURNED_VALUE,,} == 'backup' ]]; then

					G_BACKUP

				fi

			else

				break

			fi

		done

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Update DietPi
	#/////////////////////////////////////////////////////////////////////////////////////

	Run_Update(){

		#Update APT packages
		G_AGUP
		G_AGUG

		#git clone Zip method (no need to install GIT)
		curl -k -L "${URL_MIRROR_ZIP[$URL_MIRROR_INDEX]}" > update.zip
		if (( ! $? )); then

			l_message='Unpack update archieve' G_RUN_CMD unzip update.zip
			rm update.zip &> /dev/null

			#Remove setting files from git that are not to be updated on client
			rm DietPi-"$G_GITBRANCH"/dietpi/.* &> /dev/null

			#Remove folders of "non-critical scripts" before updating them. (eg: so we dont need to patch for /conf/* file removals)
			# rm -R /DietPi/dietpi/conf #:https://github.com/Fourdee/DietPi/issues/905#issuecomment-298241622
			# rm -R /DietPi/dietpi/func
			# rm -R /DietPi/dietpi/misc

			l_message='Copy DietPi core files to ramdisk' G_RUN_CMD cp -Rf DietPi-"$G_GITBRANCH"/dietpi /DietPi/
			l_message='Copy rootfs files in place' G_RUN_CMD cp -Rf DietPi-"$G_GITBRANCH"/rootfs/. /

			l_message='Set execute permissions for DietPi scripts' G_RUN_CMD chmod -R +x /DietPi /etc/cron.*/dietpi /var/lib/dietpi/services
			systemctl daemon-reload

			#Verify/update dietpi.txt entries:
			/DietPi/dietpi/func/dietpi-set_software verify_dietpi.txt

			G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'DietPi-Update Updating DietPi'
			G_DIETPI-NOTIFY 2 "$INFO_CURRENT_VERSION"
			G_DIETPI-NOTIFY 2 "$INFO_SERVER_VERSION"

			# - Subversion update, run patch
			while (( $G_DIETPI_VERSION_SUB < $SUBVERSION_SERVER )); do

				G_DIETPI-NOTIFY 2 "Patching $G_DIETPI_VERSION_CORE.$G_DIETPI_VERSION_SUB.$G_DIETPI_VERSION_RC to $G_DIETPI_VERSION_CORE.$(( $G_DIETPI_VERSION_SUB + 1 )).$G_DIETPI_VERSION_RC"
				/DietPi/dietpi/patch_file $G_DIETPI_VERSION_SUB
				export G_DIETPI_VERSION_SUB=$(( $G_DIETPI_VERSION_SUB + 1 ))
				export G_DIETPI_VERSION_RC=$RCVERSION_SERVER #Cancel any RC updates, as subversions override it

			done

			# - RC update, rerun current subversion as patch.
			while (( $G_DIETPI_VERSION_RC < $RCVERSION_SERVER )); do

				G_DIETPI-NOTIFY 2 "Patching $G_DIETPI_VERSION_CORE.$G_DIETPI_VERSION_SUB.$G_DIETPI_VERSION_RC to $G_DIETPI_VERSION_CORE.$G_DIETPI_VERSION_SUB.$RCVERSION_SERVER"
				/DietPi/dietpi/patch_file $(( $G_DIETPI_VERSION_SUB - 1 )) #rerun current subversion patch for RC's
				export G_DIETPI_VERSION_RC=$RCVERSION_SERVER

			done

			INFO_VERSIONS_UPDATE

			#Update Local Version ID
			echo -e "$G_DIETPI_VERSION_CORE\n$G_DIETPI_VERSION_SUB\n$G_DIETPI_VERSION_RC" > /DietPi/dietpi/.version
			G_DIETPI-NOTIFY 0 "Patch v$G_DIETPI_VERSION_CORE.$G_DIETPI_VERSION_SUB.$G_DIETPI_VERSION_RC completed\n"

			#Remove Patch files.
			rm /DietPi/dietpi/patch_file &> /dev/null
			rm /DietPi/dietpi/server_version &> /dev/null

		#Unable to download file.
		else

			G_DIETPI-NOTIFY 1 'Download failed, unable to run update. Please try running dietpi-update again.'
			exit 1

		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////
	#----------------------------------------------------------------
	#Inform user
	G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Checking for DietPi updates'
	#----------------------------------------------------------------
	#Get versions
	Get_Server_Version
	#----------------------------------------------------------------
	#Check if update is available
	#	Reapply current subversion patch, e.g. when using testing branch.
	if (( $INPUT == -1 )); then

		if (( $G_DIETPI_VERSION_SUB < 0 )); then

			G_DIETPI-NOTIFY 1 'Repatch was requested, but will be skipped, as your device seems to be on lowest subversion already'

		else

			G_DIETPI-NOTIFY 0 'Repatch was requested: Update will reapply the current subversion patch'
			export G_DIETPI_VERSION_SUB=$((G_DIETPI_VERSION_SUB-1))

		fi

		INPUT=1

	fi
	Check_Update_Available
	#----------------------------------------------------------------
	# $INPUT == 2: Check for updates only. Send result to global file for use by dietpi-banner.
	if (( $INPUT != 2 )); then

		#Server offline
		if (( ! $SERVER_ONLINE )); then

			G_WHIP_MSG 'Error:\n\nhttps://github.com is either offline, or, unable to connect\n\nNo updates applied.'

		#Update requires new DietPi image
		elif (( $UPDATE_REQUIRESNEWIMAGE )); then

			G_WHIP_MSG "New image required\n\nThe installed version of DietPi is now obsolete and cannot be updated.\n\n Please download the latest DietPi image:\n - https://dietpi.com/downloads/images \n\n - $INFO_CURRENT_VERSION\n - $INFO_SERVER_VERSION"

			G_DIETPI-NOTIFY 1 'Your version of DietPi is now obsolete and cannot be updated.'
			echo -e "Please download the latest DietPi image:\n - https://dietpi.com/download \n\n - $INFO_CURRENT_VERSION\n - $INFO_SERVER_VERSION\n "

		#Update available
		elif (( $UPDATE_AVAILABLE )); then

			# Userdata location verify
			G_CHECK_USERDATA

			#Insufficient free space
			G_CHECK_FREESPACE / 500 || exit 1

			#Noninteractive update
			if (( $INPUT == 1 )); then

				RUN_UPDATE=1
				G_DIETPI-NOTIFY 0 'Update is being applied, please wait...'

			#Ask for update
			else

				Menu_Update

			fi

		#No updates
		else

			echo ''
			G_DIETPI-NOTIFY 2 "$INFO_CURRENT_VERSION"
			G_DIETPI-NOTIFY 2 "$INFO_SERVER_VERSION"
			G_DIETPI-NOTIFY 0 'No updates required, your DietPi installation is up to date.\n'
			sleep 2

		fi

		#----------------------------------------------------------------
		#Run Update
		if (( $RUN_UPDATE )); then

			#Stop Services
			/DietPi/dietpi/dietpi-services stop

			#Run update and patcher
			rm $FP_LOG &> /dev/null

			#Run_Update #: https://github.com/Fourdee/DietPi/issues/1877#issuecomment-403866204
			Run_Update > >(tee $FP_TMP_LOG) 2>&1
			mv $FP_TMP_LOG $FP_LOG

			#.update file stage (only used on 1st run of dietpi-software to check/apply updates, 0 tells dietpi-software to reboot)
			echo 0 > /DietPi/dietpi/.update_stage

			#Remove update_available file
			rm /DietPi/dietpi/.update_available &> /dev/null

			#Update DietPi-Survey
			/DietPi/dietpi/dietpi-survey 1

			#Sync to disk now: https://dietpi.com/phpbb/viewtopic.php?f=9&t=2591
			sync

			#Done
			G_DIETPI-NOTIFY 4 "$G_PROGRAM_NAME" 'Completed'
			G_DIETPI-NOTIFY 2 "$INFO_CURRENT_VERSION"
			G_DIETPI-NOTIFY 2 "$INFO_SERVER_VERSION"
			G_DIETPI-NOTIFY 0 'Update completed'

			# - Reboot prompt, if system is already installed (else, dietpi-software handles this for 1st run)
			if (( $G_DIETPI_INSTALL_STAGE == 1 )); then

				G_WHIP_YESNO "Update applied:\n\n - $INFO_CURRENT_VERSION\n\nA system reboot is required to finalize the update. Would you like to reboot the system now?"
				if (( $? == 0 )); then

					reboot

				fi

			fi

		fi

		#----------------------------------------------------------------
		#Desktop Run, exit key prompt
		if pgrep 'lxsession' &> /dev/null; then

			read -p 'Press any key to exit DietPi-Update...'

		fi

	fi
	#----------------------------------------------------------------
	exit 0
	#----------------------------------------------------------------
}
