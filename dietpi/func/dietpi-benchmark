#!/bin/bash
{
	#////////////////////////////////////
	# DietPi Function:
	# - benchmark
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	#////////////////////////////////////
	#
	# Info:
	# /DietPi/dietpi/func/dietpi-benchmark 0															= init vars for sourcing /var/lib/dietpi/dietpi-benchmark/results
	# FP_BENCHFILE=/location BENCH_FILESIZE=optional_size_MB /DietPi/dietpi/func/dietpi-benchmark 1		= Benchmark $FP_BENCHFILE filesystem read/write.
	# /DietPi/dietpi/func/dietpi-benchmark 2															= Run all benchmarks and upload to dietpi.com
	#
	#////////////////////////////////////

	#Import DietPi-Globals ---------------------------------------------------------------
	. /DietPi/dietpi/func/dietpi-globals
	export G_PROGRAM_NAME='DietPi-Benchmark'
	G_INIT
	#Import DietPi-Globals ---------------------------------------------------------------

	INPUT=$1
	if [[ ! $INPUT ]]; then

		G_DIETPI-NOTIFY 1 'Invalid command, please see sourcecode'
		exit 1

	fi

	#/////////////////////////////////////////////////////////////////////////////////////
	# Global
	#/////////////////////////////////////////////////////////////////////////////////////
	SURVEY_OPTED_IN=0

	SHOW_RESULTS=${SHOW_RESULTS:-1} #optional input | show results for individual tests?

	CPUBENCH_INT_MAX=${CPUBENCH_INT_MAX:-1000000} #optional input
	BENCH_CPU='Not tested'

	BENCH_FILESIZE=${BENCH_FILESIZE:-0} #optional input for automated
	FP_BENCHFILE=${FP_BENCHFILE:-/} #optional input for automated
	BENCH_ROOTFS_WRITE='Not tested'
	BENCH_ROOTFS_READ='Not tested'
	BENCH_RAM_WRITE='Not tested'
	BENCH_RAM_READ='Not tested'
	BENCH_CUSTOMFS_WRITE='Not tested'
	BENCH_CUSTOMFS_READ='Not tested'

	BENCH_CPU_TEMP_START='Not tested'
	BENCH_CPU_TEMP_END='Not tested'

	Load_Results(){

		if [[ -f /var/lib/dietpi/dietpi-benchmark/results ]]; then

			. /var/lib/dietpi/dietpi-benchmark/results

		fi

	}

	Save_Results(){

		mkdir -p /var/lib/dietpi/dietpi-benchmark
		cat << _EOF_ > /var/lib/dietpi/dietpi-benchmark/results
# -------------------------
# DietPi-Benchmark
# -------------------------
BENCH_HW_MODEL=$G_HW_MODEL
BENCH_CPU='$BENCH_CPU'
BENCH_ROOTFS_WRITE='$BENCH_ROOTFS_WRITE'
BENCH_ROOTFS_READ='$BENCH_ROOTFS_READ'
BENCH_RAM_WRITE='$BENCH_RAM_WRITE'
BENCH_RAM_READ='$BENCH_RAM_READ'
BENCH_CUSTOMFS_WRITE='$BENCH_CUSTOMFS_WRITE'
BENCH_CUSTOMFS_READ='$BENCH_CUSTOMFS_READ'
BENCH_CPU_TEMP_START='$BENCH_CPU_TEMP_START'
BENCH_CPU_TEMP_END='$BENCH_CPU_TEMP_END'
_EOF_

	}

	Update_Survey_Opted_Status(){

		if [[ -f /DietPi/dietpi/.dietpi-survey ]]; then

			SURVEY_OPTED_IN=$(sed -n 1p /DietPi/dietpi/.dietpi-survey)

		fi

	}

	CPU_Benchmark(){

		G_DIETPI-NOTIFY 0 "Running DietPi-CPU Benchmark with max value of 1000000 over $(nproc --all) cores, please wait..."

		cat << _EOF_ > $FP_TEMP/bench
#!/bin/bash
target_max_int=$CPUBENCH_INT_MAX
cores=$G_HW_CPU_CORES
int_split=\$((\$target_max_int / \$cores ))
aStart_Int=()
aEnd_Int=()

#Split the max int target based on total cores
for (( i=0; i<\$cores; i++ ))
do

    aEnd_Int[\$i]=\$(( (\$i + 1) * \$int_split ))
    aStart_Int[\$i]=\$(( \${aEnd_Int[\$i]} - \$int_split ))

    echo \${aStart_Int[\$i]} \${aEnd_Int[\$i]}

done


Run_Bench()
{

    while (( \${aStart_Int[\$1]} < \${aEnd_Int[\$1]} ))
    do

        ((aStart_Int[\$1]++))

    done

}

#Launch benchmark threads
for (( i=0; i<\$cores; i++ ))
do

    Run_Bench \$i &

done

#Wait for jobs to finish
for job in \`jobs -p\`
do
    echo \$job
    wait \$job
done

#delete[]
unset aStart_Int
unset aEnd_Int

_EOF_
		chmod +x $FP_TEMP/bench

		sync
		sleep 1

		BENCH_CPU_TEMP_START=$(G_OBTAIN_CPU_TEMP)

		{ time -p $FP_TEMP/bench; } 2> $FP_TEMP/bench_result

		BENCH_CPU_TEMP_END=$(G_OBTAIN_CPU_TEMP)
		BENCH_CPU=$( grep -m1 'real' $FP_TEMP/bench_result | awk '{print $2}' )

		if (( $SHOW_RESULTS )); then

			G_WHIP_MSG "CPU Benchmark Results:\n
 - Total time     = $BENCH_CPU Seconds
 - Value to reach = $CPUBENCH_INT_MAX
 - CPU temps      = Start: ${BENCH_CPU_TEMP_START}'c | End: ${BENCH_CPU_TEMP_END}'c\n\n
NB: A lower 'Total time' is faster"

		fi

	}

	Filesystem_Benchmark(){

		local benchmark_file_name='benchmark.file'
		local min_benchmark_size=10
		local max_benchmark_size=$(( $(G_CHECK_FREESPACE $FP_BENCHFILE) - 100 ))
		if (( $max_benchmark_size > 1000 )); then

			max_benchmark_size=1000

		fi

		if [[ $FP_BENCHFILE != *'/' ]]; then

			FP_BENCHFILE+='/'

		fi
		FP_BENCHFILE+=$benchmark_file_name

		printf '\ec' # clear current terminal screen

		#Obtain user benchmark size.
		if (( $BENCH_FILESIZE == 0 )); then

			G_WHIP_DEFAULT_ITEM=$min_benchmark_size
			G_WHIP_INPUTBOX "Please enter a filesize test value (MB). A value of 100 is recommended.\n- Minimum value: $min_benchmark_size\n- Maximum possible value: $max_benchmark_size"
			if (( $? == 0 )); then

				BENCH_FILESIZE=$G_WHIP_RETURNED_VALUE

			fi

		fi

		#Run benchmark
		if G_CHECK_VALIDINT $BENCH_FILESIZE $min_benchmark_size $max_benchmark_size; then

			G_DIETPI-NOTIFY 2 "Performing Read/Write benchmark on $FP_BENCHFILE, please wait..."

			G_DIETPI-NOTIFY 2 "Testing Seq Write Speed ($BENCH_FILESIZE MB)"

			sleep 1

			local bench_write_result=$(dd bs=4K count=$(( $BENCH_FILESIZE * 1024 / 4 )) if=/dev/zero of=$FP_BENCHFILE conv=fdatasync 2>&1 | grep 'copied')
			#	Convert results manually from bytes and time to MB/s
			local temp_bytes_result=$(echo "$bench_write_result" | awk '{print $1}')
			local temp_time_result=$(echo "$bench_write_result" | awk '{print $8}')
			bench_write_result=$(bc -l <<< "scale=0; ( $temp_bytes_result / $temp_time_result ) / 1000 / 1000")

			# - Clear cache
			sync
			echo 3 > /proc/sys/vm/drop_caches
			G_DIETPI-NOTIFY 2 "Testing Seq Read Speed ($BENCH_FILESIZE MB)"

			sleep 1

			local bench_read_result=$(dd bs=4K count=$(( $BENCH_FILESIZE * 1024 / 4 )) if=$FP_BENCHFILE of=/dev/null conv=fdatasync 2>&1 | grep 'copied')
			#	Convert results manually from bytes and time to MB/s
			temp_bytes_result=$(echo "$bench_read_result" | awk '{print $1}')
			temp_time_result=$(echo "$bench_read_result" | awk '{print $8}')
			bench_read_result=$(bc -l <<< "scale=0; ( $temp_bytes_result / $temp_time_result ) / 1000 / 1000")

			# - RootFS
			if [[ $FP_BENCHFILE == '/'$benchmark_file_name ]]; then

				BENCH_ROOTFS_WRITE=$bench_write_result
				BENCH_ROOTFS_READ=$bench_read_result

			# - RAM
			elif [[ $FP_BENCHFILE == '/tmp/'$benchmark_file_name ]]; then

				BENCH_RAM_WRITE=$bench_write_result
				BENCH_RAM_READ=$bench_read_result

			# - Custom
			else

				BENCH_CUSTOMFS_WRITE=$bench_write_result
				BENCH_CUSTOMFS_READ=$bench_read_result

			fi

			if (( $SHOW_RESULTS )); then

				G_WHIP_MSG "Filesystem Benchmark Results:\n
 - Filepath  = $FP_BENCHFILE
 - Test size = ${BENCH_FILESIZE} MB
 - WRITE     = ${bench_write_result} MB/s
 - READ      = ${bench_read_result} MB/s"

			fi

			rm $FP_BENCHFILE &> /dev/null

		fi

	}

	Benchmark_Survey(){

		SHOW_RESULTS=0
		mkdir -p /var/lib/dietpi/dietpi-benchmark

		G_WHIP_YESNO "$G_PROGRAM_NAME will now run the following benchmarks:\n - CPU performance\n - RootFS read/write performance\n - RAM read/write performance.\nThe test duration will depend on hardware specs, however, most devices will not exceed 40 seconds.\n\nOnce completed, your scores will be uploaded online to our servers (via the DietPi-Survey). You can then compare results against other users and hardware using the following link:\n - https://dietpi.com/survey#benchmark\n\nPlease select 'Ok' to begin the benchmark tests."
		if (( $? == 1 )); then

			G_DIETPI-NOTIFY 0 'Benchmark aborted'
			exit 0

		fi

		G_DIETPI-NOTIFY 0 'Running benchmark suite tests for upload to DietPi-Survey'

		#CPU
		if (( $G_HW_CPU_CORES <= 2 )); then

			G_WHIP_YESNO "We have detected a low CPU core count ($G_HW_CPU_CORES). The tests may take upto 5 minutes to complete (eg: RaspberryPi Zero).\n\nDo you wish to continue?"
			if (( $? == 1 )); then

				exit 0

			fi

		fi

		CPU_Benchmark

		#FS/RAM
		BENCH_FILESIZE=10

		# - RAM
		FP_BENCHFILE='/tmp'
		Filesystem_Benchmark

		# - Rootfs
		FP_BENCHFILE='/'
		Filesystem_Benchmark

		Save_Results

		# - Upload
		Update_Survey_Opted_Status

		local survey_sent=0
		if (( $SURVEY_OPTED_IN )); then

			/DietPi/dietpi/dietpi-survey 1
			if (( $? == 0 )); then

				survey_sent=1

			fi

		else

			while (( ! $SURVEY_OPTED_IN ))
			do

				G_WHIP_YESNO 'You are not currently opted in for the DietPi-Survey. To upload and compare your results against other users, you must opt in.\n\nWould you like to run DietPi-Survey now, allowing you to opt in?'
				if (( $? == 0 )); then

					/DietPi/dietpi/dietpi-survey
					if (( $? == 0 )); then

						survey_sent=1

					fi

				else

					G_WHIP_MSG 'Upload of benchmark scores aborted. You must opt in to the DietPi-Survey, before this can be completed.'
					break

				fi

				Update_Survey_Opted_Status

			done

		fi

		if (( $survey_sent )); then

			# SHOW_RESULTS=1

			G_WHIP_MSG "Benchmarks completed:
 - CPU Performance : Duration = $BENCH_CPU seconds (lower is faster)
 - CPU Temp        : Idle = ${BENCH_CPU_TEMP_START}'c | Full load = ${BENCH_CPU_TEMP_END}'c
 - RootFS          : Write = $BENCH_ROOTFS_WRITE MB/s | Read = $BENCH_ROOTFS_READ MB/s
 - RAM             : Write = $BENCH_RAM_WRITE MB/s | Read = $BENCH_RAM_READ MB/s

Compare these results online with other users, using the link below:
 - https://dietpi.com/survey#benchmark"

		elif (( $SURVEY_OPTED_IN )); then

			G_WHIP_MSG 'Benchmark upload has failed. Please try again later.\n\nIf problems persist, please report this to the DietPi team.'

		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////
	#Init vars for sourcing
	if (( $INPUT == 0 )); then

		Save_Results

	#Run benchmarks
	else

		#-----------------------------------------------------------------------------------
		/DietPi/dietpi/dietpi-services stop
		#-----------------------------------------------------------------------------------
		#Reuse existing results if done
		Load_Results
		#-----------------------------------------------------------------------------------
		if (( $INPUT == 1 )); then

			Filesystem_Benchmark

		elif (( $INPUT == 2 )); then

			Benchmark_Survey

		fi
		#-----------------------------------------------------------------------------------
		#Export results data for other scripts:
		Save_Results
		#-----------------------------------------------------------------------------------
		/DietPi/dietpi/dietpi-services start
		#-----------------------------------------------------------------------------------

	fi
	#-----------------------------------------------------------------------------------
	exit 0
	#-----------------------------------------------------------------------------------

}
