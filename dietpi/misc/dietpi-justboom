#!/bin/bash
{
	#////////////////////////////////////
	# DietPi JustBoom
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	#////////////////////////////////////
	#
	# Info:
	# - Tweak your high-end JustBoom soundcard
	# Usage:
	# - /DietPi/dietpi/misc/dietpi-justboom
	#////////////////////////////////////

	#Import DietPi-Globals ---------------------------------------------------------------
	. /DietPi/dietpi/func/dietpi-globals
	G_CHECK_ROOT_USER
	G_CHECK_ROOTFS_RW
	export G_PROGRAM_NAME='DietPi-Justboom'
	G_INIT
	#Import DietPi-Globals ---------------------------------------------------------------

	#Prereq ALSA installed from dietpi-software
	if ! dpkg --get-selections | grep -q '^alsa-utils[[:space:]]'; then

		G_WHIP_MSG "$G_PROGRAM_NAME requires ALSA to be installed, before it can be run.\n\nPlease install ALSA, or ideally, an audio application through 'dietpi-software' before use."
		exit 1

	elif [ ! -f /etc/asound.conf ]; then

		G_WHIP_MSG "$G_PROGRAM_NAME requires an active soundcard to be installed, before it can be run.\n\nPlease use 'dietpi-config' to setup a soundcard for this system."
		exit 1

	fi

	#/////////////////////////////////////////////////////////////////////////////////////
	#Script Globals
	#/////////////////////////////////////////////////////////////////////////////////////
	EQ_ENABLED=0
	SOUNDCARD_CURRENT=0
	SOUNDCARD_CARD_INDEX=0
	if [ -f /etc/asound.conf ]; then

		SOUNDCARD_CARD_INDEX=$(grep -m1 'card ' /etc/asound.conf | awk '{print $2}')

	fi

	# - MPD
	OUTPUT_FREQ_CURRENT=0
	OUTPUT_FREQ_TARGET=0
	OUTPUT_BITRATE_CURRENT=0
	OUTPUT_BITRATE_TARGET=0
	SOXR_ENABLED=0
	SOXR_QUALITY=0
	MPD_AUDIO_BUFFER_SIZE=0

	FP_MPD_CONF='/etc/mpd.conf'
	MPD_INSTALLED=0

	if [ -f "$FP_MPD_CONF" ]; then

		MPD_INSTALLED=1

	fi

	# - CAVA
	CAVA_ENABLED=1
	CAVA_FRAMERATE=0
	CAVA_COLOUR_FG=0
	CAVA_COLOUR_BG=0
	CAVA_BAR_GRAVITY=0
	CAVA_BAR_WIDTH=0
	CAVA_MAINSCREENINUSE_DISPLAYED=0

	FP_CAVA_CONF="$HOME/.config/cava/config"
	CAVA_INSTALLED=0

	if [ -f "$FP_CAVA_CONF" ]; then

		CAVA_INSTALLED=1

	fi

	Reset_Globals(){


		#ALSA EQ levels
		rm $HOME/.alsaequal.bin &> /dev/null

		#MPD
		OUTPUT_FREQ_TARGET=44100
		OUTPUT_BITRATE_TARGET=16
		SOXR_ENABLED=0
		SOXR_QUALITY='very high'
		EQ_ENABLED=0
		MPD_AUDIO_BUFFER_SIZE=2048

		# - Reset CAVA config
		cp /DietPi/dietpi/conf/cava.conf $HOME/.config/cava/config

		CAVA_ENABLED=1
		CAVA_FRAMERATE=30
		CAVA_COLOUR_FG='green'
		CAVA_COLOUR_BG='black'
		CAVA_BAR_GRAVITY='1.75'
		CAVA_BAR_WIDTH=2

		# - Save changes
		Write_Apply_Globals

	}

	Read_Globals(){

		SOUNDCARD_CURRENT=$(cat /DietPi/dietpi.txt | grep -m1 'CONFIG_SOUNDCARD=' | sed 's/.*=//')

		EQ_ENABLED=$(cat /etc/asound.conf | grep -ci -m1 '^pcm.plugequal')

		#MPD specific
		if (( $MPD_INSTALLED )); then

			OUTPUT_FREQ_CURRENT=$(cat $FP_MPD_CONF | grep -m1 '^format' | sed 's/\"//g' | sed 's/:/ /g' | awk '{print $2}')
			OUTPUT_FREQ_TARGET=$OUTPUT_FREQ_CURRENT
			OUTPUT_BITRATE_CURRENT=$(cat $FP_MPD_CONF | grep -m1 '^format' | sed 's/\"//g' | sed 's/:/ /g' | awk '{print $3}')
			OUTPUT_BITRATE_TARGET=$OUTPUT_BITRATE_CURRENT
			SOXR_ENABLED=$(cat $FP_MPD_CONF | grep -ci -m1 '^samplerate_converter \"soxr')
			SOXR_QUALITY=$(cat $FP_MPD_CONF | grep -m1 'samplerate_converter \"soxr' | sed 's/\"//g' | awk '{for(i=3;i<=NF;i++){printf "%s ", $i}; printf "\n"}' | sed 's/ *$//')
			MPD_AUDIO_BUFFER_SIZE=$(cat $FP_MPD_CONF | grep -m1 '^audio_buffer_size' | awk '{print $2}' | sed 's/\"//g')

		fi

		#CAVA specific
		if (( $CAVA_INSTALLED )); then

			CAVA_FRAMERATE=$(grep -m1 'framerate =' $FP_CAVA_CONF | awk '{print $NF}')
			CAVA_COLOUR_BG=$(grep -m1 'background =' $FP_CAVA_CONF | awk '{print $NF}')
			CAVA_COLOUR_FG=$(grep -m1 'foreground =' $FP_CAVA_CONF | awk '{print $NF}')
			CAVA_BAR_GRAVITY=$(grep -m1 'gravity =' $FP_CAVA_CONF | awk '{print $NF}')
			CAVA_BAR_WIDTH=$(grep -m1 'bar_width =' $FP_CAVA_CONF | awk '{print $NF}')

		fi

	}

	Write_Apply_Globals(){

		if (( $EQ_ENABLED )); then

			/DietPi/dietpi/func/dietpi-set_hardware soundcard "$SOUNDCARD_CURRENT"-eq

		else

			/DietPi/dietpi/func/dietpi-set_hardware soundcard "$SOUNDCARD_CURRENT"

		fi

		#MPD specific
		if (( $MPD_INSTALLED )); then

			# - Output freq/bit
			sed -i "/^format \"/c\format \"$OUTPUT_FREQ_TARGET:$OUTPUT_BITRATE_TARGET:2\"" "$FP_MPD_CONF"

			if (( $SOXR_ENABLED )); then

				sed -i "/samplerate_converter \"/c\samplerate_converter \"soxr $SOXR_QUALITY\"" "$FP_MPD_CONF"
				sed -i "/audio_output_format \"/c\audio_output_format \"$OUTPUT_FREQ_TARGET:$OUTPUT_BITRATE_TARGET:2\"" "$FP_MPD_CONF"

			else

				sed -i "/samplerate_converter \"/c\#samplerate_converter \"soxr $SOXR_QUALITY\"" "$FP_MPD_CONF"
				sed -i "/audio_output_format \"/c\#audio_output_format \"$OUTPUT_FREQ_TARGET:$OUTPUT_BITRATE_TARGET:2\"" "$FP_MPD_CONF"

			fi

			# - Buffer
			sed -i "/^audio_buffer_size \"/c\audio_buffer_size \"$MPD_AUDIO_BUFFER_SIZE\"" "$FP_MPD_CONF"

			systemctl restart mpd

		fi

		#CAVA specific
		if (( $CAVA_INSTALLED )); then

			G_CONFIG_INJECT 'framerate =' "framerate = $CAVA_FRAMERATE" "$FP_CAVA_CONF"
			G_CONFIG_INJECT 'background =' "background = $CAVA_COLOUR_BG" "$FP_CAVA_CONF"
			G_CONFIG_INJECT 'foreground =' "foreground = $CAVA_COLOUR_FG" "$FP_CAVA_CONF"
			G_CONFIG_INJECT 'gravity =' "gravity = $CAVA_BAR_GRAVITY" "$FP_CAVA_CONF"
			G_CONFIG_INJECT 'bar_width =' "bar_width = $CAVA_BAR_WIDTH" "$FP_CAVA_CONF"

			Cava_Start

		fi

		Read_Globals

	}

	Cava_Start(){

		killall -w cava &> /dev/null

		# - Running on current screen
		if (( $CAVA_ENABLED )); then

			if [ "$(tty)" = "/dev/tty1" ]; then

				# - display this warning once only
				if (( ! $CAVA_MAINSCREENINUSE_DISPLAYED )); then

					G_WHIP_MSG "Error:\n\nMain screen in use. To launch CAVA on the main screen, please exit $G_PROGRAM_NAME and run the following command:\n - cava\n\nNB: Press CTRL+C to exit cava."

					CAVA_MAINSCREENINUSE_DISPLAYED=1

				fi

			else

				setterm -blank 0 -powersave off <> /dev/fb2 >&0 2>&1 #Odroid 3.5 inch
				cava <> /dev/console >&0 2>&1 &

			fi

		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Whip
	#/////////////////////////////////////////////////////////////////////////////////////
	TARGETMENUID=0
	LAST_SELECTED_NAME=0

	Menu_Exit(){

		G_WHIP_SIZE_X_MAX=50
		G_WHIP_YESNO "Exit $G_PROGRAM_NAME?"
		if (( $? == 0 )); then

			#exit
			TARGETMENUID=-1

		else

			#Return to Main Menu
			TARGETMENUID=0

		fi

	}

	#TARGETMENUID=0
	Menu_Main(){

		Read_Globals

		local eq_enabled_text='[Off]'
		if (( $EQ_ENABLED )); then

			eq_enabled_text='[On]'

		fi

		local soxr_enabled_text='[Off]'
		if (( $SOXR_ENABLED )); then

			soxr_enabled_text='[On]'

		fi

		G_WHIP_MENU_ARRAY=()

		G_WHIP_MENU_ARRAY+=('' '●─ Global Options ')
		G_WHIP_MENU_ARRAY+=('ALSA Mixer' ': Launches ALSA Mixer, tweak sound card settings')
		G_WHIP_MENU_ARRAY+=('ALSA Output Info' ': View info on current ALSA playback stream')
		G_WHIP_MENU_ARRAY+=("EQ Enable" ": $eq_enabled_text | Select to toggle EQ")
		if (( $EQ_ENABLED )); then

			G_WHIP_MENU_ARRAY+=('EQ Configure' ': Launches AlsaMixer to configure EQ settings')

		fi

		G_WHIP_MENU_ARRAY+=("Reset" ": Reset all options to defaults")

		#Allo Piano 2.1 specials
		if (( $(echo -e "$SOUNDCARD_CURRENT" | grep -ci -m1 'piano-dac-plus') )); then

			G_WHIP_MENU_ARRAY+=('' '●─ Allo Piano 2.1 ')

			local dsp_filter=$(amixer -c $SOUNDCARD_CARD_INDEX sget "'DSP Program'" | grep 'Item0:' | sed 's/.*Item0: //')
			G_WHIP_MENU_ARRAY+=("DSP Filter" ": $dsp_filter")

			local digital_volume_int=$(amixer -c $SOUNDCARD_CARD_INDEX sget "'Digital'" | grep 'Front Left:' | awk '{print $4}')
			local digital_volume_db=$(amixer -c $SOUNDCARD_CARD_INDEX sget "'Digital'" | grep 'Front Left:' | awk '{print $6}' | tr -d '\[\]')
			local subwoofer_mode=$(amixer -c $SOUNDCARD_CARD_INDEX sget "'Subwoofer mode'" | grep 'Item0:' | sed 's/.*Item0: //')
			local subwoofer_volume_int=$(amixer -c $SOUNDCARD_CARD_INDEX sget "'Subwoofer'" | grep 'Front Left:' | awk '{print $4}')
			local subwoofer_volume_db=$(amixer -c $SOUNDCARD_CARD_INDEX sget "'Subwoofer'" | grep 'Front Left:' | awk '{print $6}' | tr -d '\[\]')
			local subwoofer_crossover_frequency=$(amixer -c $SOUNDCARD_CARD_INDEX sget "'Lowpass'" | grep 'Item0:' | sed 's/.*Item0: //')
			local dualoutput_mode=$(amixer -c $SOUNDCARD_CARD_INDEX sget "'Dual Mode'" | grep 'Item0:' | sed 's/.*Item0: //')

			G_WHIP_MENU_ARRAY+=("Master Volume" ": $digital_volume_int ($digital_volume_db)")

			G_WHIP_MENU_ARRAY+=("Dual Output Mode" ": $dualoutput_mode")
			G_WHIP_MENU_ARRAY+=("Subwoofer Mode" ": $subwoofer_mode")
			G_WHIP_MENU_ARRAY+=("Subwoofer Volume" ": $subwoofer_volume_int ($subwoofer_volume_db)")

			# - only active with subwoofer 2.1+ modes
			if [[ $subwoofer_mode != '2.0' ]]; then

				G_WHIP_MENU_ARRAY+=("Subwoofer Crossover" ": $subwoofer_crossover_frequency Hz")

			fi

		fi

		#MPD specific
		if (( $MPD_INSTALLED )); then

			G_WHIP_MENU_ARRAY+=('' '●─ MPD Specific ')
			G_WHIP_MENU_ARRAY+=("Output Frequency" ": $OUTPUT_FREQ_CURRENT Hz | Select to change")
			G_WHIP_MENU_ARRAY+=("Output BitRate" ": $OUTPUT_BITRATE_CURRENT Bit | Select to change")
			G_WHIP_MENU_ARRAY+=("Audio Buffer" ": $MPD_AUDIO_BUFFER_SIZE Bytes | Select to change")

			G_WHIP_MENU_ARRAY+=("SOXR Enable" ": $soxr_enabled_text | Select to toggle SOXR resampling")
			if (( $SOXR_ENABLED )); then

				G_WHIP_MENU_ARRAY+=("SOXR Quality" ": $SOXR_QUALITY | Select SOXR quality level")

			fi

		fi

		#CAVA specific
		if (( $CAVA_INSTALLED )); then

			G_WHIP_MENU_ARRAY+=('' '●─ CAVA Specific ')
			G_WHIP_MENU_ARRAY+=('Cava Start/Restart' ': Launch Cava on main screen')

			if (( $(ps aux | grep -ci -m1 '[c]ava') )); then

				G_WHIP_MENU_ARRAY+=('Cava Stop' ': Stop Cava')

			fi

			G_WHIP_MENU_ARRAY+=("Cava Framerate" ": $CAVA_FRAMERATE fps | Select to change")
			G_WHIP_MENU_ARRAY+=("Cava FG Colour" ": $CAVA_COLOUR_FG | Select to change")
			G_WHIP_MENU_ARRAY+=("Cava BG Colour" ": $CAVA_COLOUR_BG | Select to change")
			G_WHIP_MENU_ARRAY+=("Cava Bar Width" ": $CAVA_BAR_WIDTH | Select to change")
			G_WHIP_MENU_ARRAY+=("Cava Bar Gravity" ": $CAVA_BAR_GRAVITY | Select to change")

		fi

		G_WHIP_DEFAULT_ITEM="$LAST_SELECTED_NAME"
		G_WHIP_BUTTON_CANCEL_TEXT='Exit'
		G_WHIP_MENU 'Tweak your High-End Audiophile JustBoom (and others) sound card:'
		if (( $? == 0 )); then

			LAST_SELECTED_NAME="$G_WHIP_RETURNED_VALUE"

			if [ "$G_WHIP_RETURNED_VALUE" = "ALSA Output Info" ]; then

				G_DIETPI-NOTIFY 3 DietPi-JustBoom "ALSA Output Info"
				local stream_result=$(cat /proc/asound/card*/pcm0p/sub0/hw_params)
				echo -e "$stream_result"
				echo -e ""

				if [ "$stream_result" = "closed" ]; then

					G_DIETPI-NOTIFY 1 "Detailed info is only available when audio is being played, play some music first!"

				fi

				G_DIETPI-NOTIFY 0 "Completed, press any key to exit...\n"
				read -p "Press any key to exit..."

			elif [ "$G_WHIP_RETURNED_VALUE" = "Subwoofer Mode" ]; then

				G_WHIP_MENU_ARRAY=(

					'2.0' ': Disables Subwoofer output'
					'2.1' ': Enables Subwoofer output (mono)'
					'2.2' ': Enables Subwoofer output (stereo)'

				)

				G_WHIP_DEFAULT_ITEM="$subwoofer_mode"
				G_WHIP_MENU 'Please select a channel mode for Subwoofer output:'
				if (( $? == 0 )); then

					amixer -c $SOUNDCARD_CARD_INDEX sset 'Subwoofer mode' $G_WHIP_RETURNED_VALUE

				fi

			elif [ "$G_WHIP_RETURNED_VALUE" = "Dual Output Mode" ]; then

				G_WHIP_MENU_ARRAY=(

					'Dual-Mono' ': Enables Dual output (mono)'
					'Dual-Stereo' ': Enables Dual output (stereo)'

				)

				G_WHIP_DEFAULT_ITEM="$dualoutput_mode"
				G_WHIP_MENU 'Please select a channel mode for Subwoofer output:'
				if (( $? == 0 )); then

					amixer -c $SOUNDCARD_CARD_INDEX sset 'Dual Mode' $G_WHIP_RETURNED_VALUE

				fi

			elif [ "$G_WHIP_RETURNED_VALUE" = "Master Volume" ]; then

				G_WHIP_MENU_ARRAY=()

				for ((i=206; i>=0; i--))
				do

					if (( $i == 0 )); then

						G_WHIP_MENU_ARRAY+=($i 'Mute')

					elif (( $i == 206 )); then

						G_WHIP_MENU_ARRAY+=($i ': Max (-0.50dB)')

					else

						G_WHIP_MENU_ARRAY+=($i '')

					fi

				done

				G_WHIP_DEFAULT_ITEM="$digital_volume_int"
				G_WHIP_MENU 'Please select a volume level for Master output:'
				if (( $? == 0 )); then

					amixer -c $SOUNDCARD_CARD_INDEX sset 'Digital' ''$G_WHIP_RETURNED_VALUE''

				fi

			elif [ "$G_WHIP_RETURNED_VALUE" = "Subwoofer Volume" ]; then

				G_WHIP_MENU_ARRAY=()

				for ((i=206; i>=0; i--))
				do

					if (( $i == 0 )); then

						G_WHIP_MENU_ARRAY+=($i 'Mute')

					elif (( $i == 206 )); then

						G_WHIP_MENU_ARRAY+=($i ': Max (-0.50dB)')

					else

						G_WHIP_MENU_ARRAY+=($i '')

					fi

				done

				G_WHIP_DEFAULT_ITEM="$subwoofer_volume_int"
				G_WHIP_MENU 'Please select a volume level for Subwoofer output:'
				if (( $? == 0 )); then

					amixer -c $SOUNDCARD_CARD_INDEX sset 'Subwoofer' ''$G_WHIP_RETURNED_VALUE''

				fi

			elif [ "$G_WHIP_RETURNED_VALUE" = "Subwoofer Crossover" ]; then

				G_WHIP_MENU_ARRAY=(

					'60' 'Hz'
					'70' 'Hz'
					'80' 'Hz'
					'90' 'Hz (Default)'
					'100' 'Hz'
					'110' 'Hz'
					'120' 'Hz'
					'130' 'Hz'
					'140' 'Hz'
					'150' 'Hz'
					'160' 'Hz'
					'170' 'Hz'
					'180' 'Hz'
					'190' 'Hz'
					'200' 'Hz'

				)

				G_WHIP_DEFAULT_ITEM="$subwoofer_crossover_frequency"
				G_WHIP_MENU 'Please select the lowpass crossover frequency for Subwoofer:\n\nEverything below the selected freq will be output through subwoofer out, when subwoofer mode 2.1/2.2 is selected.'
				if (( $? == 0 )); then

					amixer -c $SOUNDCARD_CARD_INDEX sset 'Lowpass' $G_WHIP_RETURNED_VALUE

				fi

			elif [ "$G_WHIP_RETURNED_VALUE" = "DSP Filter" ]; then

				G_WHIP_MENU_ARRAY=(

					'FIR interpolation with de-emphasis' '(Default)'
					'Low latency IIR with de-emphasis' ''
					'High attenuation with de-emphasis' ''
					'Fixed process flow' ''
					'Ringing-less low latency FIR' ''

				)

				G_WHIP_DEFAULT_ITEM="$dsp_filter"
				G_WHIP_MENU 'Please select a DSP Filter:'
				if (( $? == 0 )); then

					amixer -c $SOUNDCARD_CARD_INDEX sset 'DSP Program' "$G_WHIP_RETURNED_VALUE"

				fi

			elif [ "$G_WHIP_RETURNED_VALUE" = "Cava Start/Restart" ]; then

				Cava_Start

			elif [ "$G_WHIP_RETURNED_VALUE" = "Cava Stop" ]; then

				killall -w cava

			elif [ "$G_WHIP_RETURNED_VALUE" = "Cava Framerate" ]; then

				G_WHIP_MENU_ARRAY=(

					'10' ': Lowest CPU usage'
					'20' ''
					'30' ': Default'
					'40' ''
					'50' ''
					'60' ''
					'80' ''
					'100' ''
					'120' ': Highest CPU usage'

				)

				G_WHIP_DEFAULT_ITEM="$CAVA_FRAMERATE"
				G_WHIP_MENU 'Please select a framerate:'
				if (( $? == 0 )); then

					CAVA_FRAMERATE=$G_WHIP_RETURNED_VALUE
					Write_Apply_Globals

				fi

			elif [ "$G_WHIP_RETURNED_VALUE" = "Cava Bar Width" ]; then

				G_WHIP_MENU_ARRAY=(

					'1' ': Thin (Increases total bar count)'
					'2' ': Default'
					'3' ''
					'4' ''
					'5' ''
					'6' ''
					'8' ': Thick (Lowers total bar count)'

				)

				G_WHIP_DEFAULT_ITEM="$CAVA_BAR_WIDTH"
				G_WHIP_MENU 'Please select a bar width:\n - The size of the bars affects how many are displayed'
				if (( $? == 0 )); then

					CAVA_BAR_WIDTH=$G_WHIP_RETURNED_VALUE
					Write_Apply_Globals

				fi

			elif [ "$G_WHIP_RETURNED_VALUE" = "Cava FG Colour" ] || [ "$G_WHIP_RETURNED_VALUE" = "Cava BG Colour" ] ; then

				local apply_fg_colour=0
				local default_item="$CAVA_COLOUR_BG"
				if [ "$G_WHIP_RETURNED_VALUE" = "Cava FG Colour" ]; then

					apply_fg_colour=1
					default_item="$CAVA_COLOUR_FG"

				fi

				G_WHIP_MENU_ARRAY=(

					'green' ''
					'red' ''
					'yellow' ''
					'magenta' ''
					'cyan' ''
					'white' ''
					'blue' ''
					'black' ''

				)

				G_WHIP_DEFAULT_ITEM="$default_item"
				G_WHIP_MENU 'Please select a colour:'
				if (( $? == 0 )); then

					if (( $apply_fg_colour )); then

						CAVA_COLOUR_FG="$G_WHIP_RETURNED_VALUE"

					else

						CAVA_COLOUR_BG="$G_WHIP_RETURNED_VALUE"

					fi

					Write_Apply_Globals

				fi

			elif [ "$G_WHIP_RETURNED_VALUE" = "Cava Bar Gravity" ]; then

				G_WHIP_MENU_ARRAY=(

					'0.1' ': Slow drop off speed'
					'0.25' ''
					'0.5' ''
					'0.75' ''
					'1' ''
					'1.25' ''
					'1.5' ''
					'1.75' ': Default'
					'2' ': High drop off speed'

				)

				G_WHIP_DEFAULT_ITEM="$CAVA_BAR_GRAVITY"
				G_WHIP_MENU 'Please select a gravity level (drop off speed) for the bars:\n - Higher values means bars will drop faster.'
				if (( $? == 0 )); then

					CAVA_BAR_GRAVITY=$G_WHIP_RETURNED_VALUE
					Write_Apply_Globals

				fi

			elif [ "$G_WHIP_RETURNED_VALUE" = "EQ Configure" ]; then

				if (( $EQ_ENABLED == 1 )); then

					G_WHIP_MSG 'The ALSA EQ mixer will now be launched, when finished, press F10 or ESC to exit.'
					alsamixer -D eq

				fi

			elif [ "$G_WHIP_RETURNED_VALUE" = "ALSA Mixer" ]; then

				G_WHIP_MSG 'ALSA Mixer will now be launched, when finished, press F10 or ESC to exit.'
				alsamixer

			elif [ "$G_WHIP_RETURNED_VALUE" = "EQ Enable" ]; then

				((EQ_ENABLED++))
				if (( $EQ_ENABLED > 1 )); then

					EQ_ENABLED=0

				fi

				Write_Apply_Globals

			elif [ "$G_WHIP_RETURNED_VALUE" = "SOXR Enable" ]; then

				((SOXR_ENABLED++))
				if (( $SOXR_ENABLED > 1 )); then

					SOXR_ENABLED=0

				fi

				Write_Apply_Globals

			elif [ "$G_WHIP_RETURNED_VALUE" = "SOXR Quality" ]; then

				G_WHIP_MENU_ARRAY=(

					'very high' ': Highest quality, highest CPU usage'
					'high' ': Default quality, medium CPU usage'
					'low' ': Lowest quality, minimal CPU usage'

				)

				G_WHIP_DEFAULT_ITEM="$SOXR_QUALITY"
				G_WHIP_MENU 'Please select a SOXR quality level:'
				if (( $? == 0 )); then

					SOXR_QUALITY=$G_WHIP_RETURNED_VALUE
					Write_Apply_Globals

				fi

			elif [ "$G_WHIP_RETURNED_VALUE" = "Audio Buffer" ]; then

				G_WHIP_MENU_ARRAY=(

					'128' ': Lowest latency (may cause buffer under/overruns)'
					'192' ':'
					'256' ':'
					'384' ':'
					'512' ':'
					'1024' ':'
					'2048' ': Default'
					'4096' ': Highest latency'

				)

				G_WHIP_DEFAULT_ITEM="$MPD_AUDIO_BUFFER_SIZE"
				G_WHIP_MENU 'Please select a audio buffer size (bytes):'
				if (( $? == 0 )); then

					MPD_AUDIO_BUFFER_SIZE=$G_WHIP_RETURNED_VALUE
					Write_Apply_Globals

				fi

			elif [ "$G_WHIP_RETURNED_VALUE" = "Output Frequency" ]; then

				G_WHIP_MENU_ARRAY=(

					'384000' ': 384kHz (highest quality)'
					'352800' ': 352kHz'
					'192000' ': 192kHz'
					'96000' ': 96kHz'
					'88200' ': 88.2kHz'
					'64000' ': 64kHz'
					'48000' ': 48kHz (HDMI standard)'
					'44100' ': 44.1kHz (music standard)'

				)

				G_WHIP_DEFAULT_ITEM="$OUTPUT_FREQ_CURRENT"
				G_WHIP_MENU 'Please select a output frequency:'
				if (( $? == 0 )); then

					OUTPUT_FREQ_TARGET=$G_WHIP_RETURNED_VALUE
					Write_Apply_Globals

				fi

			elif [ "$G_WHIP_RETURNED_VALUE" = "Output BitRate" ]; then

				G_WHIP_MENU_ARRAY=(

					'32' ': (highest quality, recommended)'
					'24' ': '
					'16' ': (CD audio quality)'

				)

				G_WHIP_DEFAULT_ITEM="$OUTPUT_BITRATE_CURRENT"
				G_WHIP_MENU 'Please select a output bitrate:'
				if (( $? == 0 )); then

					OUTPUT_BITRATE_TARGET=$G_WHIP_RETURNED_VALUE
					Write_Apply_Globals

				fi

			elif [ "$G_WHIP_RETURNED_VALUE" = "Reset" ]; then

				Reset_Globals

			fi

		else

			Menu_Exit

		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////
	#-----------------------------------------------------------------------------------
	Read_Globals

	#-----------------------------------------------------------------------------------
	while (( $TARGETMENUID >= 0 ))
	do

		if (( $TARGETMENUID == 0 )); then

			Menu_Main

		fi

	done
	#-----------------------------------------------------------------------------------
	exit
	#-----------------------------------------------------------------------------------
}