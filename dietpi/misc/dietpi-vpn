#!/bin/bash
{
	#////////////////////////////////////
	# DietPi VPN
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	#////////////////////////////////////
	#
	# Info:
	# - GUI to setup a NordVPN or ProtonVPN connection
	# - Allows to automatically connect on boot
	# - Allows to add post-up and pre-down scripts
	readonly USAGE='
Usage: dietpi-vpn [<command>]
Available commands:
  <empty>		Interactive menu to edit, connect and apply VPN settings
  status		Print VPN connection status info
'	#////////////////////////////////////

	# Grab Inputs
	INPUT=$1

	# Import DietPi-Globals --------------------------------------------------------------
	# - Only load for interactive menu
	if [[ $INPUT ]]; then

		readonly G_PROGRAM_NAME='DietPi-VPN'

	else

		. /boot/dietpi/func/dietpi-globals
		readonly G_PROGRAM_NAME='DietPi-VPN'
		G_CHECK_ROOT_USER
		G_CHECK_ROOTFS_RW
		G_INIT

	fi
	# Import DietPi-Globals --------------------------------------------------------------

	readonly FP_SETTINGS_DIETPI='/var/lib/dietpi/dietpi-vpn/settings_dietpi.conf'
	readonly FP_SETTINGS_OVPN='/var/lib/dietpi/dietpi-vpn/settings_ovpn.conf'
	readonly FP_SETTINGS_UP='/var/lib/dietpi/dietpi-vpn/up.sh'
	readonly FP_SETTINGS_DOWN='/var/lib/dietpi/dietpi-vpn/down.sh'
	readonly PROTONVPN_SERVERS='/etc/openvpn/protonvpn/serverlist.txt'
	readonly IFACE='tun0'
	PROTONVPN_INSTALLED=$([[ -d /etc/openvpn/protonvpn ]] && echo 1 || echo 0)
	NORDVPN_INSTALLED=$([[ -d /etc/openvpn/nordvpn ]] && echo 1 || echo 0)
	readonly MAX_WAIT_FOR_CONNECTION=5 # seconds
	VPN_USERNAME=
	VPN_PASSWORD=
	VPN_SERVER=
	PROTOCOL='udp'
	VPN_CONNECTED=0
	WAN_IP=
	RX='N/A'
	TX='N/A'

	Update_Wan_Ip(){ WAN_IP=$(curl -sSfLm 2 https://ifconfig.co/json 2>&1 | mawk -F\" '/"ip"/{o=$4}/"country"/{c=$4}/"region_name"/{c=$4"-"c}END{if(c){o=o" "c}if(o){print o;exit}{print}}'); }

	Check_Connected()
	{
		[[ $(ip r l dev $IFACE 2> /dev/null) ]] && VPN_CONNECTED=1 || VPN_CONNECTED=0
		return $(( ! $VPN_CONNECTED ))
	}

	Get_Connection_Info()
	{
		RX='N/A'
		if [[ -f /sys/class/net/$IFACE/statistics/rx_bytes ]]
		then
			local rx=$(</sys/class/net/$IFACE/statistics/rx_bytes)
			[[ $rx =~ ^[0-9]+$ ]] && RX="$(( $rx / 1024**2 )) MiB"
		fi
		TX='N/A'
		if [[ -f /sys/class/net/$IFACE/statistics/tx_bytes ]]
		then
			local tx=$(</sys/class/net/$IFACE/statistics/tx_bytes)
			[[ $tx =~ ^[0-9]+$ ]] && TX="$(( $tx / 1024**2 )) MiB"
		fi
	}

	Init_Update_Servers()
	{
		# First install
		if (( !$PROTONVPN_INSTALLED && !$NORDVPN_INSTALLED ))
		then
			G_AGI openvpn
			# VPN Provider choice
			local choice_required=
			while :
			do

				G_WHIP_MENU_ARRAY=(

					'NordVPN' ': Connect to NordVPN.'
					'ProtonVPN' ': Connect to ProtonVPN.'

				)

				G_WHIP_MENU "${choice_required}Please choose a VPN provider" && break
				choice_required='[ERROR] A choice is required to finish the DietPi-VPN setup.\n\n'

			done

			mkdir -p /var/lib/dietpi/dietpi-vpn/

			if [[ $G_WHIP_RETURNED_VALUE == 'NordVPN' ]]
			then

				G_EXEC mkdir /etc/openvpn/nordvpn
				G_EXEC curl -sSfLO https://downloads.nordcdn.com/configs/archives/servers/ovpn.zip
				G_EXEC unzip ovpn.zip -d /etc/openvpn/nordvpn
				G_EXEC rm ovpn.zip
				NORDVPN_INSTALLED=1

			elif [[ $G_WHIP_RETURNED_VALUE == 'ProtonVPN' ]]
			then

				G_EXEC mkdir /etc/openvpn/protonvpn
				G_EXEC curl -sSfL https://api.protonvpn.ch/vpn/logicals | sed 's/"Domain":"/\n/g' | mawk -F\" 'NR % 2 == 0 {print $1}' > /etc/openvpn/protonvpn/serverlist.txt

				# Download .ovpn file template
				G_EXEC curl -sSfL https://raw.githubusercontent.com/$G_GITOWNER/DietPi/$G_GITBRANCH/.conf/dpv/protonvpn.template -o /etc/openvpn/protonvpn/ovpn.template
				PROTONVPN_INSTALLED=1

			fi
		# Normal updating
		elif (( $NORDVPN_INSTALLED ))
		then
			G_WHIP_YESNO 'This will remove all NordVPN server files and perform a fresh download of NordVPN server configurations. Once completed, you will need to reselect a NordVPN server from the new list.\n\nDo you want to continue?' || return 0
			G_EXEC curl -sSfLO 'https://downloads.nordcdn.com/configs/archives/servers/ovpn.zip'
			VPN_SERVER=
			G_EXEC_DESC='Removing old NordVPN server configs' G_EXEC rm -Rf /etc/openvpn/nordvpn/ovpn_{tcp,udp}/*.nordvpn.com.{tcp,udp}.ovpn
			G_EXEC unzip -o ovpn.zip -d/etc/openvpn/nordvpn
			G_EXEC_NOEXIT=1 G_EXEC rm ovpn.zip
		elif (( $PROTONVPN_INSTALLED ))
		then
			G_WHIP_YESNO 'This will remove all ProtonVPN server files and perform a fresh download of the ProtonVPN server list. Once completed, you will need to reselect a ProtonVPN server from the new list.\n\nDo you want to continue?' || return 0
			G_EXEC curl -sSfL https://api.protonvpn.ch/vpn/logicals | sed 's/"Domain":"/\n/g' | mawk -F\" 'NR % 2 == 0 {print $1}' > /etc/openvpn/protonvpn/serverlist.txt
			VPN_SERVER=
			G_EXEC_DESC='Removing old ProtonVPN server configs' G_EXEC rm -Rf /etc/openvpn/ovpn_{tcp,udp}/*.protonvpn.com.{tcp,udp}.ovpn
		fi
	}

	Read_Settings(){ [[ -f $FP_SETTINGS_DIETPI ]] && . $FP_SETTINGS_DIETPI; }

	Save_Settings()
	{
		if ! [[ $VPN_SERVER && $VPN_USERNAME && $VPN_PASSWORD ]]
		then
			G_WHIP_MSG '[FAILED] You need to enter your VPN username + password and select a server, before settings can be applied.'
			return 1
		fi

		systemctl stop dietpi-vpn

		cat << _EOF_ > $FP_SETTINGS_OVPN
${VPN_USERNAME//\'/\'\\\'\'}
${VPN_PASSWORD//\'/\'\\\'\'}
_EOF_
		cat << _EOF_ > $FP_SETTINGS_DIETPI
VPN_USERNAME='${VPN_USERNAME//\'/\'\\\'\'}'
VPN_PASSWORD='${VPN_PASSWORD//\'/\'\\\'\'}'
VPN_SERVER='$VPN_SERVER'
PROTOCOL='$PROTOCOL'
_EOF_
		G_EXEC chmod 0600 $FP_SETTINGS_OVPN $FP_SETTINGS_DIETPI /etc/openvpn/client.ovpn
		G_EXEC chown root:root $FP_SETTINGS_OVPN $FP_SETTINGS_DIETPI client.ovpn
		G_DIETPI-NOTIFY 2 'Generating OVPN file, please wait...'
		if (( $PROTONVPN_INSTALLED )); then
			G_EXEC envsubst < '/etc/openvpn/protonvpn/ovpn.template' > "/etc/openvpn/client.ovpn"
		elif (( $NORDVPN_INSTALLED )); then
			cp -f /etc/openvpn/nordvpn/ovpn_"$PROTOCOL"/"$VPN_SERVER" /etc/openvpn/client.ovpn
		fi

		G_CONFIG_INJECT 'auth-user-pass([[:blank:]]|$)' "auth-user-pass $FP_SETTINGS_OVPN" /etc/openvpn/client.ovpn
		[[ -f $FP_SETTINGS_UP || -f $FP_SETTINGS_DOWN ]] && G_CONFIG_INJECT 'script-security[[:blank:]]' 'script-security 2' /etc/openvpn/client.ovpn 'auth[[:blank:]]'
		# shellcheck disable=SC2015
		[[ -f $FP_SETTINGS_UP ]] && G_CONFIG_INJECT 'route-up[[:blank:]]' "route-up $FP_SETTINGS_UP" /etc/openvpn/client.ovpn 'auth[[:blank:]]' || sed -i '/^[[:blank:]]*route-up[[:blank:]]/d' /etc/openvpn/client.ovpn
		# shellcheck disable=SC2015
		[[ -f $FP_SETTINGS_DOWN ]] && G_CONFIG_INJECT 'route-pre-down[[:blank:]]' "route-pre-down $FP_SETTINGS_DOWN" /etc/openvpn/client.ovpn 'auth[[:blank:]]' || sed -i '/^[[:blank:]]*route-pre-down[[:blank:]]/d' /etc/openvpn/client.ovpn
		G_EXEC systemctl restart dietpi-vpn

		local i=1
		until Check_Connected || (( $i > $MAX_WAIT_FOR_CONNECTION ))
		do
			G_DIETPI-NOTIFY -2 "Waiting for connection ($((i++))/$MAX_WAIT_FOR_CONNECTION)"
			sleep 1
		done

		if (( $VPN_CONNECTED ))
		then
			G_DIETPI-NOTIFY 0 "Connection established: $VPN_SERVER"
		else
			G_DIETPI-NOTIFY 1 "Connection failed/timeout: $VPN_SERVER"
			G_WHIP_MSG "Connection failed/timeout: $VPN_SERVER\n\nPlease verify account details are correct.\n\nIf problems persist, please check the service status: \"systemctl -l status dietpi-vpn\""
		fi
	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Whip
	#/////////////////////////////////////////////////////////////////////////////////////
	TARGETMENUID=0
	LAST_SELECTED_NAME='Username'

	Menu_Exit()
	{
		G_WHIP_SIZE_X_MAX=50
		G_WHIP_YESNO "Exit $G_PROGRAM_NAME?" && TARGETMENUID=-1 # Exit
	}

	# TARGETMENUID=0
	Menu_Main()
	{
		local text_status="WAN IP       : $WAN_IP\nState        : "

		if ! Check_Connected
		then
			text_status+='Disconnected\nSubscription : https://go.nordvpn.net/aff_c?offer_id=15&aff_id=5305&url_id=902'
		else
			Get_Connection_Info
			text_status+="Connected\nTraffic      : Sent = $TX | Received = $RX"
		fi

		G_WHIP_MENU_ARRAY=(

			'' '●─ Global Options '
			'Username' ": [$VPN_USERNAME]"
			'Password' ": [${VPN_PASSWORD//?/*}]"
			'Server' ": [$VPN_SERVER]"
			'Update' ': This updates the VPN server list'
			'Reset' ': Remove downloaded server configs and reset settings'
		)
		local autostart_enabled=0 autostart_text='Off'
		systemctl -q is-enabled dietpi-vpn && { autostart_enabled=1 autostart_text='On'; }
		G_WHIP_MENU_ARRAY+=(

			'Autostart' ": [$autostart_text]"
			'Refresh' ': Update VPN connection status'
		)
		(( $VPN_CONNECTED )) && G_WHIP_MENU_ARRAY+=('Disconnect' '')
		G_WHIP_MENU_ARRAY+=(

			'' '●─ Connection Up and Down Scripts '
			'Edit Up' ': This script gets executed right after the VPN is connected'
			'Edit Down' ': This script gets executed right before the VPN is disconnected'
			'' '●─ Save Settings '
			'Apply' ': Save settings and restart VPN connection'
		)

		G_WHIP_DEFAULT_ITEM=$LAST_SELECTED_NAME
		G_WHIP_BUTTON_CANCEL_TEXT='Exit'
		if G_WHIP_MENU "$text_status"
		then
			LAST_SELECTED_NAME=$G_WHIP_RETURNED_VALUE

			if [[ $G_WHIP_RETURNED_VALUE == 'Apply' ]]
			then
				Save_Settings
				Update_Wan_Ip

			elif [[ $G_WHIP_RETURNED_VALUE == 'Edit'* ]]
			then
				local fp=$FP_SETTINGS_UP
				[[ $G_WHIP_RETURNED_VALUE == *'Down' ]] && fp=$FP_SETTINGS_DOWN
				[[ -f $fp ]] || echo -e '#!/bin/bash\n# Clear this file completely, including line breaks, to have it removed.' > $fp
				nano $fp
				if [[ -s $fp ]]
				then
					G_EXEC_NOEXIT=1 G_EXEC chmod 0700 $fp
				else
					G_EXEC_NOEXIT=1 G_EXEC rm $fp
				fi

			elif [[ $G_WHIP_RETURNED_VALUE == 'Autostart' ]]
			then
				if (( $autostart_enabled ))
				then
					G_EXEC_NOEXIT=1 G_EXEC systemctl disable dietpi-vpn
				else
					G_EXEC_NOEXIT=1 G_EXEC systemctl enable dietpi-vpn
				fi

			elif [[ $G_WHIP_RETURNED_VALUE == 'Username' ]]
			then
				G_WHIP_DEFAULT_ITEM=$VPN_USERNAME
				G_WHIP_INPUTBOX 'Please enter your NordVPN or ProtonVPN username:\n\nNB: For ProtonVPN, use the OpenVPN credentials located at https://account.protonvpn.com/account' && VPN_USERNAME=$G_WHIP_RETURNED_VALUE

			elif [[ $G_WHIP_RETURNED_VALUE == 'Password' ]]
			then
				G_WHIP_PASSWORD 'Please enter your NordVPN or ProtonVPN password:\n\nNB: For ProtonVPN, use the OpenVPN credentials located at https://account.protonvpn.com/account' && VPN_PASSWORD=$result
				unset -v result

			elif [[ $G_WHIP_RETURNED_VALUE == 'Disconnect' ]]
			then
				G_EXEC systemctl stop dietpi-vpn
				Update_Wan_Ip
				LAST_SELECTED_NAME='Refresh'

			elif [[ $G_WHIP_RETURNED_VALUE == 'Server' ]]
			then
				# Select protocol
				G_WHIP_MENU_ARRAY=(

					'UDP' ': Recommended'
					'TCP' ': Reliable'
				)

				G_WHIP_DEFAULT_ITEM=$PROTOCOL
				G_WHIP_MENU 'Please select the connection protocol type:' && PROTOCOL=${G_WHIP_RETURNED_VALUE,,}

				# Select server
				G_DIETPI-NOTIFY 2 'Populating VPN server list, please wait...'
				G_WHIP_MENU_ARRAY=()
				if (( $NORDVPN_INSTALLED )); then
					for i in /etc/openvpn/"ovpn_$PROTOCOL"/*.ovpn
					do
						G_WHIP_MENU_ARRAY+=("${i##*/}" '')
					done
				elif (( $PROTONVPN_INSTALLED )); then
					# Get the list of server names from the file
					while read -r server
					do
  						G_WHIP_MENU_ARRAY+=("$server" '')
					done < "$PROTONVPN_SERVERS"
				fi
				G_WHIP_DEFAULT_ITEM=$VPN_SERVER
				G_WHIP_MENU 'Please select a VPN server to use:' && VPN_SERVER=$G_WHIP_RETURNED_VALUE

			elif [[ $G_WHIP_RETURNED_VALUE == 'Refresh' ]]
			then

				Update_Wan_Ip

			elif [[ $G_WHIP_RETURNED_VALUE == 'Update' ]]
			then

				Init_Update_Servers

			elif [[ $G_WHIP_RETURNED_VALUE == 'Reset' ]]
			then

				G_EXEC rm -Rf /etc/openvpn/{proton,nord}vpn
				G_EXEC rm -f "$FP_SETTINGS_DIETPI $FP_SETTINGS_OVPN $FP_SETTINGS_UP $FP_SETTINGS_DOWN"
				exit

			fi
		else
			Menu_Exit
		fi
	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////
	#-----------------------------------------------------------------------------------
	if [[ $INPUT == 'status' ]]
	then

		if ! Check_Connected
		then
			echo -e '\e[1;31mDisconnected\e[0m'
		else
			Get_Connection_Info
			echo -e "\e[1;32mConnected\e[0m - Sent = $TX | Received = $RX"
		fi

	elif [[ $INPUT ]]
	then
		# Unknown input
		echo -e "\e[90m[\e[0m\e[31mFAILURE\e[0m\e[90m]\e[0m \e[90m$G_PROGRAM_NAME | \e[0mInvalid input command ($INPUT). Aborting...\n$USAGE"
		exit 1
	else
		Read_Settings
		Update_Wan_Ip
		(( $NORDVPN_INSTALLED || $PROTONVPN_INSTALLED )) || Init_Update_Servers

		until (( $TARGETMENUID < 0 ))
		do
			Menu_Main
		done
	fi
	#-----------------------------------------------------------------------------------
	exit
	#-----------------------------------------------------------------------------------
}
