#!/bin/bash
{

	#////////////////////////////////////
	# DietPi Move Arr to RAM
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	#////////////////////////////////////
	#
	# Info:
	# - Moves arr program database files to RAM (/tmp) with symlink, and, back to disk
	#
	# Usage:
	# - dietpi-arr_to_RAM 1		= Link to RAM
	# - dietpi-arr_to_RAM 0		= Store to disk
	#////////////////////////////////////

	# Import DietPi-Globals --------------------------------------------------------------
	. /DietPi/dietpi/func/dietpi-globals
	G_PROGRAM_NAME='DietPi-Arr_to_RAM'
	G_CHECK_ROOT_USER
	G_INIT
	# Import DietPi-Globals --------------------------------------------------------------

	[[ $1 ]] && INPUT=$1 || exit 1

	declare -A aFP_FILES=()
	# - Sonarr/Radarr: Both use the same file names
	aFP_FILES[sonarr]='nzbdrone.db nzbdrone.db-shm nzbdrone.db-wal'
	aFP_FILES[radarr]='nzbdrone.db nzbdrone.db-shm nzbdrone.db-wal'
	# - Lidarr
	aFP_FILES[lidarr]='lidarr.db lidarr.db-shm lidarr.db-wal'

	FP_DISK=''
	FP_RAM=''

	Link_To_Ram(){

		[[ $G_DEBUG == 1 ]] && G_DIETPI-NOTIFY 2 "Linking $FP_DISK to RAM ($FP_RAM)..."
		G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD cp -a $FP_DISK $FP_RAM
		G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD mv $FP_DISK ${FP_DISK}.bak
		G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD ln -s $FP_RAM $FP_DISK
		# - Failsafe: chown fully to program run user since nothing else ever needs or should access these databases directly
		chown -R ${i}:${i} $FP_RAM

	}

	for i in ${!aFP_FILES[@]}
	do

		FP_DISK="$G_FP_DIETPI_USERDATA/$i"
		FP_RAM="/tmp/${i}_db_link"

		# Skip non-installed program
		[[ -d $FP_DISK ]] || continue

		G_DIETPI-NOTIFY 2 "${i^} detected"

		# If active, stop program before handling database and restart afterwards
		handle_service=0
		if pgrep -f $i &> /dev/null; then

			handle_service=1
			G_RUN_CMD systemctl stop $i

		fi			

		# Link to RAM + backup
		if (( $INPUT == 1 )); then

			# - Pre-create target dir
			[[ -d $FP_RAM ]] || G_RUN_CMD mkdir -p $FP_RAM

			for j in ${aFP_FILES[$i]}
			do

				FP_DISK="$FP_DISK/$j"
				FP_RAM="$FP_RAM/$j"

				# - Source exists and is no symlink, expected situation
				if [[ -f $FP_DISK && ! -L $FP_DISK ]]; then

					Link_To_Ram

				# - Link + target exists, should only happen when running the script two times in same session
				elif [[ -L $FP_DISK ]] && fp_target=$(readlink -e $FP_DISK); then

					if [[ $fp_target == $FP_RAM ]]; then

						G_DIETPI-NOTIFY 2 "$FP_DISK already linked to RAM ($FP_RAM), skipping this file..."

					# - Failsafe: Restore file from wrong symlink, should never occur but required for this script to function
					else

						G_DIETPI-NOTIFY 2 "$FP_DISK is already linked to $fp_target, restoring original file location before linking to RAM"
						G_RUN_CMD rm $FP_DISK
						G_RUN_CMD mv $fp_target $FP_DISK
						Link_To_Ram

					fi

				# - Source does not exist or is orphaned link, should only happen after crash
				elif [[ -f ${FP_DISK}.bak ]]; then

					G_DIETPI-NOTIFY 2 "$FP_DISK not found, recovering from backup first (${FP_DISK}.bak)..."
					# - Remove possible obsolete symlink
					[[ -L $FP_DISK ]] && rm $FP_DISK
					# - Recover from backup
					G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD mv ${FP_DISK}.bak $FP_DISK
					Link_To_Ram

				else

					G_DIETPI-NOTIFY 2 "$FP_DISK not found, skipping this file..."

				fi

			done

			# - Restart program if we stopped it before
			(( $handle_service )) && systemctl start $i

		# Store to disk
		elif (( $INPUT == 0 )); then

			if [[ -f $FP_RAM ]]; then

				# - "-u" will only copy newer files, thus actually used by program.
				# - "--remove-destination" will remove expected existing symlinks.
				G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD cp -au --remove-destination $FP_RAM/. $FP_DISK
				G_ERROR_HANDLER_INFO_ONLY=1 G_RUN_CMD rm -R $FP_RAM

			else

				G_DIETPI-NOTIFY 2 "$FP_RAM not found, skipping this program..."

			fi

			# - Failsafe: chown fully to program run user since nothing else ever needs or should access these databases directly
			chown -R ${i}:${i} $FP_DISK
			# - Failsafe: Sync to disk now
			sync

		fi

	done

}
