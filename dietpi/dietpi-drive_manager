#!/bin/bash
{
	# ////////////////////////////////////
	# DietPi Drive Manager
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	#////////////////////////////////////
	#
	# Info: Drive Manager for DietPi
	#
	# Usage:
	# 	  = Drive Manager
	#	1 = Selectadrive! Provides a list of available drive mount locations, with value on selection saved to: /tmp/dietpi-drive_manager_selmnt
	#	2 = Returns exit 1 if low on freespace
	#	3 = Returns exit 1 if rootfs is currently RO (NB: simple check via mount cmd, does not init full drive manager vars, for quicker loading/processing)
	#	4 = Generates a new /etc/fstab based on current mounted locally drives (for use in PREP_SYSTEM_FOR_DIETPI.sh). NB: does not include remoteFS mounts!
	#
	#	NB: This script does not support quoted/string UUID entries in /etc/fstab.
	#////////////////////////////////////

	#Import DietPi-Globals ---------------------------------------------------------------
	. /DietPi/dietpi/func/dietpi-globals
	G_CHECK_ROOT_USER
	export G_PROGRAM_NAME='DietPi-Drive_Manager'
	G_INIT
	#Import DietPi-Globals ---------------------------------------------------------------

	#Grab Input (valid interger)
	INPUT=0
	G_CHECK_VALIDINT $1 && INPUT=$1

	EXIT_CODE=0

	PROGRAM_NAME='DietPi-Drive Manager'

	#Service control for script
	SERVICE_CONTROL=1

	#Return values
	FP_DRIVE_MANAGER_SELECTION='/tmp/dietpi-drive_manager_selmnt'

	#FP
	FP_TEMP_FSTAB='/tmp/.fstab'

	FP_ROOTFS_SOURCE=0

	#Drives
	MAX_DRIVES=0
	FORMAT_GPT=1 # default GPT: https://github.com/Fourdee/DietPi/issues/531. 0=MBR
	FORMAT_FILESYSTEM_TYPE=0 #0=ext4 1=ntfs 2=fat32 3=hfs+ 4=btrfs 5=f2fs 6=exfat
	FORMAT_RECREATE_PARTITION_TABLE=1 #0=for rootfs transfer
	FORMAT_COMPLETED=0
	FORMAT_PREVIOUS_MOUNT_SOURCE=0 #Used to obtain previous mount source fp, before a format, for rootfs transfer

	INDEX_DRIVE_BEING_EDITED=0

	ROOTFS_RW_CHECKED=0

	aDRIVE_UUID=()
	aDRIVE_PART_UUID=()
	aDRIVE_MOUNT_SOURCE=()
	aDRIVE_MOUNT_TARGET=()
	aDRIVE_FSTYPE=()
	aDRIVE_SIZE_TOTAL=()
	aDRIVE_SIZE_USED=()
	aDRIVE_SIZE_PERCENTUSED=()
	aDRIVE_SIZE_FREE=()

	aDRIVE_ISAVAILABLE=()
	aDRIVE_ISFILESYSTEM=()
	aDRIVE_ISMOUNTED=()
	aDRIVE_ISUUIDMOUNT=()
	aDRIVE_ISREADONLY_FSTAB=()
	aDRIVE_ISREADONLY_CURRENTLY=()

	INIT_FSTAB_SLOTS_ENABLED=0

	FP_USERDATA_CURRENT=0
	FP_SWAPFILE_CURRENT=0

	Destroy(){

		#Delete []
		unset aDRIVE_MOUNT_SOURCE
		unset aDRIVE_MOUNT_TARGET
		unset aDRIVE_FSTYPE
		unset aDRIVE_SIZE_TOTAL
		unset aDRIVE_SIZE_USED
		unset aDRIVE_SIZE_PERCENTUSED
		unset aDRIVE_SIZE_FREE
		unset aDRIVE_PART_UUID
		unset aDRIVE_UUID

		unset aDRIVE_ISMOUNTED
		unset aDRIVE_ISFILESYSTEM
		unset aDRIVE_ISAVAILABLE
		unset aDRIVE_ISUUIDMOUNT
		unset aDRIVE_ISREADONLY_FSTAB
		unset aDRIVE_ISREADONLY_CURRENTLY

	}

	Init_Drives_and_Refresh(){

		#---------------------------------------------------------------
		local init=1

		# - Delete arrays before reinit
		Destroy

		while (( $init ))
		do

			init=0

			G_DIETPI-NOTIFY 2 'Detecting drives, please wait...'

			#Copy FSTAB to ram, faster exec
			cp /etc/fstab "$FP_TEMP_FSTAB"

			#Get list of available dev drives
			# - /dev/sdXX
			for i in /dev/sd[a-z][0-9]
			do

				aDRIVE_MOUNT_SOURCE+=($i)

			done

			# - /dev/mmcblkXpX
			for i in /dev/mmcblk[0-9]p[0-9]
			do

				aDRIVE_MOUNT_SOURCE+=($i)

			done

			MAX_DRIVES=${#aDRIVE_MOUNT_SOURCE[@]}
			for ((i=0; i<$MAX_DRIVES; i++))
			do

				#init
				aDRIVE_ISAVAILABLE[$i]=0
				aDRIVE_ISUUIDMOUNT[$i]=0
				aDRIVE_MOUNT_TARGET[$i]='NULL'
				aDRIVE_UUID[$i]=$(blkid ${aDRIVE_MOUNT_SOURCE[$i]} -s UUID -o value)
				aDRIVE_PART_UUID[$i]=$(blkid ${aDRIVE_MOUNT_SOURCE[$i]} -s PARTUUID -o value)

				#Check FStab for existing entry
				local drive_mount_target_dev=$(grep -m1 "${aDRIVE_MOUNT_SOURCE[$i]}[[:space:]]" "$FP_TEMP_FSTAB" | awk '{print $2}')
				local drive_mount_target_uuid=$(grep -m1 "UUID=${aDRIVE_UUID[$i]}[[:space:]]" "$FP_TEMP_FSTAB" | awk '{print $2}')
				local drive_mount_target_partuuid=$(grep -m1 "PARTUUID=${aDRIVE_PART_UUID[$i]}[[:space:]]" "$FP_TEMP_FSTAB" | awk '{print $2}')

				# - check /dev/sdX
				if [[ $drive_mount_target_dev ]]; then

					aDRIVE_MOUNT_TARGET[$i]="$drive_mount_target_dev"
					aDRIVE_ISAVAILABLE[$i]=1

					G_DIETPI-NOTIFY 2 "Detected /dev mount: ${aDRIVE_MOUNT_SOURCE[$i]} > ${aDRIVE_MOUNT_TARGET[$i]}"

				# - check UUID
				elif [[ $drive_mount_target_uuid ]]; then

					aDRIVE_MOUNT_TARGET[$i]="$drive_mount_target_uuid"

					aDRIVE_ISAVAILABLE[$i]=1
					aDRIVE_ISUUIDMOUNT[$i]=1

					G_DIETPI-NOTIFY 2 "Detected UUID mount: ${aDRIVE_MOUNT_SOURCE[$i]} > ${aDRIVE_MOUNT_TARGET[$i]}"

				# - check PARTUUID
				elif [[ $drive_mount_target_partuuid ]]; then

					aDRIVE_MOUNT_TARGET[$i]="$drive_mount_target_partuuid"

					aDRIVE_ISAVAILABLE[$i]=1
					aDRIVE_ISUUIDMOUNT[$i]=1

					G_DIETPI-NOTIFY 2 "Detected PARTUUID mount: ${aDRIVE_MOUNT_SOURCE[$i]} > ${aDRIVE_MOUNT_TARGET[$i]}"

				# - Active drive mount does not exist in fstab, create one
				elif [[ ${aDRIVE_UUID[$i]} ]]; then #Ignore master partition tables / drives with no UUID

					#	Is drive already mounted? Use existing
					local findmnt_target=$(findmnt ${aDRIVE_MOUNT_SOURCE[$i]} -o target -n | head -n 1) #multiple mounts can exist, we only want the 1st entry
					if [[ $findmnt_target ]]; then

						aDRIVE_MOUNT_TARGET[$i]=$findmnt_target

					# 	Generate new mount location
					else

						aDRIVE_MOUNT_TARGET[$i]="/mnt/${aDRIVE_UUID[$i]}"

					fi

					G_DIETPI-NOTIFY 2 "Creating UUID fstab entry: ${aDRIVE_MOUNT_SOURCE[$i]}"

					#	remove any previous/disabled entries for drive
					sed -i "\@^${aDRIVE_MOUNT_SOURCE[$i]}[[:space:]]@d" "$FP_TEMP_FSTAB"
					sed -i "\@^UUID=${aDRIVE_UUID[$i]}[[:space:]]@d" "$FP_TEMP_FSTAB"
					sed -i "\@^PARTUUID=${aDRIVE_PART_UUID[$i]}[[:space:]]@d" "$FP_TEMP_FSTAB"

					local mount_options='defaults,noatime,x-systemd.automount,nofail'
					local mount_type_index=0
					local repair_index=0 #No repair on boot
					if [[ ${aDRIVE_MOUNT_TARGET[$i]} == '/' ]]; then

						repair_index=1

					fi

					#	Override rootFS/Boot options
					#	- Disable nofail for RootFS & boot, which will be ignored, causing warning:
					#	- x-systemd.automount RootFS, breaks FS_partition
					#	- x-systemd.automount Boot, breaks dietpi-ramdisk on ASUS TB
					if [[ ${aDRIVE_MOUNT_TARGET[$i]} == '/' || ${aDRIVE_MOUNT_TARGET[$i]} == '/boot' ]]; then

						mount_options='defaults,noatime'
						#	RPi, PARTUUID to support USB rootFS/boot: https://github.com/Fourdee/DietPi/issues/970
						if (( $G_HW_MODEL < 10 )); then

							mount_type_index=1

						fi

					fi

					local mount_type_string=0
					if (( $mount_type_index == 0 )); then

						mount_type_string="UUID=${aDRIVE_UUID[$i]}"

					elif (( $mount_type_index == 1 )); then

						mount_type_string="PARTUUID=${aDRIVE_PART_UUID[$i]}"

					fi

					echo -e "$mount_type_string    ${aDRIVE_MOUNT_TARGET[$i]}    auto    $mount_options    0 $repair_index" >> "$FP_TEMP_FSTAB"

					aDRIVE_ISAVAILABLE[$i]=1
					aDRIVE_ISUUIDMOUNT[$i]=1

				fi

				#create mount folders
				if (( ${aDRIVE_ISAVAILABLE[$i]} )) &&
					[[ ! -d ${aDRIVE_MOUNT_TARGET[$i]} ]]; then

					G_DIETPI-NOTIFY 2 "Creating mount folder for ${aDRIVE_MOUNT_TARGET[$i]}"
					mkdir -p "${aDRIVE_MOUNT_TARGET[$i]}"

				fi

			done

			#Remove x-systemd.automount if not supported by kernel: https://github.com/Fourdee/DietPi/issues/1607#issuecomment-372030565
			if ! modprobe autofs4 --dry-run &> /dev/null; then

				sed -i 's/,x-systemd.automount//g' "$FP_TEMP_FSTAB"
				G_DIETPI-NOTIFY 2 'autofs4 module not available in kernel, x-systemd.automount has been disabled'

			fi

			cp "$FP_TEMP_FSTAB" /etc/fstab
			systemctl daemon-reload

			rm "$FP_TEMP_FSTAB"

			sync
			mount -a

			#---------------------------------------------------------------

			G_DIETPI-NOTIFY 2 'Processing drive information, please wait...'

			#ROOTFS location
			FP_ROOTFS_SOURCE=$(findmnt / -o source -n)

			local cmd_scrape_string=''
			#Get data on mounted drives
			for ((i=0; i<$MAX_DRIVES; i++))
			do

				#Init
				aDRIVE_FSTYPE[$i]='No filesystem'
				aDRIVE_SIZE_TOTAL[$i]='NULL'
				aDRIVE_SIZE_USED[$i]='NULL'
				aDRIVE_SIZE_FREE[$i]='NULL'
				aDRIVE_SIZE_PERCENTUSED[$i]='NULL'

				aDRIVE_ISMOUNTED[$i]=0
				aDRIVE_ISFILESYSTEM[$i]=0
				aDRIVE_ISREADONLY_FSTAB[$i]=0
				aDRIVE_ISREADONLY_CURRENTLY[$i]=0

				cmd_scrape_string=$(blkid "${aDRIVE_MOUNT_SOURCE[$i]}" -s TYPE -o value)
				if [[ $cmd_scrape_string ]]; then

					aDRIVE_ISFILESYSTEM[$i]=1
					aDRIVE_FSTYPE[$i]="$cmd_scrape_string"

				fi

				#mounted drive, pull size data
				# - Store df result in RAM for faster processing
				df -Ph > /tmp/.dietpi-drive_manager_df_tmp
				cmd_scrape_string=$(grep -m1 "${aDRIVE_MOUNT_TARGET[$i]}$" /tmp/.dietpi-drive_manager_df_tmp | awk '{print $2}')
				if [[ $cmd_scrape_string ]]; then

					aDRIVE_SIZE_TOTAL[$i]="$cmd_scrape_string"
					aDRIVE_ISMOUNTED[$i]=1

				fi

				if (( ${aDRIVE_ISMOUNTED[$i]} )); then

					cmd_scrape_string=$(grep -m1 "${aDRIVE_MOUNT_TARGET[$i]}$" /tmp/.dietpi-drive_manager_df_tmp | awk '{print $3}')
					if [[ $cmd_scrape_string ]]; then

						aDRIVE_SIZE_USED[$i]="$cmd_scrape_string"

					fi

					cmd_scrape_string=$(grep -m1 "${aDRIVE_MOUNT_TARGET[$i]}$" /tmp/.dietpi-drive_manager_df_tmp | awk '{print $4}')
					if [[ $cmd_scrape_string ]]; then

						aDRIVE_SIZE_FREE[$i]="$cmd_scrape_string"

					fi

					cmd_scrape_string=$(grep -m1 "${aDRIVE_MOUNT_TARGET[$i]}$" /tmp/.dietpi-drive_manager_df_tmp | awk '{print $5}')
					if [[ $cmd_scrape_string ]]; then

						aDRIVE_SIZE_PERCENTUSED[$i]="$cmd_scrape_string"

					fi

					#RO mounted?
					#NB: We cant use -m1 for initial check as results can be:
					# root@DietPi:~# cat /proc/mounts | grep ' / '
					# rootfs / rootfs rw 0 0
					# /dev/mmcblk0p2 / ext4 ro,noatime,discard,data=ordered 0 0
					cmd_scrape_string=$(grep "[[:space:]]${aDRIVE_MOUNT_TARGET[$i]}[[:space:]]" /proc/mounts | grep -m1 '[[:space:]]ro,')
					if [[ $cmd_scrape_string ]]; then

						aDRIVE_ISREADONLY_CURRENTLY[$i]=1

					fi

				fi

				rm /tmp/.dietpi-drive_manager_df_tmp

				#RO set in fstab?
				cmd_scrape_string=$(grep -m1 "[[:space:]]${aDRIVE_MOUNT_TARGET[$i]}[[:space:]]*.auto" /etc/fstab | grep -m1 ',ro,')
				if [[ $cmd_scrape_string ]]; then

					aDRIVE_ISREADONLY_FSTAB[$i]=1

				fi


			done

			#Check for RO on rootfs and enable RW before this script can run
			if (( ! $ROOTFS_RW_CHECKED )); then

				ROOTFS_RW_CHECKED=1

				for ((i=0; i<$MAX_DRIVES; i++))
				do

					if [[ ${aDRIVE_MOUNT_TARGET[$i]} == '/' ]] &&
						(( ${aDRIVE_ISREADONLY_CURRENTLY[$i]} )); then

						INDEX_DRIVE_BEING_EDITED=$i

						G_DIETPI-NOTIFY 2 "RootFS is currently set to R/O. $PROGRAM_NAME requires R/W access."

						G_WHIP_YESNO "RootFS is currently set to 'Read Only'. DietPi-Drive_Manager requires 'Read Write' access to function.\n\nWould you like to renable 'Read Write' access on RootFS?"
						if (( $? == 0 )); then

							Toggle_WriteMode
							G_DIETPI-NOTIFY 0 "RootFS R/W now enabled."

							#	reinit
							init=1

						else

							/DietPi/dietpi/dietpi-services start

							G_DIETPI-NOTIFY 0 'RootFS currently set to R/O.'
							G_DIETPI-NOTIFY 2 "Please run 'dietpi-drive_manager' again, if you want to re-enable RootFS R/W."

							Destroy
							exit

						fi

					fi

				done

			fi

			#Obtain actual user data location on disk (follows symlinks)
			FP_USERDATA_CURRENT="$(readlink -f $G_FP_DIETPI_USERDATA)"

			#Swapfile location
			FP_SWAPFILE_CURRENT="$(grep -m1 '^[[:blank:]]*AUTO_SETUP_SWAPFILE_LOCATION=' /DietPi/dietpi.txt | sed 's/.*=//')"

		done

	}

	Return_Drive_Without_Partitions(){

		#$1 = dev source
		if [[ $1 == /dev/sd* ]]; then

			echo -e "$1" | sed 's/[0-9]$//g'

		#mmc
		else

			echo -e "$1" | sed 's/p[0-9]$//g'

		fi

	}

	Run_Format(){

		local drivepath_no_partitions=$(Return_Drive_Without_Partitions ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]})

		# - Unmount drive
		umount ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

		if (( $FORMAT_RECREATE_PARTITION_TABLE )); then

			# - Clear MBR and partition table from device, and then some.
			dd if=/dev/zero of=$drivepath_no_partitions bs=5M count=1

			# - Create partition table type
			local parition_table_type='msdos'
			if (( $FORMAT_GPT )); then

				parition_table_type='gpt'

			fi

			G_DIETPI-NOTIFY 2 "Partition table target: $parition_table_type"

			parted -s "$drivepath_no_partitions" mklabel "$parition_table_type"
			parted -a optimal "$drivepath_no_partitions" mkpart primary 0% 100%

			# parted -s "${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}" mklabel "$parition_table_type"
			# parted -a optimal "${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}" mkpart primary 0% 100%

			#partprobe #this mounts all drives

			sleep 1 # due to systemD automount, wait for it.
			umount ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

		else

			# - Clear partition from device
			dd if=/dev/zero of=${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]} bs=5M count=1

		fi

		# - Format ext4
		if (( $FORMAT_FILESYSTEM_TYPE == 0 )); then

			# force
			mkfs.ext4 -F -m 0 ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}
			resize2fs ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

		# - Format NTFS
		elif (( $FORMAT_FILESYSTEM_TYPE == 1 )); then

			# fast format / no indexing / force
			mkfs.ntfs -f -I -F ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

		# - Format FAT32
		elif (( $FORMAT_FILESYSTEM_TYPE == 2 )); then

			#  use 1 parition on whole device
			mkfs.vfat -I ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

		# - Format HFS+
		elif (( $FORMAT_FILESYSTEM_TYPE == 3 )); then

			mkfs.hfsplus ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

		# - Format btrfs
		elif (( $FORMAT_FILESYSTEM_TYPE == 4 )); then

			# force
			mkfs.btrfs -f ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

		# - Format f2fs
		elif (( $FORMAT_FILESYSTEM_TYPE == 5 )); then

			mkfs.f2fs ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

		# - Format exFAT
		elif (( $FORMAT_FILESYSTEM_TYPE == 6 )); then

			mkfs.exfat ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

		fi

		#Remove previous fstab entry and mount location
		rm -R "${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}"
		sed -i "\@[[:space:]]${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}[[:space:]]@d" /etc/fstab

		FORMAT_COMPLETED=1
		FORMAT_PREVIOUS_MOUNT_SOURCE=${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

		Init_Drives_and_Refresh

	}

	RootFS_Move(){

		#Remove previous fstab entry and mount location
		cp /etc/fstab /etc/fstab.bak #incase of Rsync fail

		#	redetect index, after format
		for ((i=0; i<$MAX_DRIVES; i++))
		do

			if [[ ${aDRIVE_MOUNT_SOURCE[$i]} == $FORMAT_PREVIOUS_MOUNT_SOURCE ]]; then

				INDEX_DRIVE_BEING_EDITED=$i
				break

			fi

		done

		#	Remove automatic entry for new uuid
		sed -i "\@[[:space:]]${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}[[:space:]]@d" /etc/fstab

		#	Add new rootfs entry
		sed -i "\@[[:space:]]/[[:space:]]auto@c UUID=${aDRIVE_UUID[$INDEX_DRIVE_BEING_EDITED]} / auto defaults,noatime 0 1" /etc/fstab

		# - install rsync
		G_AG_CHECK_INSTALL_PREREQ rsync

		rsync -aHv --delete --exclude '/lost+found/' --exclude ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}/ --exclude '/sys/*' --exclude '/proc/*' / "${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}"/
		if (( $? )); then

			G_DIETPI-NOTIFY 1 'Rsync has failed, RootFS transfer has been aborted.'
			#	revert FSTAB changes
			cp /etc/fstab.bak /etc/fstab

			Destroy
			exit

		fi

		#RPi | cmdline.txt
		if (( $G_HW_MODEL < 10 )); then

			#	find current root= and replace
			local rootfs_current=$(awk '{for(i=1;i<=NF;i++) {print $i} }' /boot/cmdline.txt | grep -m1 'root=')
			sed -i "s#$rootfs_current#root=PARTUUID=${aDRIVE_PART_UUID[$INDEX_DRIVE_BEING_EDITED]}#g" /boot/cmdline.txt

			#	Add root delay
			if ! grep -qi '[[:space:]]rootdelay=' /boot/cmdline.txt; then

				sed -i "s#console=tty1#console=tty1 rootdelay=10#g" /boot/cmdline.txt

			fi

			#	set FS type
			local rootfstype_current=$(awk '{for(i=1;i<=NF;i++) {print $i} }' /boot/cmdline.txt | grep -m1 'rootfstype=')
			sed -i "s#$rootfstype_current#rootfstype=${aDRIVE_FSTYPE[$INDEX_DRIVE_BEING_EDITED]}#g" /boot/cmdline.txt

		#C1/C2/XU4 | /DietPi/boot.ini
		elif (( $G_HW_MODEL == 10 || $G_HW_MODEL == 11 || $G_HW_MODEL == 12 )); then

			#	find current root= to replace
			local rootfs_current=$(awk '{for(i=1;i<=NF;i++) {print $i} }' /DietPi/boot.ini | grep -m1 'root=' | sed 's/\"//')
			sed -i "s#$rootfs_current#root=UUID=${aDRIVE_UUID[$INDEX_DRIVE_BEING_EDITED]}#g" /DietPi/boot.ini

		fi

		systemctl daemon-reload

		G_WHIP_MSG 'RootFS transfer completed. Press enter to reboot system.'

		reboot

	}

	RootFS_Low_Free_Space_Check(){

		#	global min limit (MB)
		local free_space_limit=500

		G_DIETPI-NOTIFY 2 'Checking available free space on RootFS, please wait...'

		#Find rootfs
		for ((i=0; i<$MAX_DRIVES; i++))
		do

			if [ '/' = "${aDRIVE_MOUNT_TARGET[$i]}" ]; then

				INDEX_DRIVE_BEING_EDITED=$i

				#	Obtain free space (MB)
				local free_space_current=$(df -B M | grep -m1 "${aDRIVE_MOUNT_TARGET[$i]}$" | awk '{print $4}' | sed 's/[^0-9]//g')

				if (( $free_space_current < $free_space_limit )); then

					G_WHIP_MSG "Error:\n\nAvailable free space on RootFS is low ($free_space_current MB). To prevent potential issues due to running out of free space, this script will now be terminated.\n\nPlease free up at least $free_space_limit MB of free space, then try again."

					G_DIETPI-NOTIFY 1 "Insufficient free space on RootFS. $free_space_current MB available, $free_space_limit MB required"

					#	export
					EXIT_CODE=1

				else

					G_DIETPI-NOTIFY 0 "$free_space_current MB available, $free_space_limit MB required"

				fi

				break

			fi

		done

		#Still waiting for Freespace 3 :(

	}

	RootFS_RW_Check(){

		if mount | grep -m1 '[[:blank:]]/[[:blank:]]' | grep -q '(ro,'; then

			G_DIETPI-NOTIFY 1 'RootFS is currently set to R/O.'
			G_DIETPI-NOTIFY 2 "DietPi requires RootFS R/W access. Please run 'dietpi-drive_manager' to re-enable.\n"
			EXIT_CODE=1

		else

			G_DIETPI-NOTIFY 0 'RootFS R/W access verified.\n'

		fi

	}

	Toggle_WriteMode(){

		local line_number=$(grep -m1 -n "[[:space:]]${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}[[:space:]]*.auto" /etc/fstab | cut -f1 -d:)
		local exit_status=0
		local message_result=0

		if (( ${aDRIVE_ISREADONLY_FSTAB[$INDEX_DRIVE_BEING_EDITED]} || ${aDRIVE_ISREADONLY_CURRENTLY[$INDEX_DRIVE_BEING_EDITED]} )); then

			message_result=$(mount -v -o rw,remount "${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}" 2>&1)
			exit_status=$?

			#	Apply this only if no ,ro, exists?
			sed -i "${line_number}s/[[:space:]]defaults,ro,/ defaults,/" /etc/fstab

		else

			sed -i "${line_number}s/[[:space:]]defaults,/ defaults,ro,/" /etc/fstab

			message_result=$(mount -v -o ro,remount "${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}" 2>&1)
			exit_status=$?

		fi

		systemctl daemon-reload
		mount -a

		if (( $exit_status )); then

			G_WHIP_MSG "Failed to apply now:\n\nDue to:\n - $message_result\n\nIf you have set to read only, this will be active on next reboot."

		fi

	}

	TARGETMENUID=0
	MENU_LASTITEM=''

	Menu_Main_Drive_Manager(){

		#Generate menu
		G_WHIP_MENU_ARRAY=()

		#List all available drives
		local drive_available=0
		for ((i=0; i<$MAX_DRIVES; i++))
		do

			drive_available=1

			if (( ${aDRIVE_ISAVAILABLE[$i]} )); then

				#Seperate list if 1st partition on drive
				if grep -qi '1$' <<< "${aDRIVE_MOUNT_SOURCE[$i]}"; then

					local drivepath_no_partitions=$(Return_Drive_Without_Partitions ${aDRIVE_MOUNT_SOURCE[$i]})
					G_WHIP_MENU_ARRAY+=('' "─($drivepath_no_partitions)────────────────────────────────────────")

				fi

				#Drive is fully mounted:
				if (( ${aDRIVE_ISMOUNTED[$i]} )); then

					#| ${aDRIVE_UUID[$i]}
					G_WHIP_MENU_ARRAY+=("${aDRIVE_MOUNT_TARGET[$i]}" ": ${aDRIVE_MOUNT_SOURCE[$i]} | ${aDRIVE_FSTYPE[$i]} | Size: ${aDRIVE_SIZE_TOTAL[$i]} | Used: ${aDRIVE_SIZE_USED[$i]} (${aDRIVE_SIZE_PERCENTUSED[$i]})")

				#Not mounted, why?
				else

					#Drive has no FS:
					if (( ! ${aDRIVE_ISFILESYSTEM[$i]} )); then

						G_WHIP_MENU_ARRAY+=("${aDRIVE_MOUNT_TARGET[$i]}" ": ${aDRIVE_MOUNT_SOURCE[$i]} | No filesystem / format required")

					#Drive is not mounted:
					else

						G_WHIP_MENU_ARRAY+=("${aDRIVE_MOUNT_TARGET[$i]}" ": ${aDRIVE_MOUNT_SOURCE[$i]} | ${aDRIVE_FSTYPE[$i]} | Not mounted")

					fi

				fi

			fi

		done

		G_WHIP_MENU_ARRAY+=("" "───────────────────────────────────────────────────────")

		if (( ! $drive_available )); then

			G_WHIP_MENU_ARRAY+=('Refresh' ': No drives found. Insert a drive and select this option')

		else

			G_WHIP_MENU_ARRAY+=('Refresh' ': Scan for recently added/removed drives')

		fi

		# - User data
		local userdata_location_text="RootFS ($FP_USERDATA_CURRENT)"

		if [[ $FP_USERDATA_CURRENT != $G_FP_DIETPI_USERDATA ]]; then

			userdata_location_text="USB ($FP_USERDATA_CURRENT)"

		fi

		G_WHIP_DEFAULT_ITEM="$MENU_LASTITEM"
		G_WHIP_BUTTON_CANCEL_TEXT='Exit'
		G_WHIP_MENU "Please select a drive to see available options.\n - User data location: $userdata_location_text"
		if (( ! $? )); then

			MENU_LASTITEM="$G_WHIP_RETURNED_VALUE"

			#Refresh
			if [[ $G_WHIP_RETURNED_VALUE == 'Refresh' ]]; then

				Init_Drives_and_Refresh

			#Edit drive
			else

				Init_Drives_and_Refresh

				#Match selected mount target against index
				for ((i=0; i<$MAX_DRIVES; i++))
				do

					if [[ $G_WHIP_RETURNED_VALUE == ${aDRIVE_MOUNT_TARGET[$i]} ]]; then

						# - Check if drive is still attached and available
						if (( ${aDRIVE_ISAVAILABLE[$i]} )); then

							INDEX_DRIVE_BEING_EDITED=$i
							TARGETMENUID=1
							break

						elif [[ $G_WHIP_RETURNED_VALUE ]]; then

							G_WHIP_MSG 'Info:\n\nThis drive is no longer available'
							break

						fi

					fi

				done

			fi

		#Exit
		else

			Menu_Exit

		fi

	}

	Notification(){

		local input=$1

		if (( $1 == 0 )); then

			G_WHIP_MSG "Failed\n\nThe DietPi user data is currently located on this drive:\n - $FP_USERDATA_CURRENT\n\nThe requested option for this drive is not currently possible.\n\nPlease move your user data elsewhere, before trying again:\nhttp://dietpi.com/phpbb/viewtopic.php?f=8&t=478"

		elif (( $1 == 1 )); then

			G_WHIP_MSG "Failed\n\nThe DietPi swapfile is currently located on this drive:\n - $FP_SWAPFILE_CURRENT\n\nThe requested option for this drive is not currently possible.\n\nPlease move the swapfile elsewhere, before trying again."

		fi

	}

	Menu_Drive_Manager_Edit_Drive(){

		#Return to this menu
		TARGETMENUID=1

		local partition_contains_userdata=0
		local partition_contains_swapfile=0

		#Generate menu
		local whiptail_desc=''
		G_WHIP_MENU_ARRAY=()

		whiptail_desc="Mount target: ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}"
		whiptail_desc+="\nMount source: ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}"

		#No filesystem
		if (( ! ${aDRIVE_ISFILESYSTEM[$INDEX_DRIVE_BEING_EDITED]} )); then

			whiptail_desc+='\nStatus:       Drive has no filesystem and must be formatted'

		else

			if (( ${aDRIVE_ISUUIDMOUNT[$INDEX_DRIVE_BEING_EDITED]} )); then

				whiptail_desc+='\nMount method: UUID (Permanent: always mount to "Mount Target")'

			else

				whiptail_desc+='\nMount method: /dev/sd (Warning: mount location not permanent, use UUID)'

			fi

			whiptail_desc+="\nFilesystem:   ${aDRIVE_FSTYPE[$INDEX_DRIVE_BEING_EDITED]}"
			whiptail_desc+="\nUUID:         ${aDRIVE_UUID[$INDEX_DRIVE_BEING_EDITED]}"

			if (( ${aDRIVE_ISMOUNTED[$INDEX_DRIVE_BEING_EDITED]} )); then

				local reserved_blocks_percent_info=''
				local reserved_blocks_percent_current=0
				# Show reserved blocks percentage for ext4 drives behind capacity:
				if [[ ${aDRIVE_FSTYPE[$INDEX_DRIVE_BEING_EDITED]} == 'ext4' ]]; then

					local fp_temp='/tmp/.dietpi-drive_manager_dumpe2fs'
					dumpe2fs -h "${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}" > "$fp_temp"
					local block_count="$(grep -m1 '^Block count:' $fp_temp | awk '{print $3}')"
					local reserved_block_count="$(grep -m1 '^Reserved block count:' $fp_temp | awk '{print $4}')"
					rm "$fp_temp"
					reserved_blocks_percent_current="$(bc -l <<< "scale=3;(100*$reserved_block_count)/$block_count")"
					# Correct rounding to final scale:
					reserved_blocks_percent_current="$(bc -l <<< "scale=2;(($reserved_blocks_percent_current*100)+0.5)/100" | sed 's/^\./0\./' | sed '/.0$/s/0$//' | sed 's/\.0$//')"
					reserved_blocks_percent_info=" (Reserved blocks: $reserved_blocks_percent_current%)"
					G_WHIP_MENU_ARRAY+=('Reserved blocks' ': Adjust percentage of reserved blocks on this drive')

				fi

				whiptail_desc+="\nCapacity:     ${aDRIVE_SIZE_TOTAL[$INDEX_DRIVE_BEING_EDITED]}b$reserved_blocks_percent_info"
				whiptail_desc+="\nUsed:         ${aDRIVE_SIZE_USED[$INDEX_DRIVE_BEING_EDITED]}b (${aDRIVE_SIZE_PERCENTUSED[$INDEX_DRIVE_BEING_EDITED]})"
				whiptail_desc+='\nStatus:       Drive is online and ready for use'

				# - Disable mount control for /boot /rootfs
				if [[ ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]} != '/' && ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]} != '/boot' ]]; then

					G_WHIP_MENU_ARRAY+=('Unmount' ': Allows you to physically remove the drive')

				fi

				if ( [[ ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]} != '/' && $FP_USERDATA_CURRENT == ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}* ]] ) || #off rootfs
					( [[ ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]} == '/' && $FP_USERDATA_CURRENT == $G_FP_DIETPI_USERDATA ]] ); then #on rootfs

					G_WHIP_MENU_ARRAY+=('User data' ": [X] | DietPi user data is currently located on this drive")
					partition_contains_userdata=1

				else

					G_WHIP_MENU_ARRAY+=('User data' ': [ ] | Select to transfer DietPi user data to this drive')

				fi

				#	NB: / rootfs will always be detected in this check, however, no rootFS options for umount and format...
				local swapfile_location="$(grep -m1 '^[[:blank:]]*AUTO_SETUP_SWAPFILE_LOCATION=' /DietPi/dietpi.txt | sed 's/.*=//')"
				local swapfile_size=$(grep -m1 '^[[:blank:]]*AUTO_SETUP_SWAPFILE_SIZE=' /DietPi/dietpi.txt | sed 's/.*=//')
				if [[ $swapfile_location == ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}* && ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]} != '/' ]] ||
					[[ $swapfile_location == '/var/swap' && ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]} == '/' ]]; then

					partition_contains_swapfile=1
					G_WHIP_MENU_ARRAY+=('Swapfile' ": [X] | ${swapfile_size}MB used on this drive, select to change size")

				else

					G_WHIP_MENU_ARRAY+=('Swapfile' ': [ ] | Select to transfer swapfile to this drive')

				fi

				#Read only?
				local read_only_state='[ ]'
				local read_only_state_text='Disabled'
				if (( ${aDRIVE_ISREADONLY_FSTAB[$INDEX_DRIVE_BEING_EDITED]} || ${aDRIVE_ISREADONLY_CURRENTLY[$INDEX_DRIVE_BEING_EDITED]} )); then

					read_only_state='[X]'
					read_only_state_text='Enabled'

				fi
				G_WHIP_MENU_ARRAY+=('Read Only' ": $read_only_state | Select to toggle RW/RO modes")
				whiptail_desc+="\nRead only:    $read_only_state_text"

				if (( ${aDRIVE_ISUUIDMOUNT[$INDEX_DRIVE_BEING_EDITED]} )); then

					G_WHIP_MENU_ARRAY+=('Mount Method' ': Change from UUID to /dev/sd')

				else

					G_WHIP_MENU_ARRAY+=('Mount Method' ': Change from /dev/sd to UUID')

				fi

			else

				whiptail_desc+='\nStatus:       Drive is not mounted and can be unplugged'

				G_WHIP_MENU_ARRAY+=('Mount' ": Mount the drive to ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}")

			fi

		fi

		# - Disable format/check&repair for /boot /rootfs
		if [[ ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]} != '/' && ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]} != '/boot' ]]; then

			G_WHIP_MENU_ARRAY+=('Check & Repair' ': Check and optionally repair filesystem')
			G_WHIP_MENU_ARRAY+=('Format' ': Wipe all data and format drive with ext4')

		fi

		#Transfer RootFS
		if [[ ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]} != $FP_ROOTFS_SOURCE ]] &&
			(( $G_HW_MODEL < 10 || $G_HW_MODEL == 10 || $G_HW_MODEL == 11 || $G_HW_MODEL == 12 )); then

			G_WHIP_MENU_ARRAY+=('Transfer RootFS' ': Transfer RootFS to this drive')

		fi

		G_WHIP_DEFAULT_ITEM="$MENU_LASTITEM"
		G_WHIP_MENU "$whiptail_desc"
		if (( ! $? )); then

			MENU_LASTITEM="$G_WHIP_RETURNED_VALUE"

			if [[ $G_WHIP_RETURNED_VALUE == 'Mount' ]]; then

					# - update fstab
					sed -i -e "\@${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}[[:space:]]@s@^#@@" /etc/fstab
					systemctl daemon-reload

					mount "${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}"

			elif [[ $G_WHIP_RETURNED_VALUE == 'Unmount' ]]; then

				# - Disallow if userdata is located on this drive!
				if (( $partition_contains_userdata )); then

					Notification 0

				elif (( $partition_contains_swapfile )); then

					Notification 1

				else

					umount "${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}"

					# - update fstab
					sed -i -e "\@${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}[[:space:]]@s@^#*@#@" /etc/fstab
					systemctl daemon-reload

				fi

			elif [[ $G_WHIP_RETURNED_VALUE == 'Swapfile' ]]; then

				local min=0
				local current_freespace=$(G_CHECK_FREESPACE ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]})
				local max=$(( $current_freespace - 2000 ))
				if (( $max < $min )); then

					G_WHIP_MSG "Error: Insufficent free space on ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}, a minimum of 2GB is required ($current_freespace MB available)."

				else

					G_WHIP_DEFAULT_ITEM=$swapfile_size
					G_WHIP_INPUTBOX "Please input a new value for swapfile size (MB):\n\nSwapfile has a swapiness setting of 1, and, is used only to prevent out of memory errors.\n\n - Recommended value = 1 (auto)\n - 0 = Disable swapfile\n - 1 = Auto size swapfile (2GB - RAM = size)\n - 2 - $max = Manual size"
					if (( $? == 0 )); then

						if G_CHECK_VALIDINT $G_WHIP_RETURNED_VALUE &&
							(( $G_WHIP_RETURNED_VALUE > $min && $G_WHIP_RETURNED_VALUE < $max )); then

							local fp_target_swapfile='/var/swap'
							if [[ ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]} != '/' ]]; then

								fp_target_swapfile="${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}/.swapfile"

							fi

							/DietPi/dietpi/func/dietpi-set_dphys-swapfile $G_WHIP_RETURNED_VALUE "$fp_target_swapfile"

						else

							G_WHIP_MSG 'Invalid value'

						fi

					fi

				fi

			elif [[ $G_WHIP_RETURNED_VALUE == 'Mount Method' ]]; then

				#UUID exists?
				if [[ ${aDRIVE_UUID[$INDEX_DRIVE_BEING_EDITED]} == 'NULL' ]]; then

					G_WHIP_MSG 'Error:\n\nThis drive does not have a UUID assigned. Unable to proceed.'

				else

					if (( ${aDRIVE_ISUUIDMOUNT[$INDEX_DRIVE_BEING_EDITED]} )); then

						sed -i "s@^UUID=${aDRIVE_UUID[$INDEX_DRIVE_BEING_EDITED]}@${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}@g" /etc/fstab

					else

						sed -i "s@^${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}@UUID=${aDRIVE_UUID[$INDEX_DRIVE_BEING_EDITED]}@g" /etc/fstab

					fi

					# - update systemd to use fstab UUID changes
					systemctl daemon-reload

				fi

			elif [[ $G_WHIP_RETURNED_VALUE == 'Reserved blocks' ]]; then

				while true
				do

					G_WHIP_DEFAULT_ITEM="$reserved_blocks_percent_current"
					G_WHIP_INPUTBOX 'Ext4 formatted drives allow the reservation of drive space for the root user to assure system functionality, if filled by other users or processes, and to avoid fragmentation of large files.\n\nHowever, on modern drives, the default of 5% reserved blocks is often by orders of magnitude larger than necessary. You may want to reduce the percentage to an absolute reserved space of about 500 MiB, which should be enough, to enable root user starting and maintaining the system. Additionally, on non rootfs drives reserved blocks are not necessary at all.\n\nPlease enter the desired percentage of reserved blocks, e.g. "0.05" for 0.05% or "10" for 10%.\nNote: Only values between "0" and "50" are allowed.'
					if (( $? )); then

						break

					else

						if grep -qE '^[0-9]*\.?[0-9]*$' <<< "$G_WHIP_RETURNED_VALUE" &&
							[[ $G_WHIP_RETURNED_VALUE != '.' ]] &&
							(( $(bc -l <<< "$G_WHIP_RETURNED_VALUE <= 50") )); then

							G_RUN_CMD tune2fs -m "$G_WHIP_RETURNED_VALUE" "${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}"
							break

						else

							G_WHIP_MSG 'Error: Allowed are only integers or floats between "0" and "50", e.g. "10" or "0.5".\n\nPlease try again...'

						fi

					fi

				done

			elif [[ $G_WHIP_RETURNED_VALUE == 'User data' ]]; then

				if [[ ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}'/dietpi_userdata' != $FP_USERDATA_CURRENT ]]; then

					local target_userdata_dir="${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]}"
					if [[ ${aDRIVE_FSTYPE[$INDEX_DRIVE_BEING_EDITED]} == 'vfat' ]]; then

						G_WHIP_MSG 'Warning:\n\nFAT32 does not support file and folder permissions. Some of the programs which use the DietPi user directory (eg: Owncloud data storage), rely on permissions to function correctly.\n\nIf you continue with the DietPi user data move to this FAT32 drive, programs may have issues reading and writing data.'

					fi

					#	Assign location if under RootFS
					if [[ ${aDRIVE_MOUNT_TARGET[$INDEX_DRIVE_BEING_EDITED]} == '/' ]]; then

						target_userdata_dir='/mnt'

					fi

					target_userdata_dir+='/dietpi_userdata'

					G_WHIP_YESNO "Your user data will be moved:\n - From: $FP_USERDATA_CURRENT\n - To: $target_userdata_dir\n\nDo you wish to continue?"
					if (( ! $? )); then

						/DietPi/dietpi/func/dietpi-set_userdata "$FP_USERDATA_CURRENT" "$target_userdata_dir"
						sleep 1

					fi

				fi

			elif [[ $G_WHIP_RETURNED_VALUE == 'Format' ]]; then

				FORMAT_RECREATE_PARTITION_TABLE=1

				local drivepath_no_partitions=$(Return_Drive_Without_Partitions ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]})

				# - Disallow if userdata is located on this drive!
				if (( $partition_contains_userdata )); then

					Notification 0

				elif (( $partition_contains_swapfile )); then

					Notification 1

				#	user must unmount all partitions on this drive, before we can format
				elif (( $(df -Ph | grep -ci -m1 "^$drivepath_no_partitions" ) )); then

					G_WHIP_MSG 'As DietPi will format the entire drive with 1 partition, you must unmount ALL partitions on this disk, before formatting is available.'

				else

					TARGETMENUID=2

				fi

			#Transfer RootFS
			elif [[ $G_WHIP_RETURNED_VALUE == 'Transfer RootFS' ]]; then

				FORMAT_RECREATE_PARTITION_TABLE=0

				#	user must unmount partition before format
				if (( ${aDRIVE_ISMOUNTED[$INDEX_DRIVE_BEING_EDITED]} )); then

					G_WHIP_MSG 'Partition must be unmounted, before format and RootFS transfer can begin.\n\nPlease unmount the partition, then try again.'

				else

					G_WHIP_YESNO "This process will move RootFS data to another location. This may increase filesystem performance when using a USB drive over SD card, however, there are some limitations:\n\n - The SD/EMMC card is still required for the boot process\n - ALL data on the target PARTITION will be deleted\n\nNB: As this feature is still in testing, we recommend you use this feature on a fresh installation only.\n\nDo you wish to continue?"
					if (( ! $? )); then

						G_WHIP_MSG 'On the next screen, you will be asked to format the target partition.\n\nPlease see the following recommendations for RootFS target filesystem type:\n\n - Odroid\nRootFS transfer supports ONLY EXT4 format\n\n - RPi\nRootFS transfer supports EXT4, BTRFS and F2FS'

						#NB: We dont enter main loop in this func
						TARGETMENUID=2
						while (( $TARGETMENUID == 2 ))
						do

							Menu_Format

						done

						if (( $FORMAT_COMPLETED )); then

							RootFS_Move

						fi

					fi

				fi

			elif [[ $G_WHIP_RETURNED_VALUE == 'Read Only' ]]; then

				Toggle_WriteMode
				ROOTFS_RW_CHECKED=0

			elif [[ $G_WHIP_RETURNED_VALUE == 'Check & Repair' ]]; then

				if (( ${aDRIVE_ISMOUNTED[$INDEX_DRIVE_BEING_EDITED]} )); then

					G_WHIP_YESNO 'For safe check and repair, the drive needs to be unmounted.\n\nDo you want to continue with the drive being unmounted automatically?'
					(( $? )) && TARGETMENUID=1 && return

					# - disable swap
					if (( $partition_contains_swapfile )); then

						G_RUN_CMD swapoff -a

					fi

					# - Unmount drive
					G_RUN_CMD umount ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}

				fi

				if [[ ${aDRIVE_FSTYPE[$INDEX_DRIVE_BEING_EDITED]} =~ ext ]]; then

					local fsck_dry='e2fsck -n -f'
					local fsck_fix='e2fsck -y -f'

				elif [[ ${aDRIVE_FSTYPE[$INDEX_DRIVE_BEING_EDITED]} == exfat ]]; then

					G_AG_CHECK_INSTALL_PREREQ exfat-utils exfat-fuse
					local fsck_fix='exfatfsck'

				elif [[ ${aDRIVE_FSTYPE[$INDEX_DRIVE_BEING_EDITED]} =~ fat ]]; then

					G_AG_CHECK_INSTALL_PREREQ dosfstools
					local fsck_dry='fsck.fat -n'
					local fsck_fix='fsck.fat -y'

				elif [[ ${aDRIVE_FSTYPE[$INDEX_DRIVE_BEING_EDITED]} == ntfs ]]; then

					G_AG_CHECK_INSTALL_PREREQ ntfs-3g
					local fsck_dry='ntfsfix -n'
					local fsck_fix='ntfsfix'

				elif [[ ${aDRIVE_FSTYPE[$INDEX_DRIVE_BEING_EDITED]} =~ hfs ]]; then

					G_AG_CHECK_INSTALL_PREREQ hfsplus hfsprogs hfsutils
					local fsck_dry='fsck.hfsplus -n -f'
					local fsck_fix='fsck.hfsplus -y -f'

				elif [[ ${aDRIVE_FSTYPE[$INDEX_DRIVE_BEING_EDITED]} == f2fs ]]; then

					G_AG_CHECK_INSTALL_PREREQ f2fs-tools
					local fsck_dry='fsck.f2fs'
					local fsck_fix='fsck.f2fs -f'

				elif [[ ${aDRIVE_FSTYPE[$INDEX_DRIVE_BEING_EDITED]} == btrfs ]]; then

					G_AG_CHECK_INSTALL_PREREQ btrfs-tools
					local fsck_dry='btrfs check --readonly'
					local fsck_fix='btrfs check --repair'

				else

					G_WHIP_MSG "File system checks are currently not supported for '${aDRIVE_FSTYPE[$INDEX_DRIVE_BEING_EDITED]}'. Aborting..."
					TARGETMENUID=1
					return

				fi

				# Do dry-run first for file systems supporting it:
				if [[ $fsck_dry ]]; then

					G_WHIP_MSG "The following drive will now be checked for errors:\n${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}\n\nNo repair will be completed during this process. An option to repair the drive, will be provided after the check."
					$fsck_dry ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]} &> /tmp/.dietpi-drive_manager_check.log
					G_WHIP_VIEWLOG /tmp/.dietpi-drive_manager_check.log
					rm /tmp/.dietpi-drive_manager_check.log &> /dev/null

				fi

				G_WHIP_YESNO "Would you like to run an automated repair on the following drive now?\n       ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}\n
NB:
- Automated repair steps potentially lead to data loss, which would have been able to recover by professional drive recovery services.
- If the data is extremely important and you don't have any backup, you might want to hand the drive to a recovery service as is.
- These services are usually very expensive, but might be able to recover more data than (after) this automated repair steps!"
				if (( ! $? )); then

					$fsck_fix ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]} &> /tmp/.dietpi-drive_manager_repair.log
					G_WHIP_VIEWLOG /tmp/.dietpi-drive_manager_repair.log
					rm /tmp/.dietpi-drive_manager_repair.log &> /dev/null

				fi

				# - Remount all drives
				G_RUN_CMD mount -a

				# - re-enable swap
				if (( $partition_contains_swapfile )); then

					G_RUN_CMD swapon -a

				fi

			fi

		#Exit
		else

			TARGETMENUID=0

		fi

		unset whiptail_desc

		#Always init/refresh drives for next loop
		Init_Drives_and_Refresh

	}

	Menu_Format(){

		TARGETMENUID=2

		FORMAT_COMPLETED=0

		local partition_table_text='MBR'
		if (( $FORMAT_GPT )); then

			partition_table_text='GPT'

		fi

		local format_type_text='EXT4'
		if (( $FORMAT_FILESYSTEM_TYPE == 1 )); then

			format_type_text='NTFS'

		elif (( $FORMAT_FILESYSTEM_TYPE == 2 )); then

			format_type_text='FAT32'

		elif (( $FORMAT_FILESYSTEM_TYPE == 3 )); then

			format_type_text='HFS+'

		elif (( $FORMAT_FILESYSTEM_TYPE == 4 )); then

			format_type_text='BTRFS'

		elif (( $FORMAT_FILESYSTEM_TYPE == 5 )); then

			format_type_text='F2FS'

		elif (( $FORMAT_FILESYSTEM_TYPE == 6 )); then

			format_type_text='EXFAT'

		fi

		G_WHIP_MENU_ARRAY=()

		G_WHIP_MENU_ARRAY+=('Partition Type' ": $partition_table_text")
		G_WHIP_MENU_ARRAY+=('Filesystem Type' ": $format_type_text")
		G_WHIP_MENU_ARRAY+=('Format' ': Wipe all data and format drive with current options')

		G_WHIP_DEFAULT_ITEM="$MENU_LASTITEM"
		G_WHIP_MENU 'Please select formatting options:'
		if (( ! $? )); then

			MENU_LASTITEM="$G_WHIP_RETURNED_VALUE"

			if [[ $G_WHIP_RETURNED_VALUE == 'Partition Type' ]]; then

				FORMAT_GPT=1

				G_WHIP_YESNO "Would you like to use GPT or MBR parition table?\n - GPT is required for 2TB+ drives\n - MBR does NOT support 2TB+ drives\n\nIf unsure, select GPT (default)"
				if (( ! $? )); then

					FORMAT_GPT=0
					partition_table_text='MBR'

				fi

			elif [[ $G_WHIP_RETURNED_VALUE == 'Filesystem Type' ]]; then

				G_WHIP_MENU_ARRAY=(

					'0' ': EXT4   | Default (Recommended)'
					'1' ': NTFS   | Windows (High CPU usage)'
					'2' ': FAT32  | All OS (4GB filesize limit)'
					'3' ': HFS+   | Mac OS X (Intel Mac default file system)'
					'4' ': BTRFS  | Linux (Modern filesystem)'
					'5' ': F2FS   | Linux (Flash filesystem)'
					'6' ': exFAT  | Windows (Flash filesystem)'

				)

				G_WHIP_DEFAULT_ITEM="$FORMAT_FILESYSTEM_TYPE"
				G_WHIP_MENU "Please select a filesystem type for this format:\n\nEXT4:\nHighly recommended if you plan to use this drive solely on this system (dedicated drive).\n\nNTFS:\nRecommended if you plan to use this drive on a Windows system. High CPU usage during transfers.\n\nFull list of different filesystem types:\nhttp://dietpi.com/phpbb/viewtopic.php?f=8&t=673&p=2898#p2898"
				if (( ! $? )); then

					# Install FS pre-reqs
					# - NTFS
					if (( $G_WHIP_RETURNED_VALUE == 1 )); then

						G_AG_CHECK_INSTALL_PREREQ ntfs-3g

					# - FAT32
					elif (( $G_WHIP_RETURNED_VALUE == 2 )); then

						G_AG_CHECK_INSTALL_PREREQ dosfstools

					# - HFS+
					elif (( $G_WHIP_RETURNED_VALUE == 3 )); then

						G_AG_CHECK_INSTALL_PREREQ hfsplus hfsprogs hfsutils

					# - Btrfs
					elif (( $G_WHIP_RETURNED_VALUE == 4 )); then

						G_AG_CHECK_INSTALL_PREREQ btrfs-tools

 					# - F2FS
					elif (( $G_WHIP_RETURNED_VALUE == 5 )); then

						G_AG_CHECK_INSTALL_PREREQ f2fs-tools

					# - exFAT
					elif (( $G_WHIP_RETURNED_VALUE == 6 )); then

						G_AG_CHECK_INSTALL_PREREQ exfat-utils exfat-fuse

					fi

					FORMAT_FILESYSTEM_TYPE="$G_WHIP_RETURNED_VALUE"

				fi

			elif [[ $G_WHIP_RETURNED_VALUE == 'Format' ]]; then

				local drivepath_no_partitions=$(Return_Drive_Without_Partitions ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]})
				local text_desc="Format Drive:\n - $drivepath_no_partitions\n - UUID=${aDRIVE_UUID[$INDEX_DRIVE_BEING_EDITED]}\n - Partition table: $partition_table_text\n - Filesystem type: $format_type_text\n\nALL DATA and PARTITIONS on this drive will be DELETED.\nDo you wish to continue?"

				if (( ! $FORMAT_RECREATE_PARTITION_TABLE )); then

					text_desc="Format partition:\n - ${aDRIVE_MOUNT_SOURCE[$INDEX_DRIVE_BEING_EDITED]}\n - UUID=${aDRIVE_UUID[$INDEX_DRIVE_BEING_EDITED]}\n - Partition table: $partition_table_text\n - Filesystem type: $format_type_text\n\nALL DATA on this partition will be DELETED.\nDo you wish to continue?"

				fi

				G_WHIP_YESNO "Start format?\n\n$text_desc"
				if (( ! $? )); then

					Run_Format

					TARGETMENUID=0

				fi

			fi

		else

			TARGETMENUID=1

		fi

	}

	Menu_Select_Mount_Location(){

		#Generate menu
		G_WHIP_MENU_ARRAY=()

		df -Ph | tail -n +2 | grep -v 'tmpfs[[:space:]]' | grep -v '^udev' > /tmp/dietpi-drive_manager_selmnt

		while read line
		do

			G_WHIP_MENU_ARRAY+=("$(echo -e $line | awk '{print $6}')" ": $(echo -e $line | awk '{print $1}') | size: $(echo -e $line | awk '{print $2}') | available: $(echo -e $line | awk '{print $4}')")

		done < /tmp/dietpi-drive_manager_selmnt
		rm /tmp/dietpi-drive_manager_selmnt

		G_WHIP_DEFAULT_ITEM="$MENU_LASTITEM"
		G_WHIP_MENU 'Please select a mount location to use:'
		if (( ! $? )); then

			local drive_manager_selection="$G_WHIP_RETURNED_VALUE"

			G_DIETPI-NOTIFY 0 "Drive mount selected: $drive_manager_selection"
			echo -e "$drive_manager_selection" > "$FP_DRIVE_MANAGER_SELECTION"

		fi

	}

	Menu_Exit(){

		G_WHIP_SIZE_X_MAX=50
		G_WHIP_YESNO "Exit $G_PROGRAM_NAME?"
		if (( ! $? )); then

			#exit
			TARGETMENUID=-1

		else

			#Return to Main Menu
			TARGETMENUID=0

		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////
	if (( $INPUT >= 1 )); then

		SERVICE_CONTROL=0

	fi
	#-----------------------------------------------------------------------------------
	# Stop Services
	if (( $SERVICE_CONTROL )); then

		/DietPi/dietpi/dietpi-services stop

	fi
	#-----------------------------------------------------------------------------------
	#Generate /etc/fstab based on current drive mounts
	if (( $INPUT == 4 )); then

		VAR_LOG_SIZE=$(grep -m1 '^AUTO_SETUP_RAMLOG_MAXSIZE=' /DietPi/dietpi.txt | sed 's/^.*=//')
		if [[ -z $VAR_LOG_SIZE ]]; then

			VAR_LOG_SIZE=20

		fi

		cat << _EOF_ > /etc/fstab
#Samba Client------------------------------------------------------
#/mnt/samba . Please use dietpi-config and the Networking Options: NAS menu to setup this mount

#FTP Client Mount--------------------------------------------------
#/mnt/ftp_client . Please use dietpi-config and the Networking Options: NAS menu to setup this mount

#NFS Client Mount--------------------------------------------------
#/mnt/nfs_client . Please use dietpi-config and the Networking Options: NAS menu to setup this mount

#TMPFS / MISC ------------------------------------------------------
proc            /proc           proc    defaults											0 0
tmpfs 			/tmp  			tmpfs 	defaults,noatime,nodev,nosuid,mode=1777				0 0
tmpfs 			/var/log 		tmpfs 	defaults,size=${VAR_LOG_SIZE}m,noatime,nodev,nosuid,mode=1777	0 0
tmpfs 			/DietPi 		tmpfs 	defaults,size=10m,noatime,nodev,nosuid,mode=1777	0 0

#Internal Drives---------------------------------------------------
_EOF_

		Init_Drives_and_Refresh

	#Return 1 if RootFS is RO
	elif (( $INPUT == 3 )); then

		RootFS_RW_Check

	#Return for low free space check
	elif (( $INPUT == 2 )); then

		Init_Drives_and_Refresh
		RootFS_Low_Free_Space_Check

	#Menu system for user to select an active mount and return value
	elif (( $INPUT == 1 )); then

		Init_Drives_and_Refresh
		Menu_Select_Mount_Location

	#Drive Manager
	else

		Init_Drives_and_Refresh

		while (( $TARGETMENUID > -1 )); do

			printf '\ec'

			if (( $TARGETMENUID == 0 )); then

				Menu_Main_Drive_Manager

			elif (( $TARGETMENUID == 1 )); then

				Menu_Drive_Manager_Edit_Drive

			elif (( $TARGETMENUID == 2 )); then

				Menu_Format

			fi

		done

	fi
	#-----------------------------------------------------------------------------------
	#Destroy
	Destroy

	#-----------------------------------------------------------------------------------
	# Start Services
	if (( $SERVICE_CONTROL )); then

		/DietPi/dietpi/dietpi-services start

	fi
	#-----------------------------------------------------------------------------------
	exit $EXIT_CODE
	#-----------------------------------------------------------------------------------
}
