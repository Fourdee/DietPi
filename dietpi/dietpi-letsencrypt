#!/bin/bash
{
	#////////////////////////////////////
	# DietPi Lets Encrypt
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	#////////////////////////////////////
	#
	# Info:
	# - filename /DietPi/dietpi/dietpi-letsencrypt
	# - Menu Frontend for Letsencrypt with CLI options for use on DietPi systems.
	#
	# usage:
	# - /DietPi/dietpi/dietpi-letsencrypt   = Menu
	# - /DietPi/dietpi/dietpi-letsencrypt 1 = Create/Renew/Apply cert
	#////////////////////////////////////

	#Import DietPi-Globals ---------------------------------------------------------------
	. /DietPi/dietpi/func/dietpi-globals
	G_CHECK_ROOT_USER
	G_CHECK_ROOTFS_RW
	export G_PROGRAM_NAME='DietPi-Letsencrypt'
	G_INIT
	#Import DietPi-Globals ---------------------------------------------------------------

	#Grab Input
	INPUT=0
	if (( $(G_CHECK_VALIDINT $1) )); then

		INPUT=$1

	fi
	
	#/////////////////////////////////////////////////////////////////////////////////////
	#Globals
	#/////////////////////////////////////////////////////////////////////////////////////
	DP_LOGFILE='/var/log/dietpi-letsencrypt.log'

	DP_CRON='/etc/systemd/system/certbot.service.d'
	(( $G_DISTRO < 4 )) && DP_CRON='/etc/cron.weekly/dietpi-letsencrypt'

	DP_LETSENCRYPT_BINARY='/usr/bin/certbot'
	(( $G_DISTRO < 4 )) && DP_LETSENCRYPT_BINARY='/etc/certbot_scripts/certbot-auto'

	LETSENCRYPT_INSTALLED=0
	[ -f "$DP_LETSENCRYPT_BINARY" ] && LETSENCRYPT_INSTALLED=1

	LETSENCRYPT_DOMAIN='mydomain.com'
	LETSENCRYPT_EMAIL='myemail@email.com'
	LETSENCRYPT_REDIRECT=0
	LETSENCRYPT_HSTS=0
	LETSENCRYPT_KEYSIZE=4096

	Run_Lets_Encrypt(){

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" "Running CertBot"

		#------------------------------------------------------------------------------------------------------
		#ALL | Create cron job for cert renewal on Jessie only, as on Stretch+ it will be done via systemd service:
		if (( $G_DISTRO < 4 )); then

			cat << _EOF_ > "$DP_CRON"
#!/bin/bash
{
	#////////////////////////////////////
	# DietPi-LetsEncrypt Autorenew script
	#
	#////////////////////////////////////
	#
	# Info:
	# - Location $DP_CRON
	#
	#////////////////////////////////////

	#----------------------------------------------------------------
	# Main Loop
	#----------------------------------------------------------------

	/etc/certbot_scripts/certbot-auto -q renew &>> $DP_LOGFILE
	[ -f /home/minio-user/.minio/dietpi-cert-renewl.sh ] && /home/minio-user/.minio/dietpi-cert-renewl.sh &>> $DP_LOGFILE
	[ -f /etc/letsencrypt/live/$LETSENCRYPT_DOMAIN/combined.pem ] &&
	cat /etc/letsencrypt/live/$LETSENCRYPT_DOMAIN/privkey.pem /etc/letsencrypt/live/$LETSENCRYPT_DOMAIN/cert.pem > /etc/letsencrypt/live/$LETSENCRYPT_DOMAIN/combined.pem

	#----------------------------------------------------------------
	exit
	#----------------------------------------------------------------
}
_EOF_
			chmod +x "$DP_CRON"

		fi

		#------------------------------------------------------------------------------------------------------
		#apache2
		if (( $(ps aux | grep -ci -m1 '[a]pache') )); then

			G_DIETPI-NOTIFY 0 'Apache2 webserver detected'
			local dp_defaultsite='/etc/apache2/sites-available/000-default.conf'

			#Add ServerName if it doesnt exist. This is required to prevent letsencrypt compaining about vhost with no domain.
			if (( ! $(cat "$dp_defaultsite" | grep -ci -m1 'ServerName') )); then

				sed -i "/ServerAdmin /a ServerName" "$dp_defaultsite"

				#log
				echo -e "ServerName entry not found in $dp_defaultsite. Adding it now." >> "$DP_LOGFILE"

			fi

			#Apply domain name
			sed -i "/ServerName/c\        ServerName $LETSENCRYPT_DOMAIN" "$dp_defaultsite"

			#Restart apache2 to apply ServerName changes.
			systemctl restart apache2

			local options='--apache'
			#Use webroot authentication on Stretch+ for now: https://github.com/Fourdee/DietPi/issues/734#issuecomment-361774084
			(( $G_DISTRO > 3 )) && options='-a webroot -w /var/www/ -i apache'
			(( $LETSENCRYPT_REDIRECT )) && options+=' --redirect' || options+=' --no-redirect'
			(( $LETSENCRYPT_HSTS )) && options+=' --hsts'

			#Cert me up Apache2
			$DP_LETSENCRYPT_BINARY $options --agree-tos --rsa-key-size "$LETSENCRYPT_KEYSIZE" -m "$LETSENCRYPT_EMAIL" -d "$LETSENCRYPT_DOMAIN"

		#------------------------------------------------------------------------------------------------------
		#Lighttpd
		elif (( $(ps aux | grep -ci -m1 '[l]ighttpd') )); then

			G_DIETPI-NOTIFY 0 'Lighttpd webserver detected'
			# - Cert me up
			/DietPi/dietpi/dietpi-services stop

			$DP_LETSENCRYPT_BINARY certonly --standalone --agree-tos --rsa-key-size "$LETSENCRYPT_KEYSIZE" -m "$LETSENCRYPT_EMAIL" -d "$LETSENCRYPT_DOMAIN"

			# - Create combined key
			cd /etc/letsencrypt/live/"$LETSENCRYPT_DOMAIN"
			cat privkey.pem cert.pem > combined.pem

			# Add Lighttpd renewal to certbot system service:
			if (( $G_DISTRO > 3 )); then

				[ -d "$DP_CRON" ] || mkdir "$DP_CRON"
				cat << _EOF_ > "$DP_CRON"/dietpi-lighttpd.conf
[Service]
ExecStartPost=/bin/bash -c '/bin/cat /etc/letsencrypt/live/$LETSENCRYPT_DOMAIN/privkey.pem /etc/letsencrypt/live/$LETSENCRYPT_DOMAIN/cert.pem > /etc/letsencrypt/live/$LETSENCRYPT_DOMAIN/combined.pem'
_EOF_

			fi

			cat << _EOF_ > /etc/lighttpd/conf-enabled/letsencrypt.conf
\$SERVER["socket"] == ":443" {
		ssl.engine = "enable"
		ssl.pemfile = "/etc/letsencrypt/live/$LETSENCRYPT_DOMAIN/combined.pem"
		ssl.ca-file =  "/etc/letsencrypt/live/$LETSENCRYPT_DOMAIN/fullchain.pem"
		#ssl.cipher-list = "ECDHE-RSA-AES256-SHA384:AES256-SHA256:HIGH:!MD5:!aNULL:!EDH:!AESGCM"
		ssl.cipher-list = "ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS"
		ssl.honor-cipher-order = "enable"
		ssl.use-sslv2 = "disable"
		ssl.use-sslv3 = "disable"
}
_EOF_

			# Redirect
			rm /etc/lighttpd/conf-enabled/redirect.conf
			if (( $LETSENCRYPT_REDIRECT )); then

				cat << _EOF_ > /etc/lighttpd/conf-enabled/redirect.conf
\$HTTP["scheme"] == "http" {
	# capture vhost name with regex conditiona -> %0 in redirect pattern
	# must be the most inner block to the redirect rule
	\$HTTP["host"] =~ ".*" {
		url.redirect = (".*" => "https://%0\$0")
	}
}
_EOF_

			fi

			# HSTS
			if (( $LETSENCRYPT_HSTS )); then

				G_CONFIG_INJECT '"mod_setenv"' '\t"mod_setenv",' /etc/lighttpd/lighttpd.conf 'server.modules = ('
				cat << _EOF_ > /etc/lighttpd/conf-available/99-dietpi-hsts.conf
\$HTTP["scheme"] == "https" {
	setenv.add-response-header = ( "Strict-Transport-Security" => "max-age=31536000; includeSubdomains; preload;" )
}
_EOF_
				lighttpd-enable-mod dietpi-hsts

			fi

			/etc/init.d/lighttpd force-reload


		#------------------------------------------------------------------------------------------------------
		# Nginx
		elif (( $(ps aux | grep -ci -m1 '[n]ginx') )); then

			G_DIETPI-NOTIFY 0 'Nginx webserver detected'
			local nginx_defaultsite='/etc/nginx/sites-available/default'

			# Apply domain name
			sed -i "/server_name/c\        server_name $LETSENCRYPT_DOMAIN;" "$nginx_defaultsite"

			#Restart nginx to apply ServerName changes.
			systemctl restart nginx

			local options='--nginx'
			#Use webroot authentication on Stretch+ for now: https://github.com/Fourdee/DietPi/issues/734#issuecomment-361774084
			(( $G_DISTRO > 3 )) && options='-a webroot -w /var/www/ -i nginx'
			(( $LETSENCRYPT_REDIRECT )) && options+=' --redirect' || options+=' --no-redirect'
			(( $LETSENCRYPT_HSTS )) && options+=' --hsts'

			#Cert me up Nginx
			$DP_LETSENCRYPT_BINARY $options --agree-tos --rsa-key-size "$LETSENCRYPT_KEYSIZE" -m "$LETSENCRYPT_EMAIL" -d "$LETSENCRYPT_DOMAIN"


		#------------------------------------------------------------------------------------------------------
		#Minio
		elif (( $(ps aux | grep -ci -m1 '[m]inio') )); then

			G_DIETPI-NOTIFY 0 'Minio S3 server detected'
			# - Cert me up
			/DietPi/dietpi/dietpi-services stop

			$DP_LETSENCRYPT_BINARY certonly --standalone --staple-ocsp --agree-tos --rsa-key-size "$LETSENCRYPT_KEYSIZE" -m "$LETSENCRYPT_EMAIL" -d "$LETSENCRYPT_DOMAIN"

			# Ensure strict permissions while copying:
			umask 077

			# Locate them correctly (THIS didn't work as symlinks)
			cp /etc/letsencrypt/live/$LETSENCRYPT_DOMAIN/fullchain.pem /home/minio-user/.minio/certs/public.crt
			cp /etc/letsencrypt/live/$LETSENCRYPT_DOMAIN/privkey.pem /home/minio-user/.minio/certs/private.key

			# Own those certs!
			chown minio-user:minio-user /home/minio-user/.minio/certs/public.crt /home/minio-user/.minio/certs/private.key
			chmod 400 /home/minio-user/.minio/certs/public.crt /home/minio-user/.minio/certs/private.key

			# Creation permissions back to default:
			umask 022

			# Add SSL to config file
			G_CONFIG_INJECT 'MINIO_OPTS="' 'MINIO_OPTS="--address :443"' /etc/default/minio

			# Allow SSL binding for non root user
			# - Install libcap2-bin, which provides setcap command, not installed by default on DietPi:
			G_AGI libcap2-bin
			setcap CAP_NET_BIND_SERVICE=+eip /usr/local/bin/minio

			# Create renewl script
			cat << _EOF_ > /home/minio-user/.minio/dietpi-cert-renewl.sh
#!/bin/bash
# Minio only works with copied and owned certs. Upon renewal the new certs needs to be copied and re-owned
systemctl stop minio.service

# Ensure strict permissions while copying:
umask 077

# Copy to correct Location
cp /etc/letsencrypt/live/$LETSENCRYPT_DOMAIN/fullchain.pem /home/minio-user/.minio/certs/public.crt
cp /etc/letsencrypt/live/$LETSENCRYPT_DOMAIN/privkey.pem /home/minio-user/.minio/certs/private.key

# Re-Own those certs!
chown minio-user:minio-user /home/minio-user/.minio/certs/public.crt /home/minio-user/.minio/certs/private.key
chmod 400 /home/minio-user/.minio/certs/public.crt /home/minio-user/.minio/certs/private.key

systemctl start minio.service
_EOF_

			# Change permissions on renewal script
			chmod +x /home/minio-user/.minio/dietpi-cert-renewl.sh

			# Add Minio renewal to certbot system service:
			if (( $G_DISTRO > 3 )); then

				[ -d "$DP_CRON" ] || mkdir "$DP_CRON"
				cat << _EOF_ > "$DP_CRON"/dietpi-minio.conf
[Service]
ExecStartPost=/home/minio-user/.minio/dietpi-cert-renewl.sh &>> $DP_LOGFILE
_EOF_

			fi

		else

			echo -e "Error: No compatible and/or active webserver was found. Aborting." >> "$DP_LOGFILE"
			if (( $INPUT == 0 )); then

				G_WHIP_MSG 'Error: No compatible and/or active webserver was found. Aborting.'

			fi

		fi

		#------------------------------------------------------------------------------------------------------

		if (( $INPUT == 0 )); then

			echo -e ""
			read -p "Press any key to continue..."
			echo -e ""

		fi

		#Restart services
		/DietPi/dietpi/dietpi-services restart

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Settings File
	#/////////////////////////////////////////////////////////////////////////////////////
	DP_SETTINGS="/DietPi/dietpi/.dietpi-letsencrypt"

	Read_Settings_File(){

		local sed_index=1

		LETSENCRYPT_DOMAIN=$(sed -n "$sed_index"p $DP_SETTINGS);((sed_index++))
		LETSENCRYPT_EMAIL=$(sed -n "$sed_index"p $DP_SETTINGS);((sed_index++))
		LETSENCRYPT_REDIRECT=$(sed -n "$sed_index"p $DP_SETTINGS);((sed_index++))
		LETSENCRYPT_HSTS=$(sed -n "$sed_index"p $DP_SETTINGS);((sed_index++))
		LETSENCRYPT_KEYSIZE=$(sed -n "$sed_index"p $DP_SETTINGS);((sed_index++))

	}

	Write_Settings_File(){

		cat << _EOF_ > "$DP_SETTINGS"
$LETSENCRYPT_DOMAIN
$LETSENCRYPT_EMAIL
$LETSENCRYPT_REDIRECT
$LETSENCRYPT_HSTS
$LETSENCRYPT_KEYSIZE
_EOF_

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# MENUS
	#/////////////////////////////////////////////////////////////////////////////////////
	TARGETMENUID=0
	PREVIOUS_MENU_SELECTION=""

	Menu_Exit(){

		G_WHIP_SIZE_X_MAX=50
		G_WHIP_YESNO "Exit $G_PROGRAM_NAME?"
		if (( $? == 0 )); then

			#exit
			TARGETMENUID=-1

		else

			#Return to Main Menu
			TARGETMENUID=0

		fi

	}

	#TARGETMENUID=0
	Menu_Main(){

		local hsts_text='Disabled | No HTTP Strict Transport Security'
		if (( $LETSENCRYPT_HSTS )); then

			hsts_text='Enabled | HTTP Strict Transport Security'

		fi

		local redirect_text='Disabled | Allows http and https usage'
		if (( $LETSENCRYPT_REDIRECT )); then

			redirect_text='Enabled | Forces http redirects to https'

		fi

		G_WHIP_MENU_ARRAY=(

			"Domain" ": $LETSENCRYPT_DOMAIN"
			"Email" ": $LETSENCRYPT_EMAIL"
			"Redirect" ": $redirect_text"
			"HSTS" ": $hsts_text"
			"Key Size" ": $LETSENCRYPT_KEYSIZE"
			"Apply" "Runs Lets Encrypt with your chosen options."

		)

		G_WHIP_DEFAULT_ITEM="$PREVIOUS_MENU_SELECTION"
		G_WHIP_BUTTON_CANCEL_TEXT='Exit'
		G_WHIP_MENU 'Please select a option.'
		if (( $? == 0 )); then

			PREVIOUS_MENU_SELECTION=$G_WHIP_RETURNED_VALUE

			case "$G_WHIP_RETURNED_VALUE" in

				'Domain')

					LETSENCRYPT_DOMAIN="$(Input_Box $LETSENCRYPT_DOMAIN Website-Domain)"

				;;

				'Email')

					LETSENCRYPT_EMAIL="$(Input_Box $LETSENCRYPT_EMAIL Email-Address)"

				;;

				'Key Size')

					if (( $LETSENCRYPT_KEYSIZE == 2048 )); then

						LETSENCRYPT_KEYSIZE=4096

					else

						LETSENCRYPT_KEYSIZE=2048

					fi

				;;

				'HSTS')

					((LETSENCRYPT_HSTS++))
					if (( $LETSENCRYPT_HSTS > 1 )); then

						LETSENCRYPT_HSTS=0

					fi

				;;

				'Redirect')

					((LETSENCRYPT_REDIRECT++))
					if (( $LETSENCRYPT_REDIRECT > 1 )); then

						LETSENCRYPT_REDIRECT=0

					fi

				;;

				'Apply')

					G_WHIP_YESNO "LetsEncrypt will now be run. This will:\n- Create your free SSL cert.\n- Automatically apply and enable your SSL cert\n- NB: This process can take a long time, please be patient.\n\nWould you like to continue?"
					if (( $? == 0 )); then

						Write_Settings_File
						Run_Lets_Encrypt

					fi

				;;

			esac

		else

			#Exit
			Menu_Exit

		fi

	}

	Input_Box(){

		local input_value=$1
		local input_desc=$2

		G_WHIP_DEFAULT_ITEM="$input_value"
		G_WHIP_INPUTBOX "Please enter a value for $input_desc"
		if (( $? == 0 )); then

			input_value="$G_WHIP_RETURNED_VALUE"

			# - Prevent null values
			if [ -z "$input_value" ]; then

				input_value='NULL'

			fi

		fi

		echo -e "$input_value"

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////
	#Load Settings file. Generate if required.
	if [ ! -f "$DP_SETTINGS" ]; then

		Write_Settings_File

	else

		Read_Settings_File

	fi

	#-----------------------------------------------------------------------------------
	#Check installed
	if (( ! $LETSENCRYPT_INSTALLED )); then

		#Menu
		if (( $INPUT == 0 )); then

			G_DIETPI-NOTIFY 1 "Certbot binary not found ( $DP_LETSENCRYPT_BINARY )"
			G_DIETPI-NOTIFY 2 "Please install Certbot with DietPi-Software before running this program."
			read -p "Press any key to continue....."

		else

			echo -e "Error: Letsencrypt binary not installed ( $DP_LETSENCRYPT_BINARY )." >> "$DP_LOGFILE"

		fi

	#-----------------------------------------------------------------------------------
	#Menu
	elif (( $INPUT == 0 )); then

		while (( $TARGETMENUID > -1 )); do

			printf '\ec' # clear current terminal screen

			if (( $TARGETMENUID == 0 )); then

				Menu_Main

			fi

		done

	#-----------------------------------------------------------------------------------
	#Run
	elif (( $INPUT == 1 )); then

		Run_Lets_Encrypt

	fi

	#-----------------------------------------------------------------------------------
	exit
	#-----------------------------------------------------------------------------------
}
