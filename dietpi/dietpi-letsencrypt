#!/bin/bash
{
	#////////////////////////////////////
	# DietPi Lets Encrypt
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@dietpi.com / dietpi.com
	#
	#////////////////////////////////////
	#
	# Info:
	# - filename /DietPi/dietpi/dietpi-letsencrypt
	# - Menu Frontend for Letsencrypt with CLI options for use on DietPi systems.
	#
	# usage:
	# - /DietPi/dietpi/dietpi-letsencrypt   = Menu
	# - /DietPi/dietpi/dietpi-letsencrypt 1 = Create/Renew/Apply cert
	#////////////////////////////////////

	#Import DietPi-Globals ---------------------------------------------------------------
	. /DietPi/dietpi/func/dietpi-globals
	G_PROGRAM_NAME='DietPi-LetsEncrypt'
	G_CHECK_ROOT_USER
	G_CHECK_ROOTFS_RW
	G_INIT
	#Import DietPi-Globals ---------------------------------------------------------------

	#Grab Input
	INPUT=0
	disable_error=1 G_CHECK_VALIDINT $1 && INPUT=$1

	#/////////////////////////////////////////////////////////////////////////////////////
	#Globals
	#/////////////////////////////////////////////////////////////////////////////////////
	FP_LOGFILE='/var/log/dietpi-letsencrypt.log'

	# On Stretch+ the APT package installs a systemd unit for cert renewal,
	# on Jessie-, we install the CertBot from github directly and add a cron job for renewal:
	FP_RENEWAL='/etc/systemd/system/certbot.service.d'
	(( $G_DISTRO < 4 )) && FP_RENEWAL='/etc/cron.weekly/dietpi-letsencrypt'

	FP_BINARY='/usr/bin/certbot'
	(( $G_DISTRO < 4 )) && FP_BINARY='/etc/certbot_scripts/certbot-auto'

	LETSENCRYPT_INSTALLED=0
	[[ -f $FP_BINARY ]] && LETSENCRYPT_INSTALLED=1

	LETSENCRYPT_DOMAIN='mydomain.com'
	LETSENCRYPT_EMAIL='myemail@email.com'
	LETSENCRYPT_REDIRECT=0
	LETSENCRYPT_HSTS=0
	LETSENCRYPT_KEYSIZE=4096

	Run_Lets_Encrypt(){

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Running CertBot'

		local fp_cert_dir="/etc/letsencrypt/live/$LETSENCRYPT_DOMAIN"

		#------------------------------------------------------------------------------------------------------
		#Apache2
		if pgrep '[a]pache' &> /dev/null; then

			G_DIETPI-NOTIFY 0 'Apache2 webserver detected'
			local fp_defaultsite='/etc/apache2/sites-available/000-default.conf'

			#Add ServerName if it doesnt exist. This is required to prevent CertBot compaining about vhost with no domain.
			G_CONFIG_INJECT 'ServerName[[:blank:]]' "ServerName $LETSENCRYPT_DOMAIN" "$fp_defaultsite" '<VirtualHost'

			#Restart Apache2 to apply ServerName changes.
			G_RUN_CMD systemctl restart apache2

			local options='--apache'
			#Use webroot authentication on Stretch+ for now: https://github.com/Fourdee/DietPi/issues/734#issuecomment-361774084
			(( $G_DISTRO > 3 )) && options='-a webroot -w /var/www/ -i apache'
			(( $LETSENCRYPT_REDIRECT )) && options+=' --redirect' || options+=' --no-redirect'
			(( $LETSENCRYPT_HSTS )) && options+=' --hsts'

			#Cert me up Apache2
			# - When cert exists already, attempt renewal. This allows easy configuration update via "dietpi-letsencrypt 1" without using up limited certs per week.
			if [[ -f $fp_cert_dir/cert.pem ]]; then

				$FP_BINARY renew
				local exit_code=$?

			else

				$FP_BINARY $options --agree-tos --rsa-key-size "$LETSENCRYPT_KEYSIZE" -m "$LETSENCRYPT_EMAIL" -d "$LETSENCRYPT_DOMAIN"
				local exit_code=$?

			fi
			if (( $exit_code )); then

				echo -e "[FAILED] CertBot failed with error code ($exit_code), please check it's terminal output. Aborting..." | tee "$FP_LOGFILE"
				(( ! $INPUT )) && G_WHIP_MSG "[FAILURE] CertBot failed with error code ($exit_code), please check it's terminal output. Aborting..."
				return 1

			fi

		#------------------------------------------------------------------------------------------------------
		#Lighttpd
		elif pgrep '[l]ighttpd' &> /dev/null; then

			G_DIETPI-NOTIFY 0 'Lighttpd webserver detected'

			# - Cert me up
			/DietPi/dietpi/dietpi-services stop
			if [[ -f $fp_cert_dir/cert.pem ]]; then

				$FP_BINARY renew
				local exit_code=$?

			else

				$FP_BINARY certonly --standalone --agree-tos --rsa-key-size "$LETSENCRYPT_KEYSIZE" -m "$LETSENCRYPT_EMAIL" -d "$LETSENCRYPT_DOMAIN"
				local exit_code=$?

			fi
			if (( $exit_code )); then

				echo -e "[FAILED] CertBot failed with error code ($exit_code), please check it's terminal output. Aborting..." | tee "$FP_LOGFILE"
				(( ! $INPUT )) && G_WHIP_MSG "[FAILURE] CertBot failed with error code ($exit_code), please check it's terminal output. Aborting..."
				return 1

			fi

			# - Create combined key
			cat "$fp_cert_dir/privkey.pem" "$fp_cert_dir/cert.pem" > "$fp_cert_dir/combined.pem"
			if [[ ! -f $fp_cert_dir/combined.pem ]]; then

				echo -e "[FAILED] $fp_cert_dir/combined.pem could not be created. Please check existence of privkey.pem and cert.pem within this folder, as result of CertBot execution. Aborting..." | tee "$FP_LOGFILE"
				(( ! $INPUT )) && G_WHIP_MSG "[FAILED] $fp_cert_dir/combined.pem could not be created. Please check existence of privkey.pem and cert.pem within this folder, as result of CertBot execution. Aborting..."
				return 1

			fi

			# Add Lighttpd renewal to certbot system service:
			if (( $G_DISTRO > 3 )); then

				[[ -d $FP_RENEWAL ]] || mkdir "$FP_RENEWAL"
				cat << _EOF_ > "$FP_RENEWAL"/dietpi-lighttpd.conf
[Service]
ExecStartPost=/bin/bash -c '/bin/cat $fp_cert_dir/privkey.pem $fp_cert_dir/cert.pem > $fp_cert_dir/combined.pem'
_EOF_

			fi

			# Allow adding environment variables via: setenv.add-environment
			G_CONFIG_INJECT '"mod_setenv"' '	"mod_setenv",' /etc/lighttpd/lighttpd.conf '"mod_.+",'

			cat << _EOF_ > /etc/lighttpd/conf-enabled/letsencrypt.conf
# Based on: https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=lighttpd-1.4.35&openssl=1.0.1t&hsts=yes&profile=intermediate
\$SERVER["socket"] == ":443" {
	protocol     = "https://"
	ssl.engine   = "enable"
	ssl.disable-client-renegotiation = "enable"

	# pemfile is cert+privkey, ca-file is the intermediate chain in one file
	ssl.pemfile               = "$fp_cert_dir/combined.pem"
	ssl.ca-file               = "$fp_cert_dir/fullchain.pem"

	# for DH/DHE ciphers, dhparam should be >= 2048-bit
	#ssl.dh-file               = "/path/to/dhparam.pem"
	# ECDH/ECDHE ciphers curve strength (see 'openssl ecparam -list_curves')
	ssl.ec-curve              = "secp384r1"
	# Compression is by default off at compile-time, but use if needed
	# ssl.use-compression     = "disable"

	# Environment flag for HTTPS enabled
	setenv.add-environment = (
		"HTTPS" => "on"
	)

	# intermediate configuration, tweak to your needs
	ssl.use-sslv2 = "disable"
	ssl.use-sslv3 = "disable"
	ssl.honor-cipher-order    = "enable"
	ssl.cipher-list           = "ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS"
}
_EOF_

			# Redirect
			rm /etc/lighttpd/conf-enabled/redirect.conf &> /dev/null
			if (( $LETSENCRYPT_REDIRECT )); then

				cat << _EOF_ > /etc/lighttpd/conf-enabled/redirect.conf
\$HTTP["scheme"] == "http" {
	# capture vhost name with regex conditiona -> %0 in redirect pattern
	# must be the most inner block to the redirect rule
	\$HTTP["host"] =~ ".*" {
		url.redirect = (".*" => "https://%0\$0")
	}
}
_EOF_

			fi

			# HSTS
			if (( $LETSENCRYPT_HSTS )); then

				cat << _EOF_ > /etc/lighttpd/conf-available/99-dietpi-hsts.conf
\$HTTP["scheme"] == "https" {
	setenv.add-response-header = ( "Strict-Transport-Security" => "max-age=31536000; includeSubdomains; preload;" )
}
_EOF_
				lighttpd-enable-mod dietpi-hsts

			else

				lighttpd-disable-mod dietpi-hsts

			fi

		#------------------------------------------------------------------------------------------------------
		# Nginx
		elif pgrep '[n]ginx' &> /dev/null; then

			G_DIETPI-NOTIFY 0 'Nginx webserver detected'
			local fp_defaultsite='/etc/nginx/sites-available/default'

			# Apply domain name
			G_CONFIG_INJECT 'server_name[[:blank:]]' "	server_name $LETSENCRYPT_DOMAIN;" "$fp_defaultsite" 'listen[[:blank:]]'

			#Restart Nginx to apply server_name change:
			systemctl restart nginx

			local options='--nginx'
			#Use webroot authentication on Stretch+ for now: https://github.com/Fourdee/DietPi/issues/734#issuecomment-361774084
			(( $G_DISTRO > 3 )) && options='-a webroot -w /var/www/ -i nginx'
			(( $LETSENCRYPT_REDIRECT )) && options+=' --redirect' || options+=' --no-redirect'
			(( $LETSENCRYPT_HSTS )) && options+=' --hsts'

			#Cert me up Nginx
			if [[ -f $fp_cert_dir/cert.pem ]]; then

				$FP_BINARY renew
				local exit_code=$?

			else

				$FP_BINARY $options --agree-tos --rsa-key-size "$LETSENCRYPT_KEYSIZE" -m "$LETSENCRYPT_EMAIL" -d "$LETSENCRYPT_DOMAIN"
				local exit_code=$?

			fi
			if (( $exit_code )); then

				echo -e "[FAILURE] CertBot failed with error code ($exit_code), please check it's terminal output. Aborting..." | tee "$FP_LOGFILE"
				(( ! $INPUT )) && G_WHIP_MSG "[FAILURE] CertBot failed with error code ($exit_code), please check it's terminal output. Aborting..."
				return 1

			fi

		#------------------------------------------------------------------------------------------------------
		#Minio
		elif pgrep '[m]inio' &> /dev/null; then

			G_DIETPI-NOTIFY 0 'Minio S3 server detected'

			# - Cert me up
			/DietPi/dietpi/dietpi-services stop
			if [[ -f $fp_cert_dir/cert.pem ]]; then

				$FP_BINARY renew
				local exit_code=$?

			else

				$FP_BINARY certonly --standalone --staple-ocsp --agree-tos --rsa-key-size "$LETSENCRYPT_KEYSIZE" -m "$LETSENCRYPT_EMAIL" -d "$LETSENCRYPT_DOMAIN"
				local exit_code=$?

			fi
			if (( $exit_code )); then

				echo -e "[FAILURE] CertBot failed with error code ($exit_code), please check it's terminal output. Aborting..." | tee "$FP_LOGFILE"
				(( ! $INPUT )) && G_WHIP_MSG "[FAILURE] CertBot failed with error code ($exit_code), please check it's terminal output. Aborting..."
				return 1

			fi

			# Ensure strict permissions while copying:
			umask 077

			# Locate them correctly (THIS didn't work as symlinks)
			G_RUN_CMD cp "$fp_cert_dir"/fullchain.pem /home/minio-user/.minio/certs/public.crt
			G_RUN_CMD cp "$fp_cert_dir"/privkey.pem /home/minio-user/.minio/certs/private.key

			# Own those certs!
			G_RUN_CMD chown minio-user:minio-user /home/minio-user/.minio/certs/public.crt /home/minio-user/.minio/certs/private.key
			G_RUN_CMD chmod 400 /home/minio-user/.minio/certs/public.crt /home/minio-user/.minio/certs/private.key

			# Creation permissions back to default:
			umask 022

			# Add SSL to config file
			G_CONFIG_INJECT 'MINIO_OPTS="' 'MINIO_OPTS="--address :443"' /etc/default/minio

			# Allow SSL binding for non root user
			# - Install libcap2-bin, which provides setcap command, not installed by default on DietPi:
			G_AGI libcap2-bin
			G_RUN_CMD setcap CAP_NET_BIND_SERVICE=+eip /usr/local/bin/minio

			# Create renewl script
			cat << _EOF_ > /home/minio-user/.minio/dietpi-cert-renewl.sh
#!/bin/bash
# Minio only works with copied and owned certs. Upon renewal the new certs needs to be copied and re-owned
systemctl stop minio

# Ensure strict permissions while copying:
umask 077

# Copy to correct Location
cp $fp_cert_dir/fullchain.pem /home/minio-user/.minio/certs/public.crt
cp $fp_cert_dir/privkey.pem /home/minio-user/.minio/certs/private.key

# Re-Own those certs!
chown minio-user:minio-user /home/minio-user/.minio/certs/public.crt /home/minio-user/.minio/certs/private.key
chmod 400 /home/minio-user/.minio/certs/public.crt /home/minio-user/.minio/certs/private.key

systemctl start minio
_EOF_

			# Change permissions on renewal script
			G_RUN_CMD chmod +x /home/minio-user/.minio/dietpi-cert-renewl.sh

			# Add Minio renewal to certbot system service:
			if (( $G_DISTRO > 3 )); then

				[[ -d $FP_RENEWAL ]] || mkdir "$FP_RENEWAL"
				cat << _EOF_ > "$FP_RENEWAL"/dietpi-minio.conf
[Service]
ExecStartPost=/home/minio-user/.minio/dietpi-cert-renewl.sh &>> $FP_LOGFILE
_EOF_

			fi

			echo -e '[ INFO ] HTTPS redirect and HSTS is not supported for Minio, thus will be ignored.' | tee "$FP_LOGFILE"

		else

			echo -e '[FAILURE] No compatible and/or active webserver was found. Aborting...' | tee "$FP_LOGFILE"
			(( ! $INPUT )) && G_WHIP_MSG '[FAILURE] No compatible and/or active webserver was found. Aborting...'
			return 1

		fi

		if [[ -f /etc/turnserver.conf ]]; then

			G_DIETPI-NOTIFY 2 'coturn TURN server detected'

			# - Get TURN port
			local turn_port=5349
			if grep -q '^[[:blank:]]*tls-listening-port=' /etc/turnserver.conf; then

				turn_port="$(grep -m1 '^[[:blank:]]*tls-listening-port=' /etc/turnserver.conf)"
				turn_port="${turn_port#*tls-listening-port=}"

			elif grep -q '^[[:blank:]]*listening-port=' /etc/turnserver.conf; then

				turn_port="$(grep -m1 '^[[:blank:]]*listening-port=' /etc/turnserver.conf)"
				turn_port="${turn_port#*listening-port=}"
				# - Comment non-TLS port setting to avoid doubled port use
				G_CONFIG_INJECT 'listening-port=' "#listening-port=$turn_port" /etc/turnserver.conf

			fi

			# - Set TURN TLS settings
			G_CONFIG_INJECT 'tls-listening-port=' "tls-listening-port=$turn_port" /etc/turnserver.conf
			G_CONFIG_INJECT 'cert=' "cert=$fp_cert_dir/cert.pem" /etc/turnserver.conf
			G_CONFIG_INJECT 'pkey=' "pkey=$fp_cert_dir/privkey.pem" /etc/turnserver.conf
			G_CONFIG_INJECT 'cipher-list=' 'cipher-list="ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AES:RSA+3DES:!ADH:!AECDH:!MD5"' /etc/turnserver.conf

		fi

		#ALL | Create cert renewal cron job on Jessie-:
		if (( $G_DISTRO < 4 )); then

			cat << _EOF_ > "$FP_RENEWAL"
#!/bin/bash
{
	#////////////////////////////////////
	# DietPi-LetsEncrypt Autorenew script
	#
	#////////////////////////////////////
	#
	# Info:
	# - Location $FP_RENEWAL
	#
	#////////////////////////////////////

	#----------------------------------------------------------------
	# Main Loop
	#----------------------------------------------------------------

	$FP_BINARY -q renew &>> $FP_LOGFILE
	[[ -f /home/minio-user/.minio/dietpi-cert-renewl.sh ]] && /home/minio-user/.minio/dietpi-cert-renewl.sh &>> $FP_LOGFILE
	[[ -f $fp_cert_dir/combined.pem ]] && cat $fp_cert_dir/privkey.pem $fp_cert_dir/cert.pem > $fp_cert_dir/combined.pem 2>> $FP_LOGFILE

	#----------------------------------------------------------------
	exit
	#----------------------------------------------------------------
}
_EOF_
			G_RUN_CMD chmod +x "$FP_RENEWAL"

		else

			systemctl daemon-reload

		fi

		#------------------------------------------------------------------------------------------------------

		if (( ! $INPUT )); then

			echo ''
			read -p 'Press any key to continue...'
			echo ''

		fi

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Settings File
	#/////////////////////////////////////////////////////////////////////////////////////
	FP_SETTINGS='/DietPi/dietpi/.dietpi-letsencrypt'

	Read_Settings_File(){

		local sed_index=1

		LETSENCRYPT_DOMAIN=$(sed -n "$sed_index"p "$FP_SETTINGS");((sed_index++))
		LETSENCRYPT_EMAIL=$(sed -n "$sed_index"p "$FP_SETTINGS");((sed_index++))
		LETSENCRYPT_REDIRECT=$(sed -n "$sed_index"p "$FP_SETTINGS");((sed_index++))
		LETSENCRYPT_HSTS=$(sed -n "$sed_index"p "$FP_SETTINGS");((sed_index++))
		LETSENCRYPT_KEYSIZE=$(sed -n "$sed_index"p "$FP_SETTINGS");((sed_index++))

	}

	Write_Settings_File(){

		cat << _EOF_ > "$FP_SETTINGS"
$LETSENCRYPT_DOMAIN
$LETSENCRYPT_EMAIL
$LETSENCRYPT_REDIRECT
$LETSENCRYPT_HSTS
$LETSENCRYPT_KEYSIZE
_EOF_

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# MENUS
	#/////////////////////////////////////////////////////////////////////////////////////
	TARGETMENUID=0
	PREVIOUS_MENU_SELECTION=''

	Menu_Exit(){

		G_WHIP_SIZE_X_MAX=50
		G_WHIP_YESNO "Exit $G_PROGRAM_NAME?"
		if (( $? == 0 )); then

			#exit
			TARGETMENUID=-1

		else

			#Return to Main Menu
			TARGETMENUID=0

		fi

	}

	#TARGETMENUID=0
	Menu_Main(){

		local hsts_text='[Off] | No HTTP Strict Transport Security'
		if (( $LETSENCRYPT_HSTS )); then

			hsts_text='[On] | HTTP Strict Transport Security'

		fi

		local redirect_text='[Off] | Allows http and https usage'
		if (( $LETSENCRYPT_REDIRECT )); then

			redirect_text='[On] | Forces http redirects to https'

		fi

		G_WHIP_MENU_ARRAY=(

			'Domain' ": $LETSENCRYPT_DOMAIN"
			'Email' ": $LETSENCRYPT_EMAIL"
			'Redirect' ": $redirect_text"
			'HSTS' ": $hsts_text"
			'Key Size' ": $LETSENCRYPT_KEYSIZE"
			'Apply' 'Runs Lets Encrypt with your chosen options.'

		)

		G_WHIP_DEFAULT_ITEM="$PREVIOUS_MENU_SELECTION"
		G_WHIP_BUTTON_CANCEL_TEXT='Exit'
		G_WHIP_MENU 'Please select an option:'
		if (( ! $? )); then

			PREVIOUS_MENU_SELECTION=$G_WHIP_RETURNED_VALUE

			case "$G_WHIP_RETURNED_VALUE" in

				'Domain')

					while true; do

						LETSENCRYPT_DOMAIN="$(Input_Box $LETSENCRYPT_DOMAIN Website-Domain)"
						[[ $LETSENCRYPT_DOMAIN == *?.?* && ! $(sed 's/\.//g' <<< $LETSENCRYPT_DOMAIN) =~ ^[0-9]*$ ]] && break

						G_WHIP_MSG "[FAILED] \"$LETSENCRYPT_DOMAIN\" is no valid domain name.\n\nNote that raw IP addresses are not allowed by LetsEncrypt, thus a domain is required.\nYou can install No-IP with DietPi-Software to aquire one.\n\nPlease try again..."

					done

				;;

				'Email')

					LETSENCRYPT_EMAIL="$(Input_Box $LETSENCRYPT_EMAIL Email-Address)"

				;;

				'Key Size')

					if (( $LETSENCRYPT_KEYSIZE == 2048 )); then

						LETSENCRYPT_KEYSIZE=4096

					else

						LETSENCRYPT_KEYSIZE=2048

					fi

				;;

				'HSTS')

					if (( $LETSENCRYPT_HSTS == 0 )); then

						G_WHIP_YESNO 'HTTP Strict Transport Security (HSTS)\n
Carefully read the following, before enabling this feature:

HSTS will make your browser remember that it accessed your domain/IP via HTTPS for one or half a year.
From then on, it will always access the same domain/IP via HTTPS, denying all HTTP access attempts.
This increases security in addition to encrypted traffic, as noone can silently redirect you to a fake web page.
HTTPS forces web pages to verify their identity via the HTTPS certificate, which cannot be faked in a reasonable time.

The downside is, your browser will deny access to all non-HTTPS web applications behind the same domain/IP.
EG: "Sonarr" uses a standalone web server contained within the application. This uses a custom port, which can be recognized as you need to add a non-default port to your IP/domain to access it: "192.168.0.100:8989".
Enabling HSTS will prevent access to applications which use a standalone webserver.

It is possible to enable HTTPS support for standalone web servers, however, you will need to research and achieve this manually.

Are you sure that you want to enable HTTP Strict Transport Security?'
						(( ! $? )) && LETSENCRYPT_HSTS=1

					else

						LETSENCRYPT_HSTS=0

					fi

				;;

				'Redirect')

					((LETSENCRYPT_REDIRECT++))
					if (( $LETSENCRYPT_REDIRECT > 1 )); then

						LETSENCRYPT_REDIRECT=0

					fi

				;;

				'Apply')

					G_WHIP_YESNO "LetsEncrypt will now be run. This will:\n- Create your free SSL cert.\n- Automatically apply and enable your SSL cert\n- NB: This process can take a long time, please be patient.\n- NB: HTTPS will automatically be applied to the webserver and applications which use '/var/www/*'. Applications which use their own webserver (these usually have their own :port number), will not be available under HTTPS, and, these will need to be configured manually.\n\nWould you like to continue?"
					if (( ! $? )); then

						Write_Settings_File
						Run_Lets_Encrypt
						/DietPi/dietpi/dietpi-services restart

					fi

				;;

			esac

		else

			#Exit
			Menu_Exit

		fi

	}

	Input_Box(){

		local input_value=$1
		local input_desc=$2

		G_WHIP_DEFAULT_ITEM="$input_value"
		G_WHIP_INPUTBOX "Please enter a value for $input_desc"
		if (( ! $? )); then

			input_value="$G_WHIP_RETURNED_VALUE"

			# - Prevent null values
			if [[ -z $input_value ]]; then

				input_value='NULL'

			fi

		fi

		echo -e "$input_value"

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////
	#Load Settings file. Generate if required.
	if [[ -f $FP_SETTINGS ]]; then

		Read_Settings_File

	else

		Write_Settings_File

	fi

	#-----------------------------------------------------------------------------------
	#Check installed
	if (( ! $LETSENCRYPT_INSTALLED )); then

		#Menu
		if (( ! $INPUT )); then

			G_DIETPI-NOTIFY 1 "CertBot binary not found ( $FP_BINARY )"
			G_DIETPI-NOTIFY 2 'Please install CertBot with DietPi-Software before running this program.'
			read -p 'Press any key to continue.....'

		else

			echo -e "[FAILURE] CertBot binary not found ( $FP_BINARY ), please install it with DietPi-Software. Aborting..." | tee "$FP_LOGFILE"

		fi

	#-----------------------------------------------------------------------------------
	#Menu
	elif (( ! $INPUT )); then

		while (( $TARGETMENUID > -1 )); do

			printf '\ec' # clear current terminal screen

			if (( $TARGETMENUID == 0 )); then

				Menu_Main

			fi

		done

	#-----------------------------------------------------------------------------------
	#Run
	elif (( $INPUT == 1 )); then

		Run_Lets_Encrypt
		/DietPi/dietpi/dietpi-services restart

	else

		G_DIETPI-NOTIFY 2 'DietPi-LetsEncrypt usage:'
		G_DIETPI-NOTIFY 2 '	dietpi-letsencrypt	=>	Open whiptail menu'
		G_DIETPI-NOTIFY 2 '	dietpi-letsencrypt 1	=>	Create/Renew/Apply certs without user input'

	fi

	#-----------------------------------------------------------------------------------
	exit
	#-----------------------------------------------------------------------------------
}
