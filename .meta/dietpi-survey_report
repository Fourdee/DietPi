#!/bin/bash
{

	# Created by Micha / micha@dietpi.com / dietpi.com

	#-----------------------------------------------------------
	#Globals - benchmarks
	#-----------------------------------------------------------
	#	NB: PLEASE ENSURE HW_MODEL INDEX ENTRIES MATCH : PREP, dietpi-obtain_hw_model, dietpi-survey_results,
	#	NBB: DO NOT REORDER INDEX's. These are now fixed and will never change (due to survey results etc)
	aHW_NAME=()
	aHW_NAME[0]='Raspberry Pi 1'
	aHW_NAME[1]='Raspberry Pi 1/Zero'
	aHW_NAME[2]='Raspberry Pi 2'
	aHW_NAME[3]='Raspberry Pi 3/3+'
	aHW_NAME[10]='Odroid C1'
	aHW_NAME[11]='Odroid XU3/XU4/HC1/HC2'
	aHW_NAME[12]='Odroid C2'
	aHW_NAME[13]='Odroid U3'
	aHW_NAME[14]='Odroid N1'
	aHW_NAME[20]='VM x64 (VMware VirtualBox)'
	aHW_NAME[21]='x86_64 native (PC)'
	aHW_NAME[22]='Generic device (eg: unknown to DietPi)'
	aHW_NAME[30]='OrangePi PC'
	aHW_NAME[31]='OrangePi One'
	aHW_NAME[32]='OrangePi Zero (H2+)'
	aHW_NAME[33]='OrangePi Lite'
	aHW_NAME[34]='OrangePi Plus'
	aHW_NAME[35]='OrangePi Zero Plus 2 (H3/H5)'
	aHW_NAME[36]='OrangePi Win'
	aHW_NAME[37]='OrangePi Prime'
	aHW_NAME[38]='OrangePi PC 2'
	aHW_NAME[39]='LeMaker Guitar'
	aHW_NAME[40]='Pine A64'
	aHW_NAME[41]='OrangePi PC Plus'
	aHW_NAME[42]='RockPro64'
	aHW_NAME[43]='Rock64'
	aHW_NAME[44]='Pinebook A64'
	aHW_NAME[50]='BananaPi M2+ (sinovoip)'
	aHW_NAME[51]='BananaPi Pro (Lemaker)'
	aHW_NAME[52]='Asus Tinker Board'
	aHW_NAME[53]='BananaPi (sinovoip)'
	aHW_NAME[60]='NanoPi Neo'
	aHW_NAME[61]='NanoPi M2/T2'
	aHW_NAME[62]='NanoPi M3/T3/F3'
	aHW_NAME[63]='NanoPi M1/T1'
	aHW_NAME[64]='NanoPi NEO Air'
	aHW_NAME[65]='NanoPi NEO 2'
	aHW_NAME[66]='NanoPi M1 Plus'
	aHW_NAME[67]='NanoPi K1 Plus'
	aHW_NAME[68]='NanoPC T4'
	aHW_NAME[69]='Firefly RK3399'
	aHW_NAME[70]='Sparky SBC'
	aHW_NAME[71]='Beagle Bone Black'

	aBENCH_COMMON_INDEX=()

	# - Optional benchmarks
	aBENCH_LAN_INDEX=()
	aBENCH_CUSTOMFS_INDEX=()

	#[$HW_MODEL,${aBENCH_COMMON_INDEX[$HW_MODEL]}]
	declare -A aBENCH_CPU
	declare -A aBENCH_ROOTFS_WRITE
	declare -A aBENCH_ROOTFS_READ
	declare -A aBENCH_RAM_WRITE
	declare -A aBENCH_RAM_READ
	declare -A aBENCH_CPU_TEMP_START
	declare -A aBENCH_CPU_TEMP_END

	# - Optional benchmarks
	declare -A aBENCH_CUSTOMFS_WRITE
	declare -A aBENCH_CUSTOMFS_READ

	declare -A aBENCH_NET_LAN_SPEED

	#Results
	BENCH_RESULTS_CPU_SCALE=2
	aBENCH_RESULT_CPU_MIN=()
	aBENCH_RESULT_CPU_MAX=()
	aBENCH_RESULT_CPU_AVG=()

	aBENCH_RESULT_ROOTFS_WRITE_MIN=()
	aBENCH_RESULT_ROOTFS_WRITE_MAX=()
	aBENCH_RESULT_ROOTFS_WRITE_AVG=()

	aBENCH_RESULT_ROOTFS_READ_MIN=()
	aBENCH_RESULT_ROOTFS_READ_MAX=()
	aBENCH_RESULT_ROOTFS_READ_AVG=()

	aBENCH_RESULT_RAM_WRITE_MIN=()
	aBENCH_RESULT_RAM_WRITE_MAX=()
	aBENCH_RESULT_RAM_WRITE_AVG=()

	aBENCH_RESULT_RAM_READ_MIN=()
	aBENCH_RESULT_RAM_READ_MAX=()
	aBENCH_RESULT_RAM_READ_AVG=()

	aBENCH_RESULT_CPU_TEMP_START_MIN=()
	aBENCH_RESULT_CPU_TEMP_START_MAX=()
	aBENCH_RESULT_CPU_TEMP_START_AVG=()

	aBENCH_RESULT_CPU_TEMP_END_MIN=()
	aBENCH_RESULT_CPU_TEMP_END_MAX=()
	aBENCH_RESULT_CPU_TEMP_END_AVG=()

	aBENCH_RESULT_CUSTOMFS_WRITE_MIN=()
	aBENCH_RESULT_CUSTOMFS_WRITE_MAX=()
	aBENCH_RESULT_CUSTOMFS_WRITE_AVG=()

	aBENCH_RESULT_CUSTOMFS_READ_MIN=()
	aBENCH_RESULT_CUSTOMFS_READ_MAX=()
	aBENCH_RESULT_CUSTOMFS_READ_AVG=()

	aBENCH_RESULT_NET_LAN_SPEED_MIN=()
	aBENCH_RESULT_NET_LAN_SPEED_MAX=()
	aBENCH_RESULT_NET_LAN_SPEED_AVG=()

	#-----------------------------------------------------------
	#Globals - Survey
	#-----------------------------------------------------------
	SURVEY_COUNT_TOTAL=0
	SURVEY_COUNT_EMPTY=0

	aSURVEY_VERSION=()
	aSURVEY_SENTCOUNT=()
	declare -A aDIETPI_VERSION
	declare -A aDEVICE_NAME
	declare -A aCPU_ARCH
	aCPU_COUNT=()
	declare -A aDISTRO_VERSION
	declare -A aAUTOSTART_OPTION
	declare -A aSOFTWARE
	# v6.10 additions
	aAUTO_SETUP_AUTOMATED=(
		[0]=0
		[1]=0
	)
	declare -A aNETWORK_INTERFACE
	# v6.17 addition
	declare -A aGIT_BRANCH

	# Pre v6.10: Convert cpu arch index to name array
	aCPU_NAME=()
	aCPU_NAME[1]='armv6l'
	aCPU_NAME[2]='armv7l'
	aCPU_NAME[3]='aarch64'
	aCPU_NAME[10]='x86_64'

	# Convert autostart index to name array
	aAUTOSTART_NAME=()
	aAUTOSTART_NAME[0]='Console manual login'
	aAUTOSTART_NAME[1]='Kodi'
	aAUTOSTART_NAME[2]='Desktop auto login'
	aAUTOSTART_NAME[3]='RetroPie'
	aAUTOSTART_NAME[4]='OpenTyrian'
	aAUTOSTART_NAME[5]='DietPi-Cloudshell'
	aAUTOSTART_NAME[6]='AmiBerry fast boot'
	aAUTOSTART_NAME[7]='Console auto login'
	aAUTOSTART_NAME[8]='AmiBerry standard boot'
	aAUTOSTART_NAME[9]='DXX-Rebith'
	aAUTOSTART_NAME[10]='CAVA Spectrum'
	aAUTOSTART_NAME[11]='Chromium'
	aAUTOSTART_NAME[14]='Custom'
	aAUTOSTART_NAME[15]='JRiver'
	aAUTOSTART_NAME[16]='Desktop LightDM login'

	# Convert software index to title array
	aSOFTWARE_NAME=()
	aSOFTWARE_NAME[0]='OpenSSH Client'
	aSOFTWARE_NAME[1]='Samba Client'
	aSOFTWARE_NAME[2]='Curlftpfs'
	aSOFTWARE_NAME[3]='MC'
	aSOFTWARE_NAME[4]='ViFM'
	aSOFTWARE_NAME[5]='ALSA'
	aSOFTWARE_NAME[6]='Xserver'
	aSOFTWARE_NAME[7]='FFmpeg'
	aSOFTWARE_NAME[8]='Java'
	aSOFTWARE_NAME[9]='Node.js'
	aSOFTWARE_NAME[10]='iftop'
	aSOFTWARE_NAME[11]='IPTraf'
	aSOFTWARE_NAME[12]='Iperf'
	aSOFTWARE_NAME[13]='MTR-Tiny'
	aSOFTWARE_NAME[14]='nLoad'
	aSOFTWARE_NAME[15]='tcpdump'
	aSOFTWARE_NAME[16]='Build-Essentials'
	aSOFTWARE_NAME[17]='Git Client'
	aSOFTWARE_NAME[18]='Emacs'
	aSOFTWARE_NAME[19]='Jed'
	aSOFTWARE_NAME[20]='Vim'
	aSOFTWARE_NAME[21]='Vim-Tiny'
	aSOFTWARE_NAME[22]='QuiteRSS'
	aSOFTWARE_NAME[23]='LXDE'
	aSOFTWARE_NAME[24]='MATE'
	aSOFTWARE_NAME[25]='XFCE'
	aSOFTWARE_NAME[26]='GNUStep'
	aSOFTWARE_NAME[27]='TightVNC Server'
	aSOFTWARE_NAME[28]='VNC4 Server'
	aSOFTWARE_NAME[29]='XRDP'
	aSOFTWARE_NAME[30]='NoMachine'
	aSOFTWARE_NAME[31]='Kodi'
	aSOFTWARE_NAME[32]='YMPD'
	aSOFTWARE_NAME[33]='AirSonic'
	aSOFTWARE_NAME[34]='SubSonic 6'
	aSOFTWARE_NAME[35]='SqueezeBox'
	aSOFTWARE_NAME[36]='SqueezeLite'
	aSOFTWARE_NAME[37]='Shairport Sync'
	aSOFTWARE_NAME[38]='BruteFIR'
	aSOFTWARE_NAME[39]='ReadyMedia'
	aSOFTWARE_NAME[40]='Ampache'
	aSOFTWARE_NAME[41]='Emby Server'
	aSOFTWARE_NAME[42]='Plex Media Server'
	aSOFTWARE_NAME[43]='Murmur'
	aSOFTWARE_NAME[44]='Transmission'
	aSOFTWARE_NAME[45]='Deluge'
	aSOFTWARE_NAME[46]='qBitTorrent'
	aSOFTWARE_NAME[47]='ownCloud'
	aSOFTWARE_NAME[48]='Pydio'
	aSOFTWARE_NAME[49]='Gogs'
	aSOFTWARE_NAME[50]='Syncthing'
	aSOFTWARE_NAME[51]='OpenTyrian'
	aSOFTWARE_NAME[52]='Cuberite'
	aSOFTWARE_NAME[53]='MineOS'
	aSOFTWARE_NAME[54]='Forums'
	aSOFTWARE_NAME[55]='Wordpress'
	aSOFTWARE_NAME[56]='Image Gallery'
	aSOFTWARE_NAME[57]='BaiKal'
	aSOFTWARE_NAME[58]='OpenBazaar'
	aSOFTWARE_NAME[59]='RPi Cam Control'
	aSOFTWARE_NAME[60]='WiFi Hotspot'
	aSOFTWARE_NAME[61]='Tor Hotspot'
	aSOFTWARE_NAME[62]='DietPi-Cloudshell'
	aSOFTWARE_NAME[63]='LinuxDash'
	aSOFTWARE_NAME[64]='PhpSysInfo'
	aSOFTWARE_NAME[65]='NetData'
	aSOFTWARE_NAME[66]='RPi-Monitor'
	aSOFTWARE_NAME[67]='NoIp'
	aSOFTWARE_NAME[68]='Remot3.it'
	aSOFTWARE_NAME[69]='RPi.GPIO'
	aSOFTWARE_NAME[70]='WiringPi'
	aSOFTWARE_NAME[71]='WebIOPi'
	aSOFTWARE_NAME[72]='I2c'
	aSOFTWARE_NAME[73]='Fail2Ban'
	aSOFTWARE_NAME[74]='InfluxDB'
	aSOFTWARE_NAME[75]='LASP'
	aSOFTWARE_NAME[76]='LAMP'
	aSOFTWARE_NAME[77]='Grafana'
	aSOFTWARE_NAME[78]='LESP'
	aSOFTWARE_NAME[79]='LEMP'
	aSOFTWARE_NAME[80]='80'
	aSOFTWARE_NAME[81]='LLSP'
	aSOFTWARE_NAME[82]='LLMP'
	aSOFTWARE_NAME[83]='Apache2'
	aSOFTWARE_NAME[84]='Lighttpd'
	aSOFTWARE_NAME[85]='Nginx'
	aSOFTWARE_NAME[86]='86'
	aSOFTWARE_NAME[87]='SQlite'
	aSOFTWARE_NAME[88]='MariaDB'
	aSOFTWARE_NAME[89]='PHP'
	aSOFTWARE_NAME[90]='phpMyAdmin'
	aSOFTWARE_NAME[91]='Redis'
	aSOFTWARE_NAME[92]='CertBot'
	aSOFTWARE_NAME[93]='Pi-hole'
	aSOFTWARE_NAME[94]='ProFTP'
	aSOFTWARE_NAME[95]='vsFTPD'
	aSOFTWARE_NAME[96]='Samba'
	aSOFTWARE_NAME[97]='OpenVPN'
	aSOFTWARE_NAME[98]='HaProxy'
	aSOFTWARE_NAME[99]='EmonPi'
	aSOFTWARE_NAME[100]='PiJuice'
	aSOFTWARE_NAME[101]='Log Rotate'
	aSOFTWARE_NAME[102]='Rsyslog'
	aSOFTWARE_NAME[103]='DietPi-Ramlog'
	aSOFTWARE_NAME[104]='Dropbear'
	aSOFTWARE_NAME[105]='OpenSSH Server'
	aSOFTWARE_NAME[106]='NTP'
	aSOFTWARE_NAME[107]='rTorrent'
	aSOFTWARE_NAME[108]='AmiBerry'
	aSOFTWARE_NAME[109]='NFS'
	aSOFTWARE_NAME[110]='NFS Client'
	aSOFTWARE_NAME[111]='UrBackup server'
	aSOFTWARE_NAME[112]='DXX-Rebirth'
	aSOFTWARE_NAME[113]='Chromium'
	aSOFTWARE_NAME[114]='Nextcloud'
	aSOFTWARE_NAME[115]='Webmin'
	aSOFTWARE_NAME[116]='SickRage'
	aSOFTWARE_NAME[117]='PiVPN'
	aSOFTWARE_NAME[118]='Mopidy'
	aSOFTWARE_NAME[119]='CAVA'
	aSOFTWARE_NAME[120]='RealVNC Server'
	aSOFTWARE_NAME[121]='Roon Bridge'
	aSOFTWARE_NAME[122]='Node-Red'
	aSOFTWARE_NAME[123]='Mosquitto '
	aSOFTWARE_NAME[124]='NAA daemon'
	aSOFTWARE_NAME[125]='Tomcat8'
	aSOFTWARE_NAME[126]='LibSSL1.0.0'
	aSOFTWARE_NAME[127]='NeoVim'
	aSOFTWARE_NAME[128]='MPD'
	aSOFTWARE_NAME[129]='O!MPD'
	aSOFTWARE_NAME[130]='Python Pip'
	aSOFTWARE_NAME[131]='Blynk Server'
	aSOFTWARE_NAME[132]='Aria2'
	aSOFTWARE_NAME[133]='YaCy'
	aSOFTWARE_NAME[134]='Tonido'
	aSOFTWARE_NAME[135]='IceCast'
	aSOFTWARE_NAME[136]='MotionEye'
	aSOFTWARE_NAME[137]='CloudPrint'
	aSOFTWARE_NAME[138]='VirtualHere'
	aSOFTWARE_NAME[139]='SABnzbd'
	aSOFTWARE_NAME[140]='SDL2'
	aSOFTWARE_NAME[141]='Spotify Connect Web'
	aSOFTWARE_NAME[142]='CouchPotato'
	aSOFTWARE_NAME[143]='Koel'
	aSOFTWARE_NAME[144]='Sonarr'
	aSOFTWARE_NAME[145]='Radarr'
	aSOFTWARE_NAME[146]='Tautulli'
	aSOFTWARE_NAME[147]='Jackett'
	aSOFTWARE_NAME[148]='JRiver MC'
	aSOFTWARE_NAME[149]='NZBget'
	aSOFTWARE_NAME[150]='Mono'
	aSOFTWARE_NAME[151]='Nvidia'
	aSOFTWARE_NAME[152]='Avahi-Daemon'
	aSOFTWARE_NAME[153]='OctoPrint'
	aSOFTWARE_NAME[154]='Roon Server'
	aSOFTWARE_NAME[155]='HTPC Manager'
	aSOFTWARE_NAME[156]='Steam'
	aSOFTWARE_NAME[157]='Home Assistant'
	aSOFTWARE_NAME[158]='Minio'
	aSOFTWARE_NAME[159]='Allo'
	aSOFTWARE_NAME[160]='Allo_update'
	aSOFTWARE_NAME[161]='FuguHub'
	aSOFTWARE_NAME[162]='Docker'
	aSOFTWARE_NAME[163]='Gmediarender'
	aSOFTWARE_NAME[164]='Nukkit'
	aSOFTWARE_NAME[165]='Gitea'
	aSOFTWARE_NAME[166]='PI-SPC'
	aSOFTWARE_NAME[167]='Raspotify'
	aSOFTWARE_NAME[168]='moOde'
	aSOFTWARE_NAME[169]='Google AIY'

	# - v6.9 software fixes: https://github.com/Fourdee/DietPi/issues/1927#issuecomment-426453144
	aSOFTWARE_NAME6_9=()
	# - v6.10 software index changes
	aSOFTWARE_NAME6_10=()
	for i in ${!aSOFTWARE_NAME[@]}
	do

		aSOFTWARE_NAME6_9[$i]="${aSOFTWARE_NAME[$i]}"
		aSOFTWARE_NAME6_10[$i]="${aSOFTWARE_NAME[$i]}"

	done
	#aSOFTWARE_NAME6_10[2]='2' # CurlTMPFS Removed but not marked as removed => v6.12
	aSOFTWARE_NAME6_10[80]='Ubooquity'
	aSOFTWARE_NAME6_10[86]='Roon Extension Manager'
	aSOFTWARE_NAME6_10[106]='106' # NTP
	aSOFTWARE_NAME6_10[168]='168' # Moode

	# - v6.11 hotfix
	aSOFTWARE_NAME6_11=()
	for i in ${!aSOFTWARE_NAME6_10[@]}
	do

		aSOFTWARE_NAME6_11[$i]="${aSOFTWARE_NAME6_10[$i]}"

	done

	# - v6.12
	aSOFTWARE_NAME6_12=()
	for i in ${!aSOFTWARE_NAME6_11[@]}
	do

		aSOFTWARE_NAME6_12[$i]="${aSOFTWARE_NAME6_11[$i]}"

	done
	aSOFTWARE_NAME6_12[2]='2' # CurlTMPFS
	aSOFTWARE_NAME6_12[148]='148' # JRiver

	# - v6.13
	aSOFTWARE_NAME6_13=()
	for i in ${!aSOFTWARE_NAME6_12[@]}
	do

		aSOFTWARE_NAME6_13[$i]="${aSOFTWARE_NAME6_12[$i]}"

	done
	aSOFTWARE_NAME6_13[2]='Folding@Home'
	aSOFTWARE_NAME6_13[106]='Lidarr'

	# - v6.14
	aSOFTWARE_NAME6_14=()
	for i in ${!aSOFTWARE_NAME6_13[@]}
	do

		aSOFTWARE_NAME6_14[$i]="${aSOFTWARE_NAME6_13[$i]}"

	done
	aSOFTWARE_NAME6_14[38]='FreshRSS'

	# - v6.15
	aSOFTWARE_NAME6_15=()
	for i in ${!aSOFTWARE_NAME6_14[@]}
	do

		aSOFTWARE_NAME6_15[$i]="${aSOFTWARE_NAME6_14[$i]}"

	done
	aSOFTWARE_NAME6_15[148]='myMPD'

	# - v6.16 + v6.17 + v6.18
	aSOFTWARE_NAME6_16=()
	aSOFTWARE_NAME6_17=()
	aSOFTWARE_NAME6_18=()
	for i in ${!aSOFTWARE_NAME6_15[@]}
	do

		aSOFTWARE_NAME6_16[$i]="${aSOFTWARE_NAME6_15[$i]}"
		aSOFTWARE_NAME6_17[$i]="${aSOFTWARE_NAME6_16[$i]}"
		aSOFTWARE_NAME6_18[$i]="${aSOFTWARE_NAME6_17[$i]}"

	done
	aSOFTWARE_NAME6_18[168]='Nextcloud Talk'

	# - v6.19 + v6.20
	aSOFTWARE_NAME6_19=()
	aSOFTWARE_NAME6_20=()
	for i in ${!aSOFTWARE_NAME6_18[@]}
	do

		aSOFTWARE_NAME6_19[$i]="${aSOFTWARE_NAME6_18[$i]}"
		aSOFTWARE_NAME6_20[$i]="${aSOFTWARE_NAME6_19[$i]}"

	done

	Main(){

		# Copy files to RAM to speed up grep
		#mkdir -p /tmp/dietpi-survey_report
		#cp /home/dietpi-survey/survey/*.txt /tmp/dietpi-survey_report/ # /etc/cron.minutely/dietpi-survey_report: line 310: /bin/cp: Argument list too long
		[[ -e /tmp/dietpi-survey_report ]] && rm -R /tmp/dietpi-survey_report
		cp -R /home/dietpi-survey/survey /tmp/dietpi-survey_report

		cd /tmp/dietpi-survey_report # so we can remove bad files from disk
		for file in *.txt
		do

			# Filled and empty survey files
			((SURVEY_COUNT_TOTAL++))
			if [[ ! -s $file ]]; then

				((SURVEY_COUNT_EMPTY++))
				continue

			fi

			# v6.10+: files can be sourced:
			if grep -q '^#!/bin/bash' $file; then

				. $file

				# - Add bench to array
				if [[ $BENCH_VERSION ]]; then

					if [[ $G_DEBUG == 1 ]]; then

						echo "DEBUG Benchmark: $file"
						echo "BENCH_VERSION=$BENCH_VERSION | BENCH_HW_MODEL=$BENCH_HW_MODEL BENCH_CPU=$BENCH_CPU | BENCH_ROOTFS_WRITE=$BENCH_ROOTFS_WRITE | BENCH_ROOTFS_READ=$BENCH_ROOTFS_READ | BENCH_RAM_WRITE=$BENCH_RAM_WRITE | BENCH_RAM_READ=$BENCH_RAM_READ | BENCH_CPU_TEMP_START=$BENCH_CPU_TEMP_START | BENCH_CPU_TEMP_END=$BENCH_CPU_TEMP_END | BENCH_CUSTOMFS_WRITE=$BENCH_CUSTOMFS_WRITE | BENCH_CUSTOMFS_READ=$BENCH_CUSTOMFS_READ | BENCH_NET_LAN_SPEED=$BENCH_NET_LAN_SPEED"

					fi

					#Common benchmarks
					# - Check for all expected values based on how we handle them, only add entry if valid for all.
					if [[ ${BENCH_CPU//.*} =~ ^-?[0-9]+$ &&
						${BENCH_ROOTFS_WRITE//.*} =~ ^-?[0-9]+$ && ${BENCH_ROOTFS_READ//.*} =~ ^-?[0-9]+$ &&
						${BENCH_RAM_WRITE//.*} =~ ^-?[0-9]+$ && ${BENCH_RAM_READ//.*} =~ ^-?[0-9]+$ &&
						$BENCH_CPU_TEMP_START && $BENCH_CPU_TEMP_END ]]; then

						aBENCH_CPU[$BENCH_HW_MODEL,${aBENCH_COMMON_INDEX[$BENCH_HW_MODEL]:=0}]=$BENCH_CPU
						aBENCH_ROOTFS_WRITE[$BENCH_HW_MODEL,${aBENCH_COMMON_INDEX[$BENCH_HW_MODEL]}]=${BENCH_ROOTFS_WRITE//.*}
						aBENCH_ROOTFS_READ[$BENCH_HW_MODEL,${aBENCH_COMMON_INDEX[$BENCH_HW_MODEL]}]=${BENCH_ROOTFS_READ//.*}
						aBENCH_RAM_WRITE[$BENCH_HW_MODEL,${aBENCH_COMMON_INDEX[$BENCH_HW_MODEL]}]=${BENCH_RAM_WRITE//.*}
						aBENCH_RAM_READ[$BENCH_HW_MODEL,${aBENCH_COMMON_INDEX[$BENCH_HW_MODEL]}]=${BENCH_RAM_READ//.*}
						aBENCH_CPU_TEMP_START[$BENCH_HW_MODEL,${aBENCH_COMMON_INDEX[$BENCH_HW_MODEL]}]=${BENCH_CPU_TEMP_START//.*}
						aBENCH_CPU_TEMP_END[$BENCH_HW_MODEL,${aBENCH_COMMON_INDEX[$BENCH_HW_MODEL]}]=${BENCH_CPU_TEMP_END//.*}

						((aBENCH_COMMON_INDEX[$BENCH_HW_MODEL]++))

					fi

					#Optional benchmarks, handle them in a seperate index array
					# - Custom FS
					if [[ ${BENCH_CUSTOMFS_WRITE//.*} =~ ^-?[0-9]+$ && ${BENCH_CUSTOMFS_READ//.*} =~ ^-?[0-9]+$ ]]; then

						aBENCH_CUSTOMFS_WRITE[$BENCH_HW_MODEL,${aBENCH_CUSTOMFS_INDEX[$BENCH_HW_MODEL]:=0}]=${BENCH_CUSTOMFS_WRITE//.*}
						aBENCH_CUSTOMFS_READ[$BENCH_HW_MODEL,${aBENCH_CUSTOMFS_INDEX[$BENCH_HW_MODEL]}]=${BENCH_CUSTOMFS_READ//.*}
						((aBENCH_CUSTOMFS_INDEX[$BENCH_HW_MODEL]++))

					fi

					# - LAN
					if [[ ${BENCH_NET_LAN_SPEED//.*} =~ ^-?[0-9]+$ ]]; then

						aBENCH_NET_LAN_SPEED[$BENCH_HW_MODEL,${aBENCH_LAN_INDEX[$BENCH_HW_MODEL]:=0}]=${BENCH_NET_LAN_SPEED//.*}
						((aBENCH_LAN_INDEX[$BENCH_HW_MODEL]++))

					fi

					#Done, clear vars
					unset BENCH_VERSION
					unset BENCH_HW_MODEL

					unset BENCH_CPU
					unset BENCH_ROOTFS_WRITE
					unset BENCH_ROOTFS_READ
					unset BENCH_RAM_WRITE
					unset BENCH_RAM_READ
					unset BENCH_CPU_TEMP_START
					unset BENCH_CPU_TEMP_END

					unset BENCH_CUSTOMFS_WRITE
					unset BENCH_CUSTOMFS_READ
					unset BENCH_NET_LAN_SPEED

				fi

				continue

			fi

			# pre v6.10: Files need to be scraped:

			# Reset variables
			survey_version=0
			survey_sendcount=0
			dietpi_version='0.0'
			device_name='NULL'
			cpu_arch=0
			cpu_count=0
			distro_version='NULL'
			autostart_option=-1
			software_list=''
			software=''

			# Survey versions
			#survey_version=$(grep -m1 '^DietPi-Survey v' $file)
			#((aSURVEY_VERSION[${survey_version##* v}]++))
			# - Can only be v5 on pre v6.10
			((aSURVEY_VERSION[5]++))

			# Upload count numbers
			survey_sendcount=$(grep -m1 '^Upload Count' $file)
			((aSURVEY_SENTCOUNT[${survey_sendcount##* : }]++))

			# DietPi versions
			#dietpi_version=$(grep -m1 '^DietPi Version' $file)
			# As survey runs on v6.9 currently within patch file, the version string is still at v6.8. Currently manual edit is needed, on v6.10 survey will run on dietpi-update after version string increase.
			#dietpi_version=${dietpi_version/6.8/6.9}
			#((aDIETPI_VERSION[${dietpi_version##* : }]++))
			# - Can only be v6.9
			((aDIETPI_VERSION[6.9]++))

			# Device name
			device_name=$(grep -m1 '^Hardware Name' $file)
			((aDEVICE_NAME[${device_name##* : }]++))

			# CPU architecture
			cpu_arch=$(grep -m1 '^CPU Arch Index' $file)
			cpu_arch=${cpu_arch##* : }
			((aCPU_ARCH[${aCPU_NAME[$cpu_arch]:=$cpu_arch}]++))

			# CPU core count
			cpu_count=$(grep -m1 '^CPU Count' $file)
			((aCPU_COUNT[${cpu_count##* : }]++))

			# Distro version
			distro_version=$(grep -m1 '^Distro Name' $file)
			((aDISTRO_VERSION[${distro_version##* : }]++))

			# Autostart option
			autostart_option=$(grep -m1 '^Autoboot Index' $file)
			autostart_option=${autostart_option##* : }
			((aAUTOSTART_OPTION[${aAUTOSTART_NAME[$autostart_option]:=$autostart_option}]++))

			# Installed software
			software_list=$(grep '^aSOFTWARE_INSTALL_STATE\[' $file)
			while read software
			do

				software=${software##*[}
				software=${software%%]*}
				((aSOFTWARE[${aSOFTWARE_NAME[$software]:=$software}]++))

			done <<< "$software_list"

		done

		SURVEY_SENTCOUNT_TOTAL=0
		for i in ${!aSURVEY_SENTCOUNT[@]}
		do

			(( SURVEY_SENTCOUNT_TOTAL += $i * ${aSURVEY_SENTCOUNT[$i]} ))

		done

		#Bench Results, HW_MODEL array:
		local default_min_value=100000
		for i in ${!aBENCH_COMMON_INDEX[@]}
		do

			local hw_model_supports_cpu_temps=1

			#init results
			aBENCH_RESULT_CPU_MIN[$i]=$default_min_value
			aBENCH_RESULT_CPU_MAX[$i]=0
			aBENCH_RESULT_CPU_AVG[$i]=0

			aBENCH_RESULT_ROOTFS_WRITE_MIN[$i]=$default_min_value
			aBENCH_RESULT_ROOTFS_WRITE_MAX[$i]=0
			aBENCH_RESULT_ROOTFS_WRITE_AVG[$i]=0

			aBENCH_RESULT_ROOTFS_READ_MIN[$i]=$default_min_value
			aBENCH_RESULT_ROOTFS_READ_MAX[$i]=0
			aBENCH_RESULT_ROOTFS_READ_AVG[$i]=0

			aBENCH_RESULT_RAM_WRITE_MIN[$i]=$default_min_value
			aBENCH_RESULT_RAM_WRITE_MAX[$i]=0
			aBENCH_RESULT_RAM_WRITE_AVG[$i]=0

			aBENCH_RESULT_RAM_READ_MIN[$i]=$default_min_value
			aBENCH_RESULT_RAM_READ_MAX[$i]=0
			aBENCH_RESULT_RAM_READ_AVG[$i]=0

			aBENCH_RESULT_CPU_TEMP_START_MIN[$i]=$default_min_value
			aBENCH_RESULT_CPU_TEMP_START_MAX[$i]=0
			aBENCH_RESULT_CPU_TEMP_START_AVG[$i]=0

			aBENCH_RESULT_CPU_TEMP_END_MIN[$i]=$default_min_value
			aBENCH_RESULT_CPU_TEMP_END_MAX[$i]=0
			aBENCH_RESULT_CPU_TEMP_END_AVG[$i]=0

			for (( j=0; j<${aBENCH_COMMON_INDEX[$i]}; j++ ))
			do

				#CPU
				# echo "aBENCH_CPU[$i,$j] ${aBENCH_CPU[$i,$j]}"
				if (( $(bc -l <<< "${aBENCH_CPU[$i,$j]} < ${aBENCH_RESULT_CPU_MIN[$i]}") )); then

					aBENCH_RESULT_CPU_MIN[$i]=$(bc -l <<< "scale=$BENCH_RESULTS_CPU_SCALE; ${aBENCH_CPU[$i,$j]} * 1")

				fi
				if (( $(bc -l <<< "${aBENCH_CPU[$i,$j]} > ${aBENCH_RESULT_CPU_MAX[$i]}") )); then

					aBENCH_RESULT_CPU_MAX[$i]=$(bc -l <<< "scale=$BENCH_RESULTS_CPU_SCALE; ${aBENCH_CPU[$i,$j]} * 1")

				fi
				aBENCH_RESULT_CPU_AVG[$i]=$(bc -l <<< "${aBENCH_CPU[$i,$j]} + ${aBENCH_RESULT_CPU_AVG[$i]}")

				#RootFS
				# echo "aBENCH_ROOTFS_WRITE[$i,$j] ${aBENCH_ROOTFS_WRITE[$i,$j]}"
				if (( ${aBENCH_ROOTFS_WRITE[$i,$j]} < ${aBENCH_RESULT_ROOTFS_WRITE_MIN[$i]} )); then

					aBENCH_RESULT_ROOTFS_WRITE_MIN[$i]=${aBENCH_ROOTFS_WRITE[$i,$j]}

				fi
				if (( ${aBENCH_ROOTFS_WRITE[$i,$j]} > ${aBENCH_RESULT_ROOTFS_WRITE_MAX[$i]} )); then

					aBENCH_RESULT_ROOTFS_WRITE_MAX[$i]=${aBENCH_ROOTFS_WRITE[$i,$j]}

				fi
				(( aBENCH_RESULT_ROOTFS_WRITE_AVG[$i] += ${aBENCH_ROOTFS_WRITE[$i,$j]} ))

				# echo "aBENCH_ROOTFS_READ[$i,$j] ${aBENCH_ROOTFS_READ[$i,$j]}"
				if (( ${aBENCH_ROOTFS_READ[$i,$j]} < ${aBENCH_RESULT_ROOTFS_READ_MIN[$i]} )); then

					aBENCH_RESULT_ROOTFS_READ_MIN[$i]=${aBENCH_ROOTFS_READ[$i,$j]}

				fi
				if (( ${aBENCH_ROOTFS_READ[$i,$j]} > ${aBENCH_RESULT_ROOTFS_READ_MAX[$i]} )); then

					aBENCH_RESULT_ROOTFS_READ_MAX[$i]=${aBENCH_ROOTFS_READ[$i,$j]}

				fi
				(( aBENCH_RESULT_ROOTFS_READ_AVG[$i] += ${aBENCH_ROOTFS_READ[$i,$j]} ))

				#RAM
				# echo "aBENCH_RAM_WRITE[$i,$j] ${aBENCH_RAM_WRITE[$i,$j]}"
				if (( ${aBENCH_RAM_WRITE[$i,$j]} < ${aBENCH_RESULT_RAM_WRITE_MIN[$i]} )); then

					aBENCH_RESULT_RAM_WRITE_MIN[$i]=${aBENCH_RAM_WRITE[$i,$j]}

				fi
				if (( ${aBENCH_RAM_WRITE[$i,$j]} > ${aBENCH_RESULT_RAM_WRITE_MAX[$i]} )); then

					aBENCH_RESULT_RAM_WRITE_MAX[$i]=${aBENCH_RAM_WRITE[$i,$j]}

				fi
				(( aBENCH_RESULT_RAM_WRITE_AVG[$i] += ${aBENCH_RAM_WRITE[$i,$j]} ))

				# echo "aBENCH_RAM_READ[$i,$j] ${aBENCH_RAM_READ[$i,$j]}"
				if (( ${aBENCH_RAM_READ[$i,$j]} < ${aBENCH_RESULT_RAM_READ_MIN[$i]} )); then

					aBENCH_RESULT_RAM_READ_MIN[$i]=${aBENCH_RAM_READ[$i,$j]}

				fi
				if (( ${aBENCH_RAM_READ[$i,$j]} > ${aBENCH_RESULT_RAM_READ_MAX[$i]} )); then

					aBENCH_RESULT_RAM_READ_MAX[$i]=${aBENCH_RAM_READ[$i,$j]}

				fi
				(( aBENCH_RESULT_RAM_READ_AVG[$i] += ${aBENCH_RAM_READ[$i,$j]} ))

				#CPU temp
				# echo "aBENCH_CPU_TEMP_START[$i,$j] ${aBENCH_CPU_TEMP_START[$i,$j]}"
				if (( $hw_model_supports_cpu_temps )); then

					if [[ ${aBENCH_CPU_TEMP_START[$i,$j]} =~ ^-?[0-9]+$ ]]; then

						if (( ${aBENCH_CPU_TEMP_START[$i,$j]} < ${aBENCH_RESULT_CPU_TEMP_START_MIN[$i]} )); then

							aBENCH_RESULT_CPU_TEMP_START_MIN[$i]=${aBENCH_CPU_TEMP_START[$i,$j]}

						fi
						if (( ${aBENCH_CPU_TEMP_START[$i,$j]} > ${aBENCH_RESULT_CPU_TEMP_START_MAX[$i]} )); then

							aBENCH_RESULT_CPU_TEMP_START_MAX[$i]=${aBENCH_CPU_TEMP_START[$i,$j]}

						fi
						(( aBENCH_RESULT_CPU_TEMP_START_AVG[$i] += ${aBENCH_CPU_TEMP_START[$i,$j]} ))

						# echo "aBENCH_CPU_TEMP_END[$i,$j] ${aBENCH_CPU_TEMP_END[$i,$j]}"
						if (( ${aBENCH_CPU_TEMP_END[$i,$j]} < ${aBENCH_RESULT_CPU_TEMP_END_MIN[$i]} )); then

							aBENCH_RESULT_CPU_TEMP_END_MIN[$i]=${aBENCH_CPU_TEMP_END[$i,$j]}

						fi
						if (( ${aBENCH_CPU_TEMP_END[$i,$j]} > ${aBENCH_RESULT_CPU_TEMP_END_MAX[$i]} )); then

							aBENCH_RESULT_CPU_TEMP_END_MAX[$i]=${aBENCH_CPU_TEMP_END[$i,$j]}

						fi
						(( aBENCH_RESULT_CPU_TEMP_END_AVG[$i] += ${aBENCH_CPU_TEMP_END[$i,$j]} ))

					else

						hw_model_supports_cpu_temps=0 #Set unavailable for current HW model, do not check again for HW model
						aBENCH_RESULT_CPU_TEMP_START_AVG[$i]='N/A'
						aBENCH_RESULT_CPU_TEMP_END_AVG[$i]='N/A'

						aBENCH_RESULT_CPU_TEMP_START_MIN[$i]='N/A'
						aBENCH_RESULT_CPU_TEMP_START_MAX[$i]='N/A'

						aBENCH_RESULT_CPU_TEMP_END_MIN[$i]='N/A'
						aBENCH_RESULT_CPU_TEMP_END_MAX[$i]='N/A'

					fi

				fi

				if [[ $G_DEBUG == 1 ]]; then

					echo "DEBUG Bench Entry: $i $j"
					echo ${aBENCH_ROOTFS_WRITE[$i,$j]}
					echo ${aBENCH_ROOTFS_READ[$i,$j]}
					echo ${aBENCH_RAM_WRITE[$i,$j]}
					echo ${aBENCH_RAM_READ[$i,$j]}
					echo ${aBENCH_CPU_TEMP_START[$i,$j]}
					echo ${aBENCH_CPU_TEMP_END[$i,$j]}

				fi

				#Last item in current array. Work out averages
				if (( $j == ${aBENCH_COMMON_INDEX[$i]} - 1 )); then

					aBENCH_RESULT_CPU_AVG[$i]=$(bc -l <<< "scale=$BENCH_RESULTS_CPU_SCALE; ${aBENCH_RESULT_CPU_AVG[$i]} / ${aBENCH_COMMON_INDEX[$i]}")
					aBENCH_RESULT_ROOTFS_WRITE_AVG[$i]=$(( ${aBENCH_RESULT_ROOTFS_WRITE_AVG[$i]} / ${aBENCH_COMMON_INDEX[$i]} ))
					aBENCH_RESULT_ROOTFS_READ_AVG[$i]=$(( ${aBENCH_RESULT_ROOTFS_READ_AVG[$i]} / ${aBENCH_COMMON_INDEX[$i]} ))
					aBENCH_RESULT_RAM_WRITE_AVG[$i]=$(( ${aBENCH_RESULT_RAM_WRITE_AVG[$i]} / ${aBENCH_COMMON_INDEX[$i]} ))
					aBENCH_RESULT_RAM_READ_AVG[$i]=$(( ${aBENCH_RESULT_RAM_READ_AVG[$i]} / ${aBENCH_COMMON_INDEX[$i]} ))

					if (( $hw_model_supports_cpu_temps )); then

						aBENCH_RESULT_CPU_TEMP_START_AVG[$i]=$(( ${aBENCH_RESULT_CPU_TEMP_START_AVG[$i]} / ${aBENCH_COMMON_INDEX[$i]} ))
						aBENCH_RESULT_CPU_TEMP_END_AVG[$i]=$(( ${aBENCH_RESULT_CPU_TEMP_END_AVG[$i]} / ${aBENCH_COMMON_INDEX[$i]} ))

					fi

					if [[ $G_DEBUG == 1 ]]; then

						echo "DEBUG Bench avg: $i"
						echo "aBENCH_RESULT_CPU_AVG $i = ${aBENCH_RESULT_CPU_AVG[$i]}"
						echo "aBENCH_RESULT_ROOTFS_WRITE_AVG $i = ${aBENCH_RESULT_ROOTFS_WRITE_AVG[$i]}"
						echo "aBENCH_RESULT_ROOTFS_READ_AVG $i = ${aBENCH_RESULT_ROOTFS_READ_AVG[$i]}"
						echo "aBENCH_RESULT_RAM_WRITE_AVG $i = ${aBENCH_RESULT_RAM_WRITE_AVG[$i]}"
						echo "aBENCH_RESULT_RAM_READ_AVG $i = ${aBENCH_RESULT_RAM_READ_AVG[$i]}"
						echo "aBENCH_RESULT_CPU_TEMP_START_AVG $i = ${aBENCH_RESULT_CPU_TEMP_START_AVG[$i]}"
						echo "aBENCH_RESULT_CPU_TEMP_END_AVG $i = ${aBENCH_RESULT_CPU_TEMP_END_AVG[$i]}"

					fi

				fi

			done

		done

		# - Optional benchmarks LAN
		for i in ${!aBENCH_LAN_INDEX[@]}
		do

			aBENCH_RESULT_NET_LAN_SPEED_MIN[$i]=$default_min_value
			aBENCH_RESULT_NET_LAN_SPEED_MAX[$i]=0
			aBENCH_RESULT_NET_LAN_SPEED_AVG[$i]=0

			for (( j=0; j<${aBENCH_LAN_INDEX[$i]}; j++ ))
			do

				#LAN
				# echo "aBENCH_NET_LAN_SPEED[$i,$j] ${aBENCH_NET_LAN_SPEED[$i,$j]}"
				if (( ${aBENCH_NET_LAN_SPEED[$i,$j]} < ${aBENCH_RESULT_NET_LAN_SPEED_MIN[$i]} )); then

					aBENCH_RESULT_NET_LAN_SPEED_MIN[$i]=${aBENCH_NET_LAN_SPEED[$i,$j]}

				fi
				if (( ${aBENCH_NET_LAN_SPEED[$i,$j]} > ${aBENCH_RESULT_NET_LAN_SPEED_MAX[$i]} )); then

					aBENCH_RESULT_NET_LAN_SPEED_MAX[$i]=${aBENCH_NET_LAN_SPEED[$i,$j]}

				fi
				(( aBENCH_RESULT_NET_LAN_SPEED_AVG[$i] += ${aBENCH_NET_LAN_SPEED[$i,$j]} ))

				#Last item in current array. Work out averages
				if (( $j == ${aBENCH_LAN_INDEX[$i]} - 1 )); then

					aBENCH_RESULT_NET_LAN_SPEED_AVG[$i]=$(( ${aBENCH_RESULT_NET_LAN_SPEED_AVG[$i]} / ${aBENCH_LAN_INDEX[$i]} ))

				fi

			done

		done

		# - Optional benchmarks CUSTOMFS
		# aBENCH_RESULT_CUSTOMFS_WRITE_MIN[$i]=$default_min_value
		# aBENCH_RESULT_CUSTOMFS_WRITE_MAX[$i]=0
		# aBENCH_RESULT_CUSTOMFS_WRITE_AVG[$i]=0

		# aBENCH_RESULT_CUSTOMFS_READ_MIN[$i]=$default_min_value
		# aBENCH_RESULT_CUSTOMFS_READ_MAX[$i]=0
		# aBENCH_RESULT_CUSTOMFS_READ_AVG[$i]=0

		cat << _EOF_ > /var/www/survey/index.html
<html>
	<head>
		<style>
			body {
				font-size: 18px;
				color: white;
				background-color: black;
				font-family: Verdana, Arial, Helvetica, sans-serif;
			}
			th, td {
				padding: 5px;
			}
			table, th, td {
				font-size: 14px;
				border: 1px solid grey;
			}
		</style>
	</head>
	<body>
		<h2>DietPi-Survey report page:</h2>
		<i>Last update: $(TZ=UTC date "+%Y-%m-%d %T UTC")</i>
		<br>
		<table>
			<tr><td>Total user count</td><td align="right">$SURVEY_COUNT_TOTAL</td></tr>
			<tr><td>Users opted in</td><td align="right">$(( $SURVEY_COUNT_TOTAL - $SURVEY_COUNT_EMPTY ))</td></tr>
			<tr><td>Users opted out</td><td align="right">$SURVEY_COUNT_EMPTY</td></tr>
		</table>

		<h4>DietPi-Survey versions:</h4>
		<table>
			$(for i in ${!aSURVEY_VERSION[@]}; do echo "<tr><td>DietPi-Survey v$i</td><td align=\"right\">	${aSURVEY_VERSION[$i]}</td></tr>"; done | sort -nrk 1.24 -t '	')
		</table>

		<h4>DietPi-Survey upload counts:</h4>
		<table>
			<tr><td>Overall upload count</td><td align="right">$SURVEY_SENTCOUNT_TOTAL</td></tr>
			<tr><th>Upload count</th><th>by user count</th></tr>
			$(for i in ${!aSURVEY_SENTCOUNT[@]}; do echo "<tr><td>$i</td><td align=\"right\">	${aSURVEY_SENTCOUNT[$i]}</td></tr>"; done | sort -nrk 1.9 -t '	')
		</table>

		<h4>DietPi versions:</h4>
		<table>
			$(for i in "${!aDIETPI_VERSION[@]}"; do echo "<tr><td>DietPi v$i</td><td align=\"right\">	${aDIETPI_VERSION[$i]}</td></tr>"; done | sort -nrk 1.20 -t '	')
		</table>

		<h4>Git branches:</h4>
		<table>
			$(for i in "${!aGIT_BRANCH[@]}"; do echo "<tr><td>$i</td><td align=\"right\">	${aGIT_BRANCH[$i]}</td></tr>"; done | sort -nrk 2 -t '	')
		</table>

		<h4>Devices:</h4>
		<table>
			$(for i in "${!aDEVICE_NAME[@]}"; do echo "<tr><td>$i</td><td align=\"right\">	${aDEVICE_NAME[$i]}</td></tr>"; done | sort -nrk 2 -t '	')
		</table>

                <h4>CPU architectures:</h4>
                <table>
                        $(for i in "${!aCPU_ARCH[@]}"; do echo "<tr><td>$i</td><td align=\"right\">	${aCPU_ARCH[$i]}</td></tr>"; done | sort -nrk 2 -t '	')
                </table>

                <h4>CPU core counts:</h4>
                <table>
                        $(for i in ${!aCPU_COUNT[@]}; do echo "<tr><td>$i Core(s)</td><td align=\"right\">	${aCPU_COUNT[$i]}</td></tr>"; done | sort -nrk 2 -t '	')
                </table>

		<h4>Distro versions:</h4>
		<table>
			$(for i in "${!aDISTRO_VERSION[@]}"; do echo "<tr><td>$i</td><td align=\"right\">	${aDISTRO_VERSION[$i]}</td></tr>"; done | sort -nrk 2 -t '	')
		</table>

		<h4>Autostart options:</h4>
		<table>
			$(for i in "${!aAUTOSTART_OPTION[@]}"; do echo "<tr><td>$i</td><td align=\"right\">	${aAUTOSTART_OPTION[$i]}</td></tr>"; done | sort -nrk 2 -t '	')
		</table>

		<h4>DietPi-Automation:</h4>
		<table>
			<tr><td>Used by</td><td align="right">${aAUTO_SETUP_AUTOMATED[1]} of $((${aAUTO_SETUP_AUTOMATED[1]} + ${aAUTO_SETUP_AUTOMATED[0]})) users</td></tr>
		</table>

		<h4>Network interfaces:</h4>
		<table>
			$(for i in "${!aNETWORK_INTERFACE[@]}"; do echo "<tr><td>$i</td><td align=\"right\">	${aNETWORK_INTERFACE[$i]}</td></tr>"; done | sort -nrk 2 -t '	')
		</table>

		<h4>Installed software titles:</h4>
		<table>
			$(for i in "${!aSOFTWARE[@]}"; do echo "<tr><td>$i</td><td align=\"right\">	${aSOFTWARE[$i]}</td></tr>"; done | sort -nrk 2 -t '	')
		</table>


		<h4 id="benchmark">DietPi-Benchmarks | CPU:</h4>
		<table>

			<tr>

				<td colspan="2">

				</td>
				<td colspan="3" bgcolor="#5B5B5B">
					CPU time (seconds, lower is faster):
				</td>
				<td colspan="3" bgcolor="#5B5B5B">
					CPU idle temp ('c):
				</td>
				<td colspan="3" bgcolor="#5B5B5B">
					CPU full load temp ('c):
				</td>

			</td>

			<tr>
				<td bgcolor="#5B5B5B">
					Device:
				</td>
				<td bgcolor="#5B5B5B">
					Total benchmarks:
				</td>
				<td bgcolor="#4C5100">
					Average:
				</td>
				<td bgcolor="#135100">
					Fastest:
				</td>
				<td bgcolor="#510000">
					Slowest:
				</td>
				<td bgcolor="#4C5100">
					Average:
				</td>
				<td bgcolor="#135100">
					Lowest:
				</td>
				<td bgcolor="#510000">
					Highest:
				</td>
				<td bgcolor="#4C5100">
					Average:
				</td>
				<td bgcolor="#135100">
					Lowest:
				</td>
				<td bgcolor="#510000">
					Highest:
				</td>

			</tr>
			$(for i in "${!aBENCH_COMMON_INDEX[@]}"; do echo "<tr><td>${aHW_NAME[$i]:=$i}</td> <td>${aBENCH_COMMON_INDEX[$i]}</td> <td>${aBENCH_RESULT_CPU_AVG[$i]}</td> <td>${aBENCH_RESULT_CPU_MIN[$i]}</td> <td>${aBENCH_RESULT_CPU_MAX[$i]}</td> <td>${aBENCH_RESULT_CPU_TEMP_START_AVG[$i]}</td> <td>${aBENCH_RESULT_CPU_TEMP_START_MIN[$i]}</td> <td>${aBENCH_RESULT_CPU_TEMP_START_MAX[$i]}</td> <td>${aBENCH_RESULT_CPU_TEMP_END_AVG[$i]}</td> <td>${aBENCH_RESULT_CPU_TEMP_END_MIN[$i]}</td> <td>${aBENCH_RESULT_CPU_TEMP_END_MAX[$i]}</td>    </tr>"; done | sort -nk 1 -t '	')
		</table>

		<h4>DietPi-Benchmarks | IO (Filesystem & RAM):</h4>
		<table>

			<tr>

				<td colspan="2">

				</td>
				<td colspan="3" bgcolor="#5B5B5B">
					RootFS write (MB/s):
				</td>
				<td colspan="3" bgcolor="#5B5B5B">
					RootFS read (MB/s):
				</td>
				<td colspan="3" bgcolor="#5B5B5B">
					RAM write (MB/s):
				</td>
				<td colspan="3" bgcolor="#5B5B5B">
					RAM read (MB/s):
				</td>

			</td>

			<tr>
				<td bgcolor="#5B5B5B">
					Device:
				</td>
				<td bgcolor="#5B5B5B">
					Total benchmarks:
				</td>
				<td bgcolor="#4C5100">
					Average:
				</td>
				<td bgcolor="#135100">
					Fastest:
				</td>
				<td bgcolor="#510000">
					Slowest:
				</td>
				<td bgcolor="#4C5100">
					Average:
				</td>
				<td bgcolor="#135100">
					Fastest:
				</td>
				<td bgcolor="#510000">
					Slowest:
				</td>
				<td bgcolor="#4C5100">
					Average:
				</td>
				<td bgcolor="#135100">
					Fastest:
				</td>
				<td bgcolor="#510000">
					Slowest:
				</td>
				<td bgcolor="#4C5100">
					Average:
				</td>
				<td bgcolor="#135100">
					Fastest:
				</td>
				<td bgcolor="#510000">
					Slowest:
				</td>

			</tr>
			$(for i in "${!aBENCH_COMMON_INDEX[@]}"; do echo "<tr><td>${aHW_NAME[$i]:=$i}</td> <td>${aBENCH_COMMON_INDEX[$i]}</td> <td>${aBENCH_RESULT_ROOTFS_WRITE_AVG[$i]}</td> <td>${aBENCH_RESULT_ROOTFS_WRITE_MAX[$i]}</td> <td>${aBENCH_RESULT_ROOTFS_WRITE_MIN[$i]}</td> <td>${aBENCH_RESULT_ROOTFS_READ_AVG[$i]}</td> <td>${aBENCH_RESULT_ROOTFS_READ_MAX[$i]}</td> <td>${aBENCH_RESULT_ROOTFS_READ_MIN[$i]}</td> <td>${aBENCH_RESULT_RAM_WRITE_AVG[$i]}</td> <td>${aBENCH_RESULT_RAM_WRITE_MAX[$i]}</td> <td>${aBENCH_RESULT_RAM_WRITE_MIN[$i]}</td> <td>${aBENCH_RESULT_RAM_READ_AVG[$i]}</td> <td>${aBENCH_RESULT_RAM_READ_MAX[$i]}</td> <td>${aBENCH_RESULT_RAM_READ_MIN[$i]}</td>    </tr>"; done | sort -nk 1 -t '	')
		</table>

		<h4 id="benchmark">DietPi-Benchmarks | Network LAN throughput:</h4>
		<table>

			<tr>

				<td colspan="2">

				</td>
				<td colspan="3" bgcolor="#5B5B5B">
					Transfer rate (MB/s):
				</td>

			</td>

			<tr>
				<td bgcolor="#5B5B5B">
					Device:
				</td>
				<td bgcolor="#5B5B5B">
					Total benchmarks:
				</td>
				<td bgcolor="#4C5100">
					Average:
				</td>
				<td bgcolor="#135100">
					Fastest:
				</td>
				<td bgcolor="#510000">
					Slowest:
				</td>

			</tr>
			$(for i in "${!aBENCH_LAN_INDEX[@]}"; do echo "<tr><td>${aHW_NAME[$i]:=$i}</td> <td>${aBENCH_LAN_INDEX[$i]}</td> <td>${aBENCH_RESULT_NET_LAN_SPEED_AVG[$i]}</td> <td>${aBENCH_RESULT_NET_LAN_SPEED_MAX[$i]}</td> <td>${aBENCH_RESULT_NET_LAN_SPEED_MIN[$i]}</td> </tr>"; done | sort -nk 1 -t '	')
		</table>

	</body>
</html>
_EOF_

		# Clean up tmp ramfs
		rm -R /tmp/dietpi-survey_report

	}

	#-----------------------------------------------------------
	#Main
	#-----------------------------------------------------------
	Main #&> /var/log/dietpi-survey_report.log
	#-----------------------------------------------------------
	exit 0
	#-----------------------------------------------------------

}
